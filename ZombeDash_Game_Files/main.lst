   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.setup_device,"ax",@progbits
  11               	.global	setup_device
  13               	setup_device:
  14               	.LFB8:
  15               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * main.c
   3:main.c        ****  *
   4:main.c        ****  *  Created on: 8 May 2015
   5:main.c        ****  *      Author: Jai Spicer
   6:main.c        ****  */
   7:main.c        **** 
   8:main.c        **** #define F_CPU 8000000UL
   9:main.c        **** #define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))
  10:main.c        **** #define CPU_8MHz 0x01
  11:main.c        **** 
  12:main.c        **** #include <util/delay.h>
  13:main.c        **** 
  14:main.c        **** #include "graphics.h"
  15:main.c        **** #include "friendly_ports.h"
  16:main.c        **** #include "cpu_speed.h"
  17:main.c        **** #include "byte.h"
  18:main.c        **** #include "sprite.h"
  19:main.c        **** 
  20:main.c        **** #include "random_seed.h"
  21:main.c        **** #include "start_screen.h"
  22:main.c        **** #include "screen.h"
  23:main.c        **** #include "lives.h"
  24:main.c        **** #include "score.h"
  25:main.c        **** #include "hero.h"
  26:main.c        **** #include "zombies.h"
  27:main.c        **** #include "game_over.h"
  28:main.c        **** 
  29:main.c        **** #include "pit.h"
  30:main.c        **** #include "items.h"
  31:main.c        **** 
  32:main.c        **** void setup_device(void);
  33:main.c        **** 
  34:main.c        **** int main() {
  35:main.c        **** 	setup_device();
  36:main.c        **** 	while( 1 ) {
  37:main.c        **** 		dead_zombies = 0;
  38:main.c        **** 		setup_start_screen();
  39:main.c        **** 		screen_lines();
  40:main.c        **** 		reset_lives();
  41:main.c        **** 		lives_setup();
  42:main.c        **** 		reset_score();
  43:main.c        **** 		score_setup();
  44:main.c        **** 		start_pit();
  45:main.c        **** 
  46:main.c        **** 		sword_setup();
  47:main.c        **** 		grenades_setup();
  48:main.c        **** 
  49:main.c        **** 		start_hero();
  50:main.c        **** 		start_zombies ();
  51:main.c        **** 
  52:main.c        **** 		clear();
  53:main.c        **** 
  54:main.c        **** 		int zombie_update = 0;
  55:main.c        **** 		int score_update = 0;
  56:main.c        **** 		while ( lives > 0 && dead_zombies < 8) {
  57:main.c        **** 			clear();
  58:main.c        **** 			screen_lines();
  59:main.c        **** 			lives_setup();
  60:main.c        **** 			score_setup();
  61:main.c        **** 
  62:main.c        **** 			draw_pit();
  63:main.c        ****     		draw_sword();
  64:main.c        ****     		pickup_sword();
  65:main.c        ****     		draw_granades();
  66:main.c        ****     		pickup_granades();
  67:main.c        ****     		granade_use();
  68:main.c        ****     		bang_setup();
  69:main.c        **** 
  70:main.c        **** 			update_hero();
  71:main.c        **** 
  72:main.c        **** 			if ( zombie_update == 10 ) {
  73:main.c        **** 				zombie_updater();
  74:main.c        **** 				zombie_update = 0;
  75:main.c        **** 			}
  76:main.c        **** 			if ( score_update == 50 ) {
  77:main.c        **** 				update_score_time();
  78:main.c        **** 				score_update = 0;
  79:main.c        **** 			}
  80:main.c        **** 			zombie_drawer();
  81:main.c        **** 
  82:main.c        **** 			check_zombie();
  83:main.c        **** 			pit_collision(); // Hero pit collision
  84:main.c        **** //			zombie_pit();
  85:main.c        **** 
  86:main.c        **** 			refresh();
  87:main.c        **** 			zombie_update++;
  88:main.c        **** 			score_update++;
  89:main.c        **** 			_delay_ms( 100 );
  90:main.c        **** 		}
  91:main.c        **** 		clear();
  92:main.c        **** 		refresh();
  93:main.c        **** 		draw_string("GAMEOVER",20,10);
  94:main.c        **** 		wait_until(pressed(SW1));
  95:main.c        **** 		clear();
  96:main.c        **** 		refresh();
  97:main.c        **** 	}
  98:main.c        **** 	return 0;
  99:main.c        **** 
 100:main.c        **** }
 101:main.c        **** 
 102:main.c        **** void setup_device() {
  16               		.loc 1 102 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 103:main.c        **** 	CPU_PRESCALE(CPU_8MHz);
  22               		.loc 1 103 0
  23 0000 E1E6      		ldi r30,lo8(97)
  24 0002 F0E0      		ldi r31,0
  25 0004 80E8      		ldi r24,lo8(-128)
  26 0006 8083      		st Z,r24
  27 0008 81E0      		ldi r24,lo8(1)
  28 000a 8083      		st Z,r24
 104:main.c        **** 
 105:main.c        **** 	DDRB = ( LED0 | LED1 ) & ~( SW0 | SW1 ); // Output to LEDs, input from switches.
  29               		.loc 1 105 0
  30 000c 8CE0      		ldi r24,lo8(12)
  31 000e 84B9      		out 0x4,r24
 106:main.c        **** 	DDRD = LED2; // Turn on the little yellow LED.
  32               		.loc 1 106 0
  33 0010 80E4      		ldi r24,lo8(64)
  34 0012 8AB9      		out 0xa,r24
 107:main.c        **** 
 108:main.c        **** 	// Turn everything off to start with
 109:main.c        **** 	PORTB = 0x00;
  35               		.loc 1 109 0
  36 0014 15B8      		out 0x5,__zero_reg__
 110:main.c        **** 	PORTD = 0x00;
  37               		.loc 1 110 0
  38 0016 1BB8      		out 0xb,__zero_reg__
 111:main.c        **** 
 112:main.c        **** 	LCDInitialise(LCD_DEFAULT_CONTRAST);
  39               		.loc 1 112 0
  40 0018 8FE3      		ldi r24,lo8(63)
  41 001a 0E94 0000 		call LCDInitialise
  42               	.LVL0:
 113:main.c        **** 	clear();
  43               		.loc 1 113 0
  44 001e 0C94 0000 		jmp clear
  45               	.LVL1:
  46               		.cfi_endproc
  47               	.LFE8:
  49               		.section	.rodata.str1.1,"aMS",@progbits,1
  50               	.LC0:
  51 0000 4741 4D45 		.string	"GAMEOVER"
  51      4F56 4552 
  51      00
  52               		.section	.text.startup.main,"ax",@progbits
  53               	.global	main
  55               	main:
  56               	.LFB7:
  34:main.c        **** int main() {
  57               		.loc 1 34 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  35:main.c        **** 	setup_device();
  63               		.loc 1 35 0
  64 0000 0E94 0000 		call setup_device
  65               	.LVL2:
  66               	.L9:
  67               	.LBB6:
  37:main.c        **** 		dead_zombies = 0;
  68               		.loc 1 37 0
  69 0004 1092 0000 		sts dead_zombies+1,__zero_reg__
  70 0008 1092 0000 		sts dead_zombies,__zero_reg__
  38:main.c        **** 		setup_start_screen();
  71               		.loc 1 38 0
  72 000c 0E94 0000 		call setup_start_screen
  73               	.LVL3:
  39:main.c        **** 		screen_lines();
  74               		.loc 1 39 0
  75 0010 0E94 0000 		call screen_lines
  76               	.LVL4:
  40:main.c        **** 		reset_lives();
  77               		.loc 1 40 0
  78 0014 0E94 0000 		call reset_lives
  79               	.LVL5:
  41:main.c        **** 		lives_setup();
  80               		.loc 1 41 0
  81 0018 0E94 0000 		call lives_setup
  82               	.LVL6:
  42:main.c        **** 		reset_score();
  83               		.loc 1 42 0
  84 001c 0E94 0000 		call reset_score
  85               	.LVL7:
  43:main.c        **** 		score_setup();
  86               		.loc 1 43 0
  87 0020 0E94 0000 		call score_setup
  88               	.LVL8:
  44:main.c        **** 		start_pit();
  89               		.loc 1 44 0
  90 0024 0E94 0000 		call start_pit
  91               	.LVL9:
  46:main.c        **** 		sword_setup();
  92               		.loc 1 46 0
  93 0028 0E94 0000 		call sword_setup
  94               	.LVL10:
  47:main.c        **** 		grenades_setup();
  95               		.loc 1 47 0
  96 002c 0E94 0000 		call grenades_setup
  97               	.LVL11:
  49:main.c        **** 		start_hero();
  98               		.loc 1 49 0
  99 0030 0E94 0000 		call start_hero
 100               	.LVL12:
  50:main.c        **** 		start_zombies ();
 101               		.loc 1 50 0
 102 0034 0E94 0000 		call start_zombies
 103               	.LVL13:
  52:main.c        **** 		clear();
 104               		.loc 1 52 0
 105 0038 0E94 0000 		call clear
 106               	.LVL14:
  55:main.c        **** 		int score_update = 0;
 107               		.loc 1 55 0
 108 003c 00E0      		ldi r16,0
 109 003e 10E0      		ldi r17,0
  54:main.c        **** 		int zombie_update = 0;
 110               		.loc 1 54 0
 111 0040 C0E0      		ldi r28,0
 112 0042 D0E0      		ldi r29,0
  56:main.c        **** 		while ( lives > 0 && dead_zombies < 8) {
 113               		.loc 1 56 0
 114 0044 00C0      		rjmp .L3
 115               	.LVL15:
 116               	.L7:
 117               	.LBB7:
  57:main.c        **** 			clear();
 118               		.loc 1 57 0
 119 0046 0E94 0000 		call clear
 120               	.LVL16:
  58:main.c        **** 			screen_lines();
 121               		.loc 1 58 0
 122 004a 0E94 0000 		call screen_lines
 123               	.LVL17:
  59:main.c        **** 			lives_setup();
 124               		.loc 1 59 0
 125 004e 0E94 0000 		call lives_setup
 126               	.LVL18:
  60:main.c        **** 			score_setup();
 127               		.loc 1 60 0
 128 0052 0E94 0000 		call score_setup
 129               	.LVL19:
  62:main.c        **** 			draw_pit();
 130               		.loc 1 62 0
 131 0056 0E94 0000 		call draw_pit
 132               	.LVL20:
  63:main.c        ****     		draw_sword();
 133               		.loc 1 63 0
 134 005a 0E94 0000 		call draw_sword
 135               	.LVL21:
  64:main.c        ****     		pickup_sword();
 136               		.loc 1 64 0
 137 005e 0E94 0000 		call pickup_sword
 138               	.LVL22:
  65:main.c        ****     		draw_granades();
 139               		.loc 1 65 0
 140 0062 0E94 0000 		call draw_granades
 141               	.LVL23:
  66:main.c        ****     		pickup_granades();
 142               		.loc 1 66 0
 143 0066 0E94 0000 		call pickup_granades
 144               	.LVL24:
  67:main.c        ****     		granade_use();
 145               		.loc 1 67 0
 146 006a 0E94 0000 		call granade_use
 147               	.LVL25:
  68:main.c        ****     		bang_setup();
 148               		.loc 1 68 0
 149 006e 0E94 0000 		call bang_setup
 150               	.LVL26:
  70:main.c        **** 			update_hero();
 151               		.loc 1 70 0
 152 0072 0E94 0000 		call update_hero
 153               	.LVL27:
  72:main.c        **** 			if ( zombie_update == 10 ) {
 154               		.loc 1 72 0
 155 0076 CA30      		cpi r28,10
 156 0078 D105      		cpc r29,__zero_reg__
 157 007a 01F4      		brne .L4
  73:main.c        **** 				zombie_updater();
 158               		.loc 1 73 0
 159 007c 0E94 0000 		call zombie_updater
 160               	.LVL28:
  74:main.c        **** 				zombie_update = 0;
 161               		.loc 1 74 0
 162 0080 C0E0      		ldi r28,0
 163 0082 D0E0      		ldi r29,0
 164               	.LVL29:
 165               	.L4:
  76:main.c        **** 			if ( score_update == 50 ) {
 166               		.loc 1 76 0
 167 0084 0233      		cpi r16,50
 168 0086 1105      		cpc r17,__zero_reg__
 169 0088 01F4      		brne .L5
  77:main.c        **** 				update_score_time();
 170               		.loc 1 77 0
 171 008a 0E94 0000 		call update_score_time
 172               	.LVL30:
  78:main.c        **** 				score_update = 0;
 173               		.loc 1 78 0
 174 008e 00E0      		ldi r16,0
 175 0090 10E0      		ldi r17,0
 176               	.LVL31:
 177               	.L5:
  80:main.c        **** 			zombie_drawer();
 178               		.loc 1 80 0
 179 0092 0E94 0000 		call zombie_drawer
 180               	.LVL32:
  82:main.c        **** 			check_zombie();
 181               		.loc 1 82 0
 182 0096 0E94 0000 		call check_zombie
 183               	.LVL33:
  83:main.c        **** 			pit_collision(); // Hero pit collision
 184               		.loc 1 83 0
 185 009a 0E94 0000 		call pit_collision
 186               	.LVL34:
  86:main.c        **** 			refresh();
 187               		.loc 1 86 0
 188 009e 0E94 0000 		call refresh
 189               	.LVL35:
  87:main.c        **** 			zombie_update++;
 190               		.loc 1 87 0
 191 00a2 2196      		adiw r28,1
 192               	.LVL36:
  88:main.c        **** 			score_update++;
 193               		.loc 1 88 0
 194 00a4 0F5F      		subi r16,-1
 195 00a6 1F4F      		sbci r17,-1
 196               	.LVL37:
 197               	.LBB8:
 198               	.LBB9:
 199               		.file 2 "/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h"
   1:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
   6:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
   9:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  12:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  17:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  21:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  33:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  35:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  38:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  42:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  46:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \code
  49:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  54:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     used.
  58:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  59:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  68:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  77:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  81:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** */
  82:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  83:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  87:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  88:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  93:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  94:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  97:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  98:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
 103:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 104:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /**
 105:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 107:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 109:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 112:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 114:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 120:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 125:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 129:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 132:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 140:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****  */
 141:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** void
 142:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** {
 144:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 153:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 156:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 159:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 164:/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 200               		.loc 2 164 0
 201 00a8 2FEF      		ldi r18,lo8(159999)
 202 00aa 80E7      		ldi r24,hi8(159999)
 203 00ac 92E0      		ldi r25,hlo8(159999)
 204 00ae 2150      		1: subi r18,1
 205 00b0 8040      		sbci r24,0
 206 00b2 9040      		sbci r25,0
 207 00b4 01F4      		brne 1b
 208 00b6 00C0      		rjmp .
 209 00b8 0000      		nop
 210               	.LVL38:
 211               	.L3:
 212               	.LBE9:
 213               	.LBE8:
 214               	.LBE7:
  56:main.c        **** 		while ( lives > 0 && dead_zombies < 8) {
 215               		.loc 1 56 0 discriminator 1
 216 00ba 8091 0000 		lds r24,lives
 217 00be 9091 0000 		lds r25,lives+1
 218 00c2 1816      		cp __zero_reg__,r24
 219 00c4 1906      		cpc __zero_reg__,r25
 220 00c6 04F4      		brge .L6
  56:main.c        **** 		while ( lives > 0 && dead_zombies < 8) {
 221               		.loc 1 56 0 is_stmt 0 discriminator 2
 222 00c8 8091 0000 		lds r24,dead_zombies
 223 00cc 9091 0000 		lds r25,dead_zombies+1
 224 00d0 0897      		sbiw r24,8
 225 00d2 04F4      		brge .+2
 226 00d4 00C0      		rjmp .L7
 227               	.L6:
  91:main.c        **** 		clear();
 228               		.loc 1 91 0 is_stmt 1
 229 00d6 0E94 0000 		call clear
 230               	.LVL39:
  92:main.c        **** 		refresh();
 231               		.loc 1 92 0
 232 00da 0E94 0000 		call refresh
 233               	.LVL40:
  93:main.c        **** 		draw_string("GAMEOVER",20,10);
 234               		.loc 1 93 0
 235 00de 4AE0      		ldi r20,lo8(10)
 236 00e0 64E1      		ldi r22,lo8(20)
 237 00e2 80E0      		ldi r24,lo8(.LC0)
 238 00e4 90E0      		ldi r25,hi8(.LC0)
 239 00e6 0E94 0000 		call draw_string
 240               	.LVL41:
 241               	.L8:
  94:main.c        **** 		wait_until(pressed(SW1));
 242               		.loc 1 94 0 discriminator 1
 243 00ea 199B      		sbis 0x3,1
 244 00ec 00C0      		rjmp .L8
  95:main.c        **** 		clear();
 245               		.loc 1 95 0
 246 00ee 0E94 0000 		call clear
 247               	.LVL42:
  96:main.c        **** 		refresh();
 248               		.loc 1 96 0
 249 00f2 0E94 0000 		call refresh
 250               	.LVL43:
 251               	.LBE6:
  97:main.c        **** 	}
 252               		.loc 1 97 0
 253 00f6 00C0      		rjmp .L9
 254               		.cfi_endproc
 255               	.LFE7:
 257               		.comm	bomb,21,1
 258               		.comm	grenades,21,1
 259               		.comm	sword,21,1
 260               		.comm	pit,21,1
 261               		.comm	z,2,1
 262               		.comm	zombies,168,1
 263               		.comm	hero,21,1
 264               		.text
 265               	.Letext0:
 266               		.file 3 "/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 267               		.file 4 "../teensy_graphics/byte.h"
 268               		.file 5 "../teensy_graphics/sprite.h"
 269               		.file 6 "../teensy_graphics/ascii_font.h"
 270               		.file 7 "lives.h"
 271               		.file 8 "hero.h"
 272               		.file 9 "zombies.h"
 273               		.file 10 "pit.h"
 274               		.file 11 "items.h"
 275               		.file 12 "../teensy_graphics/lcd.h"
 276               		.file 13 "../teensy_graphics/graphics.h"
 277               		.file 14 "screen.h"
 278               		.file 15 "score.h"
 279               		.file 16 "start_screen.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:2      *ABS*:0000003e __SP_H__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:3      *ABS*:0000003d __SP_L__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:4      *ABS*:0000003f __SREG__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:6      *ABS*:00000001 __zero_reg__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:13     .text.setup_device:00000000 setup_device
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccbrvEI7.s:55     .text.startup.main:00000000 main
                            *COM*:00000015 bomb
                            *COM*:00000015 grenades
                            *COM*:00000015 sword
                            *COM*:00000015 pit
                            *COM*:00000002 z
                            *COM*:000000a8 zombies
                            *COM*:00000015 hero

UNDEFINED SYMBOLS
LCDInitialise
clear
dead_zombies
setup_start_screen
screen_lines
reset_lives
lives_setup
reset_score
score_setup
start_pit
sword_setup
grenades_setup
start_hero
start_zombies
draw_pit
draw_sword
pickup_sword
draw_granades
pickup_granades
granade_use
bang_setup
update_hero
zombie_updater
update_score_time
zombie_drawer
check_zombie
pit_collision
refresh
lives
draw_string
__do_copy_data
__do_clear_bss
