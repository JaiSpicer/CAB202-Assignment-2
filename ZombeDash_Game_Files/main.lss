
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  0000320c  000032a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000320c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033a  0080018e  0080018e  0000332e  2**0
                  ALLOC
  3 .stab         00002994  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000802  00000000  00000000  00005cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000064c6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  000064d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004988  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a75  00000000  00000000  0000b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019da  00000000  00000000  0000ce35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d50  00000000  00000000  0000e810  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000990  00000000  00000000  0000f560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d3d  00000000  00000000  0000fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  00012c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "game_over.h"
#include "score.h"


void game_over() {
	draw_string( 'GAMEOVER', 15, 1 );
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	5f c1       	rjmp	.+702    	; 0x2c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c1       	rjmp	.+698    	; 0x2c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c1       	rjmp	.+694    	; 0x2c4 <__bad_interrupt>
       e:	00 00       	nop
	game_over_score();
      10:	59 c1       	rjmp	.+690    	; 0x2c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c1       	rjmp	.+686    	; 0x2c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c1       	rjmp	.+682    	; 0x2c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c1       	rjmp	.+674    	; 0x2c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c1       	rjmp	.+670    	; 0x2c4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c1       	rjmp	.+666    	; 0x2c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4b c1       	rjmp	.+662    	; 0x2c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	49 c1       	rjmp	.+658    	; 0x2c4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c1       	rjmp	.+654    	; 0x2c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c1       	rjmp	.+650    	; 0x2c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c1       	rjmp	.+646    	; 0x2c4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c1       	rjmp	.+642    	; 0x2c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c1       	rjmp	.+638    	; 0x2c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	3d c1       	rjmp	.+634    	; 0x2c4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3b c1       	rjmp	.+630    	; 0x2c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	39 c1       	rjmp	.+626    	; 0x2c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c1       	rjmp	.+622    	; 0x2c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c1       	rjmp	.+618    	; 0x2c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c1       	rjmp	.+614    	; 0x2c4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c1       	rjmp	.+610    	; 0x2c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c1       	rjmp	.+606    	; 0x2c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	2d c1       	rjmp	.+602    	; 0x2c4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2b c1       	rjmp	.+598    	; 0x2c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	29 c1       	rjmp	.+594    	; 0x2c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	27 c1       	rjmp	.+590    	; 0x2c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	25 c1       	rjmp	.+586    	; 0x2c4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	23 c1       	rjmp	.+582    	; 0x2c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	21 c1       	rjmp	.+578    	; 0x2c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	1f c1       	rjmp	.+574    	; 0x2c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	1d c1       	rjmp	.+570    	; 0x2c4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1b c1       	rjmp	.+566    	; 0x2c4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	19 c1       	rjmp	.+562    	; 0x2c4 <__bad_interrupt>
      92:	00 00       	nop
      94:	17 c1       	rjmp	.+558    	; 0x2c4 <__bad_interrupt>
      96:	00 00       	nop
      98:	15 c1       	rjmp	.+554    	; 0x2c4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	13 c1       	rjmp	.+550    	; 0x2c4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	11 c1       	rjmp	.+546    	; 0x2c4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0f c1       	rjmp	.+542    	; 0x2c4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0d c1       	rjmp	.+538    	; 0x2c4 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	ec e0       	ldi	r30, 0x0C	; 12
     2a0:	f2 e3       	ldi	r31, 0x32	; 50
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__do_copy_data+0x10>
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0
     2a8:	ae 38       	cpi	r26, 0x8E	; 142
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <__do_copy_data+0xc>

000002ae <__do_clear_bss>:
     2ae:	24 e0       	ldi	r18, 0x04	; 4
     2b0:	ae e8       	ldi	r26, 0x8E	; 142
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	a8 3c       	cpi	r26, 0xC8	; 200
     2ba:	b2 07       	cpc	r27, r18
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	14 d0       	rcall	.+40     	; 0x2e8 <main>
     2c0:	0c 94 04 19 	jmp	0x3208	; 0x3208 <_exit>

000002c4 <__bad_interrupt>:
     2c4:	9d ce       	rjmp	.-710    	; 0x0 <__vectors>

000002c6 <setup_device>:
	return 0;

}

void setup_device() {
	CPU_PRESCALE(CPU_8MHz);
     2c6:	e1 e6       	ldi	r30, 0x61	; 97
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e8       	ldi	r24, 0x80	; 128
     2cc:	80 83       	st	Z, r24
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 83       	st	Z, r24

	DDRB = ( LED0 | LED1 ) & ~( SW0 | SW1 ); // Output to LEDs, input from switches.
     2d2:	8c e0       	ldi	r24, 0x0C	; 12
     2d4:	84 b9       	out	0x04, r24	; 4
	DDRD = LED2; // Turn on the little yellow LED.
     2d6:	80 e4       	ldi	r24, 0x40	; 64
     2d8:	8a b9       	out	0x0a, r24	; 10

	// Turn everything off to start with
	PORTB = 0x00;
     2da:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
     2dc:	1b b8       	out	0x0b, r1	; 11

	LCDInitialise(LCD_DEFAULT_CONTRAST);
     2de:	8f e3       	ldi	r24, 0x3F	; 63
     2e0:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCDInitialise>
	clear();
     2e4:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <clear>

000002e8 <main>:
#include "items.h"

void setup_device(void);

int main() {
	setup_device();
     2e8:	ee df       	rcall	.-36     	; 0x2c6 <setup_device>
     2ea:	10 92 91 01 	sts	0x0191, r1
	while( 1 ) {
		dead_zombies = 0;
     2ee:	10 92 90 01 	sts	0x0190, r1
     2f2:	b6 d0       	rcall	.+364    	; 0x460 <setup_start_screen>
		setup_start_screen();
     2f4:	e2 d0       	rcall	.+452    	; 0x4ba <screen_lines>
     2f6:	39 d1       	rcall	.+626    	; 0x56a <reset_lives>
		screen_lines();
     2f8:	12 d1       	rcall	.+548    	; 0x51e <lives_setup>
     2fa:	6e d1       	rcall	.+732    	; 0x5d8 <reset_score>
		reset_lives();
     2fc:	3d d1       	rcall	.+634    	; 0x578 <score_setup>
     2fe:	0e 94 36 0b 	call	0x166c	; 0x166c <start_pit>
		lives_setup();
     302:	0e 94 08 0c 	call	0x1810	; 0x1810 <sword_setup>
		reset_score();
     306:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <grenades_setup>
		score_setup();
     30a:	6b d1       	rcall	.+726    	; 0x5e2 <start_hero>
		start_pit();
     30c:	66 d5       	rcall	.+2764   	; 0xdda <start_zombies>
     30e:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>

		sword_setup();
     312:	00 e0       	ldi	r16, 0x00	; 0
		grenades_setup();
     314:	10 e0       	ldi	r17, 0x00	; 0
     316:	c0 e0       	ldi	r28, 0x00	; 0

		start_hero();
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	33 c0       	rjmp	.+102    	; 0x382 <main+0x9a>
		start_zombies ();
     31c:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>

		clear();
     320:	cc d0       	rcall	.+408    	; 0x4ba <screen_lines>
     322:	fd d0       	rcall	.+506    	; 0x51e <lives_setup>

		int zombie_update = 0;
		int score_update = 0;
     324:	29 d1       	rcall	.+594    	; 0x578 <score_setup>
     326:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <draw_pit>
		start_hero();
		start_zombies ();

		clear();

		int zombie_update = 0;
     32a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <draw_sword>
		int score_update = 0;
		while ( lives > 0 && dead_zombies < 8) {
			clear();
     32e:	0e 94 ad 0c 	call	0x195a	; 0x195a <pickup_sword>
			screen_lines();
     332:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <draw_granades>
			lives_setup();
     336:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <pickup_granades>
			score_setup();
     33a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <granade_use>

			draw_pit();
     33e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <bang_setup>
    		draw_sword();
     342:	ac d4       	rcall	.+2392   	; 0xc9c <update_hero>
     344:	ca 30       	cpi	r28, 0x0A	; 10
    		pickup_sword();
     346:	d1 05       	cpc	r29, r1
     348:	19 f4       	brne	.+6      	; 0x350 <main+0x68>
    		draw_granades();
     34a:	9b d7       	rcall	.+3894   	; 0x1282 <zombie_updater>
     34c:	c0 e0       	ldi	r28, 0x00	; 0
    		pickup_granades();
     34e:	d0 e0       	ldi	r29, 0x00	; 0
     350:	02 33       	cpi	r16, 0x32	; 50
    		granade_use();
     352:	11 05       	cpc	r17, r1
     354:	19 f4       	brne	.+6      	; 0x35c <main+0x74>
    		bang_setup();
     356:	36 d1       	rcall	.+620    	; 0x5c4 <update_score_time>
     358:	00 e0       	ldi	r16, 0x00	; 0

			update_hero();
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	62 d5       	rcall	.+2756   	; 0xe22 <zombie_drawer>

			if ( zombie_update == 10 ) {
     35e:	0e 94 26 0b 	call	0x164c	; 0x164c <check_zombie>
     362:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <pit_collision>
				zombie_updater();
     366:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
				zombie_update = 0;
     36a:	21 96       	adiw	r28, 0x01	; 1
			}
			if ( score_update == 50 ) {
     36c:	0f 5f       	subi	r16, 0xFF	; 255
     36e:	1f 4f       	sbci	r17, 0xFF	; 255
     370:	2f ef       	ldi	r18, 0xFF	; 255
				update_score_time();
     372:	80 e7       	ldi	r24, 0x70	; 112
     374:	92 e0       	ldi	r25, 0x02	; 2
				score_update = 0;
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
			}
			zombie_drawer();
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x8e>

			check_zombie();
     37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x98>
     380:	00 00       	nop
			pit_collision(); // Hero pit collision
     382:	80 91 00 01 	lds	r24, 0x0100
//			zombie_pit();

			refresh();
     386:	90 91 01 01 	lds	r25, 0x0101
			zombie_update++;
     38a:	18 16       	cp	r1, r24
			score_update++;
     38c:	19 06       	cpc	r1, r25
     38e:	3c f4       	brge	.+14     	; 0x39e <main+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     390:	80 91 90 01 	lds	r24, 0x0190
     394:	90 91 91 01 	lds	r25, 0x0191
     398:	08 97       	sbiw	r24, 0x08	; 8
     39a:	0c f4       	brge	.+2      	; 0x39e <main+0xb6>
     39c:	bf cf       	rjmp	.-130    	; 0x31c <main+0x34>
     39e:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>

		clear();

		int zombie_update = 0;
		int score_update = 0;
		while ( lives > 0 && dead_zombies < 8) {
     3a2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
     3a6:	4a e0       	ldi	r20, 0x0A	; 10
     3a8:	64 e1       	ldi	r22, 0x14	; 20
     3aa:	88 e4       	ldi	r24, 0x48	; 72
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
     3b2:	19 9b       	sbis	0x03, 1	; 3
     3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <main+0xca>
     3b6:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>
     3ba:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
			refresh();
			zombie_update++;
			score_update++;
			_delay_ms( 100 );
		}
		clear();
     3be:	95 cf       	rjmp	.-214    	; 0x2ea <main+0x2>

000003c0 <game_countdown>:
	game_countdown();
	refresh();
}

void game_countdown() {
	clear();
     3c0:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>
	int timer = 3;
//	while ( timer > 0) {

		draw_string( "3", 40, 22 );
     3c4:	46 e1       	ldi	r20, 0x16	; 22
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	68 e2       	ldi	r22, 0x28	; 40
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	81 e5       	ldi	r24, 0x51	; 81
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
		turn_on(LED0);
     3d4:	2a 9a       	sbi	0x05, 2	; 5
		turn_on(LED1);
     3d6:	2b 9a       	sbi	0x05, 3	; 5
		turn_on(LED2);
     3d8:	5e 9a       	sbi	0x0b, 6	; 11
		refresh();
     3da:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
     3de:	2f ef       	ldi	r18, 0xFF	; 255
     3e0:	89 e6       	ldi	r24, 0x69	; 105
     3e2:	98 e1       	ldi	r25, 0x18	; 24
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	80 40       	sbci	r24, 0x00	; 0
     3e8:	90 40       	sbci	r25, 0x00	; 0
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <game_countdown+0x24>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <game_countdown+0x2e>
     3ee:	00 00       	nop
		_delay_ms(1000);
		turn_off(LED0);
     3f0:	2a 98       	cbi	0x05, 2	; 5
		turn_off(LED1);
     3f2:	2b 98       	cbi	0x05, 3	; 5
		turn_off(LED2);
     3f4:	5e 98       	cbi	0x0b, 6	; 11
		clear();
     3f6:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>
		draw_string( "2", 40, 22 );
     3fa:	46 e1       	ldi	r20, 0x16	; 22
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	68 e2       	ldi	r22, 0x28	; 40
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	83 e5       	ldi	r24, 0x53	; 83
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
		turn_on(LED0);
     40a:	2a 9a       	sbi	0x05, 2	; 5
		turn_on(LED1);
     40c:	2b 9a       	sbi	0x05, 3	; 5
		refresh();
     40e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	89 e6       	ldi	r24, 0x69	; 105
     416:	98 e1       	ldi	r25, 0x18	; 24
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	80 40       	sbci	r24, 0x00	; 0
     41c:	90 40       	sbci	r25, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <game_countdown+0x58>
     420:	00 c0       	rjmp	.+0      	; 0x422 <game_countdown+0x62>
     422:	00 00       	nop
		_delay_ms(1000);
		turn_off(LED0);
     424:	2a 98       	cbi	0x05, 2	; 5
		turn_off(LED1);
     426:	2b 98       	cbi	0x05, 3	; 5
		clear();
     428:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>
		draw_string( "1", 40, 22 );
     42c:	46 e1       	ldi	r20, 0x16	; 22
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	68 e2       	ldi	r22, 0x28	; 40
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	85 e5       	ldi	r24, 0x55	; 85
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
		turn_on(LED1);
     43c:	2b 9a       	sbi	0x05, 3	; 5
		refresh();
     43e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
     442:	2f ef       	ldi	r18, 0xFF	; 255
     444:	89 e6       	ldi	r24, 0x69	; 105
     446:	98 e1       	ldi	r25, 0x18	; 24
     448:	21 50       	subi	r18, 0x01	; 1
     44a:	80 40       	sbci	r24, 0x00	; 0
     44c:	90 40       	sbci	r25, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <game_countdown+0x88>
     450:	00 c0       	rjmp	.+0      	; 0x452 <game_countdown+0x92>
     452:	00 00       	nop
		_delay_ms(1000);
		turn_off(LED0);
     454:	2a 98       	cbi	0x05, 2	; 5
		turn_off(LED1);
     456:	2b 98       	cbi	0x05, 3	; 5
		clear();
     458:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>

//	}
	clear();
     45c:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <clear>

00000460 <setup_start_screen>:

#include "start_screen.h"
#include "friendly_ports.h"

void setup_start_screen() { // Write the different strings at the correct locations on the screen
	clear();
     460:	0e 94 8b 10 	call	0x2116	; 0x2116 <clear>
	draw_string("ZombieDash",15,0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	6f e0       	ldi	r22, 0x0F	; 15
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	87 e5       	ldi	r24, 0x57	; 87
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	draw_string("Teensy Edition",7,9);
     474:	49 e0       	ldi	r20, 0x09	; 9
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	67 e0       	ldi	r22, 0x07	; 7
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	82 e6       	ldi	r24, 0x62	; 98
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	draw_string("n9378880",19,27);
     484:	4b e1       	ldi	r20, 0x1B	; 27
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	63 e1       	ldi	r22, 0x13	; 19
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	81 e7       	ldi	r24, 0x71	; 113
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	draw_string("Jai Spicer",15,36);
     494:	44 e2       	ldi	r20, 0x24	; 36
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	6f e0       	ldi	r22, 0x0F	; 15
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	8a e7       	ldi	r24, 0x7A	; 122
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	refresh();
     4a4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <refresh>
	random_seed();
     4a8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <random_seed>
	wait_until( pressed( SW1 ) );
     4ac:	19 9b       	sbis	0x03, 1	; 3
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <setup_start_screen+0x4c>
	wait_until( !pressed( SW1 ) );
     4b0:	19 99       	sbic	0x03, 1	; 3
     4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <setup_start_screen+0x50>

	game_countdown();
     4b4:	85 df       	rcall	.-246    	; 0x3c0 <game_countdown>
     4b6:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <refresh>

000004ba <screen_lines>:
 */

#include "screen.h"

void screen_lines() {
	draw_line(0,0,0,47); // Left Line
     4ba:	2f e2       	ldi	r18, 0x2F	; 47
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 b6 10 	call	0x216c	; 0x216c <draw_line>
	draw_line(83,0,83,47); // Right Line
     4ce:	2f e2       	ldi	r18, 0x2F	; 47
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	43 e5       	ldi	r20, 0x53	; 83
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	83 e5       	ldi	r24, 0x53	; 83
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 b6 10 	call	0x216c	; 0x216c <draw_line>
	draw_line(0,0,84,0); // Top Line
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	44 e5       	ldi	r20, 0x54	; 84
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 b6 10 	call	0x216c	; 0x216c <draw_line>
	draw_line(0,47,83,47); // Bottom Line
     4f6:	2f e2       	ldi	r18, 0x2F	; 47
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	43 e5       	ldi	r20, 0x53	; 83
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	6f e2       	ldi	r22, 0x2F	; 47
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 b6 10 	call	0x216c	; 0x216c <draw_line>
	draw_line(0,12,83,12); // Score area
     50a:	2c e0       	ldi	r18, 0x0C	; 12
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	43 e5       	ldi	r20, 0x53	; 83
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	6c e0       	ldi	r22, 0x0C	; 12
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0c 94 b6 10 	jmp	0x216c	; 0x216c <draw_line>

0000051e <lives_setup>:
#include "lives.h"

int lives = 3; // Initialise lives for the start of game
char l[15];
void lives_setup() {
	draw_string("L:", 2,3);
     51e:	43 e0       	ldi	r20, 0x03	; 3
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	62 e0       	ldi	r22, 0x02	; 2
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	85 e8       	ldi	r24, 0x85	; 133
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	sprintf(l, "%d", lives);
     52e:	80 91 01 01 	lds	r24, 0x0101
     532:	8f 93       	push	r24
     534:	80 91 00 01 	lds	r24, 0x0100
     538:	8f 93       	push	r24
     53a:	88 e8       	ldi	r24, 0x88	; 136
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	8b ea       	ldi	r24, 0xAB	; 171
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <sprintf>
	draw_string(l, 11, 3);
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	43 e0       	ldi	r20, 0x03	; 3
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	6b e0       	ldi	r22, 0x0B	; 11
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	8b ea       	ldi	r24, 0xAB	; 171
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0c 94 08 13 	jmp	0x2610	; 0x2610 <draw_string>

0000056a <reset_lives>:
void update_lives() {
	lives = lives - 1;
}

void reset_lives() {
	lives = 3;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 01 01 	sts	0x0101, r25
     572:	80 93 00 01 	sts	0x0100, r24
     576:	08 95       	ret

00000578 <score_setup>:
char s[15];
void score_setup() {
//	score = scoretotal;


	draw_string("S:", 18,3);
     578:	43 e0       	ldi	r20, 0x03	; 3
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	62 e1       	ldi	r22, 0x12	; 18
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	8b e8       	ldi	r24, 0x8B	; 139
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 08 13 	call	0x2610	; 0x2610 <draw_string>
	sprintf(s, "%d", score);
     588:	80 91 8f 01 	lds	r24, 0x018F
     58c:	8f 93       	push	r24
     58e:	80 91 8e 01 	lds	r24, 0x018E
     592:	8f 93       	push	r24
     594:	88 e8       	ldi	r24, 0x88	; 136
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	8a eb       	ldi	r24, 0xBA	; 186
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <sprintf>
	draw_string(s, 27, 3);
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	43 e0       	ldi	r20, 0x03	; 3
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	6b e1       	ldi	r22, 0x1B	; 27
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	8a eb       	ldi	r24, 0xBA	; 186
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0c 94 08 13 	jmp	0x2610	; 0x2610 <draw_string>

000005c4 <update_score_time>:
}

void update_score_time() {
	score = score + 1;
     5c4:	80 91 8e 01 	lds	r24, 0x018E
     5c8:	90 91 8f 01 	lds	r25, 0x018F
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	90 93 8f 01 	sts	0x018F, r25
     5d2:	80 93 8e 01 	sts	0x018E, r24
     5d6:	08 95       	ret

000005d8 <reset_score>:
	sprintf(s, "%d", score);
	draw_string(s,24,10);
}

void reset_score() {
	score = 0;
     5d8:	10 92 8f 01 	sts	0x018F, r1
     5dc:	10 92 8e 01 	sts	0x018E, r1
     5e0:	08 95       	ret

000005e2 <start_hero>:
			BYTE( 11100000 ),
			BYTE( 01000000 ),
			BYTE( 11100000 )
	};

void start_hero() {
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
	const int hero_width = 3; // Maybe 4
	const int hero_height = 3;

//	Sprite hero;

	init_sprite( &hero, 38,28,hero_width,hero_height, bitmap_hero );
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	e8 2e       	mov	r14, r24
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	f8 2e       	mov	r15, r24
     5f0:	03 e0       	ldi	r16, 0x03	; 3
     5f2:	23 e0       	ldi	r18, 0x03	; 3
     5f4:	4c e1       	ldi	r20, 0x1C	; 28
     5f6:	66 e2       	ldi	r22, 0x26	; 38
     5f8:	84 ec       	ldi	r24, 0xC4	; 196
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <init_sprite>
	hero.is_visible = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 ce 01 	sts	0x01CE, r24
	hero_prt->is_visible = 1;
     606:	e0 91 05 01 	lds	r30, 0x0105
     60a:	f0 91 06 01 	lds	r31, 0x0106
     60e:	82 87       	std	Z+10, r24	; 0x0a

	hero.dx = 1;
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	a0 e8       	ldi	r26, 0x80	; 128
     616:	bf e3       	ldi	r27, 0x3F	; 63
     618:	80 93 d1 01 	sts	0x01D1, r24
     61c:	90 93 d2 01 	sts	0x01D2, r25
     620:	a0 93 d3 01 	sts	0x01D3, r26
     624:	b0 93 d4 01 	sts	0x01D4, r27
	hero.dy = 0;
     628:	10 92 d5 01 	sts	0x01D5, r1
     62c:	10 92 d6 01 	sts	0x01D6, r1
     630:	10 92 d7 01 	sts	0x01D7, r1
     634:	10 92 d8 01 	sts	0x01D8, r1

	draw_sprite( &hero );
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	91 e0       	ldi	r25, 0x01	; 1


}
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
	hero_prt->is_visible = 1;

	hero.dx = 1;
	hero.dy = 0;

	draw_sprite( &hero );
     642:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <draw_sprite>

00000646 <pit_hero>:
	else {
		move_hero( hero_prt );
	}
}

void pit_hero ( Sprite * hero ) {
     646:	4f 92       	push	r4
     648:	5f 92       	push	r5
     64a:	6f 92       	push	r6
     64c:	7f 92       	push	r7
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
	hero->x += hero->dx;
     664:	2d 85       	ldd	r18, Y+13	; 0x0d
     666:	3e 85       	ldd	r19, Y+14	; 0x0e
     668:	4f 85       	ldd	r20, Y+15	; 0x0f
     66a:	58 89       	ldd	r21, Y+16	; 0x10
     66c:	68 81       	ld	r22, Y
     66e:	79 81       	ldd	r23, Y+1	; 0x01
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	9b 81       	ldd	r25, Y+3	; 0x03
     674:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     678:	4b 01       	movw	r8, r22
     67a:	5c 01       	movw	r10, r24
     67c:	98 2f       	mov	r25, r24
     67e:	48 2d       	mov	r20, r8
     680:	59 2d       	mov	r21, r9
     682:	69 2f       	mov	r22, r25
     684:	7b 2d       	mov	r23, r11
     686:	48 83       	st	Y, r20
     688:	59 83       	std	Y+1, r21	; 0x01
     68a:	6a 83       	std	Y+2, r22	; 0x02
     68c:	7b 83       	std	Y+3, r23	; 0x03
	hero->y += hero->dy;
     68e:	29 89       	ldd	r18, Y+17	; 0x11
     690:	3a 89       	ldd	r19, Y+18	; 0x12
     692:	4b 89       	ldd	r20, Y+19	; 0x13
     694:	5c 89       	ldd	r21, Y+20	; 0x14
     696:	6c 81       	ldd	r22, Y+4	; 0x04
     698:	7d 81       	ldd	r23, Y+5	; 0x05
     69a:	8e 81       	ldd	r24, Y+6	; 0x06
     69c:	9f 81       	ldd	r25, Y+7	; 0x07
     69e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     6a2:	7b 01       	movw	r14, r22
     6a4:	8c 01       	movw	r16, r24
     6a6:	98 2f       	mov	r25, r24
     6a8:	4e 2d       	mov	r20, r14
     6aa:	5f 2d       	mov	r21, r15
     6ac:	69 2f       	mov	r22, r25
     6ae:	71 2f       	mov	r23, r17
     6b0:	4c 83       	std	Y+4, r20	; 0x04
     6b2:	5d 83       	std	Y+5, r21	; 0x05
     6b4:	6e 83       	std	Y+6, r22	; 0x06
     6b6:	7f 83       	std	Y+7, r23	; 0x07

	if ( ( pressed( SW0 ) ) && ( pressed( SW1 ) )) {
     6b8:	18 9b       	sbis	0x03, 0	; 3
     6ba:	1a c0       	rjmp	.+52     	; 0x6f0 <pit_hero+0xaa>
     6bc:	19 9b       	sbis	0x03, 1	; 3
     6be:	18 c0       	rjmp	.+48     	; 0x6f0 <pit_hero+0xaa>
		hero->x -=1;
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	68 2d       	mov	r22, r8
     6ca:	79 2d       	mov	r23, r9
     6cc:	8a 2d       	mov	r24, r10
     6ce:	9b 2d       	mov	r25, r11
     6d0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
		hero->x = hero->x - 6;
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 ec       	ldi	r20, 0xC0	; 192
     6da:	50 e4       	ldi	r21, 0x40	; 64
     6dc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     6e0:	68 83       	st	Y, r22
     6e2:	79 83       	std	Y+1, r23	; 0x01
     6e4:	8a 83       	std	Y+2, r24	; 0x02
     6e6:	9b 83       	std	Y+3, r25	; 0x03
		in_pit = 0;
     6e8:	10 92 93 01 	sts	0x0193, r1
     6ec:	10 92 92 01 	sts	0x0192, r1

	}

	if ( hero->x > pit.x + 5 - hero->width) {
     6f0:	88 80       	ld	r8, Y
     6f2:	99 80       	ldd	r9, Y+1	; 0x01
     6f4:	aa 80       	ldd	r10, Y+2	; 0x02
     6f6:	bb 80       	ldd	r11, Y+3	; 0x03
     6f8:	68 85       	ldd	r22, Y+8	; 0x08
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
     704:	2b 01       	movw	r4, r22
     706:	3c 01       	movw	r6, r24
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 ea       	ldi	r20, 0xA0	; 160
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	60 91 af 01 	lds	r22, 0x01AF
     714:	70 91 b0 01 	lds	r23, 0x01B0
     718:	80 91 b1 01 	lds	r24, 0x01B1
     71c:	90 91 b2 01 	lds	r25, 0x01B2
     720:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     724:	a3 01       	movw	r20, r6
     726:	92 01       	movw	r18, r4
     728:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     72c:	9b 01       	movw	r18, r22
     72e:	ac 01       	movw	r20, r24
     730:	c5 01       	movw	r24, r10
     732:	b4 01       	movw	r22, r8
     734:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     738:	18 16       	cp	r1, r24
     73a:	64 f4       	brge	.+24     	; 0x754 <pit_hero+0x10e>
		hero->x -=1;
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	c5 01       	movw	r24, r10
     746:	b4 01       	movw	r22, r8
     748:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     74c:	68 83       	st	Y, r22
     74e:	79 83       	std	Y+1, r23	; 0x01
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	9b 83       	std	Y+3, r25	; 0x03
	}

	if (hero->x < pit.x + hero->width - 2) {
     754:	88 80       	ld	r8, Y
     756:	99 80       	ldd	r9, Y+1	; 0x01
     758:	aa 80       	ldd	r10, Y+2	; 0x02
     75a:	bb 80       	ldd	r11, Y+3	; 0x03
     75c:	20 91 af 01 	lds	r18, 0x01AF
     760:	30 91 b0 01 	lds	r19, 0x01B0
     764:	40 91 b1 01 	lds	r20, 0x01B1
     768:	50 91 b2 01 	lds	r21, 0x01B2
     76c:	c3 01       	movw	r24, r6
     76e:	b2 01       	movw	r22, r4
     770:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	50 e4       	ldi	r21, 0x40	; 64
     77c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     78c:	87 ff       	sbrs	r24, 7
     78e:	0c c0       	rjmp	.+24     	; 0x7a8 <pit_hero+0x162>
		hero ->x +=1;
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5f e3       	ldi	r21, 0x3F	; 63
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     7a0:	68 83       	st	Y, r22
     7a2:	79 83       	std	Y+1, r23	; 0x01
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	9b 83       	std	Y+3, r25	; 0x03
	}

	if ( hero->y >= pit.y + 5 - hero->height ) {
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 ea       	ldi	r20, 0xA0	; 160
     7ae:	50 e4       	ldi	r21, 0x40	; 64
     7b0:	60 91 b3 01 	lds	r22, 0x01B3
     7b4:	70 91 b4 01 	lds	r23, 0x01B4
     7b8:	80 91 b5 01 	lds	r24, 0x01B5
     7bc:	90 91 b6 01 	lds	r25, 0x01B6
     7c0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     7c4:	4b 01       	movw	r8, r22
     7c6:	5c 01       	movw	r10, r24
     7c8:	69 85       	ldd	r22, Y+9	; 0x09
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
     7d4:	9b 01       	movw	r18, r22
     7d6:	ac 01       	movw	r20, r24
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	6e 2d       	mov	r22, r14
     7e6:	7f 2d       	mov	r23, r15
     7e8:	80 2f       	mov	r24, r16
     7ea:	91 2f       	mov	r25, r17
     7ec:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     7f0:	87 fd       	sbrc	r24, 7
     7f2:	0e c0       	rjmp	.+28     	; 0x810 <pit_hero+0x1ca>
		hero->y -=1;
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e8       	ldi	r20, 0x80	; 128
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	6e 2d       	mov	r22, r14
     7fe:	7f 2d       	mov	r23, r15
     800:	80 2f       	mov	r24, r16
     802:	91 2f       	mov	r25, r17
     804:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     808:	6c 83       	std	Y+4, r22	; 0x04
     80a:	7d 83       	std	Y+5, r23	; 0x05
     80c:	8e 83       	std	Y+6, r24	; 0x06
     80e:	9f 83       	std	Y+7, r25	; 0x07
	}

	if ( hero->y < pit.y ) {
     810:	8c 80       	ldd	r8, Y+4	; 0x04
     812:	9d 80       	ldd	r9, Y+5	; 0x05
     814:	ae 80       	ldd	r10, Y+6	; 0x06
     816:	bf 80       	ldd	r11, Y+7	; 0x07
     818:	20 91 b3 01 	lds	r18, 0x01B3
     81c:	30 91 b4 01 	lds	r19, 0x01B4
     820:	40 91 b5 01 	lds	r20, 0x01B5
     824:	50 91 b6 01 	lds	r21, 0x01B6
     828:	c5 01       	movw	r24, r10
     82a:	b4 01       	movw	r22, r8
     82c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     830:	87 ff       	sbrs	r24, 7
     832:	0c c0       	rjmp	.+24     	; 0x84c <pit_hero+0x206>
		hero->y +=1;
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	c5 01       	movw	r24, r10
     83e:	b4 01       	movw	r22, r8
     840:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     844:	6c 83       	std	Y+4, r22	; 0x04
     846:	7d 83       	std	Y+5, r23	; 0x05
     848:	8e 83       	std	Y+6, r24	; 0x06
     84a:	9f 83       	std	Y+7, r25	; 0x07
	}
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <move_hero>:

void move_hero( Sprite * hero ) {
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24

	if ( ( hero->dx == 1) && ( pressed ( SW1 ) ) ) { // Right Button, turn right, down
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e8       	ldi	r20, 0x80	; 128
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	6d 85       	ldd	r22, Y+13	; 0x0d
     88e:	7e 85       	ldd	r23, Y+14	; 0x0e
     890:	8f 85       	ldd	r24, Y+15	; 0x0f
     892:	98 89       	ldd	r25, Y+16	; 0x10
     894:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     898:	81 11       	cpse	r24, r1
     89a:	1d c0       	rjmp	.+58     	; 0x8d6 <move_hero+0x6c>
     89c:	19 9b       	sbis	0x03, 1	; 3
     89e:	1b c0       	rjmp	.+54     	; 0x8d6 <move_hero+0x6c>
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	80 e7       	ldi	r24, 0x70	; 112
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <move_hero+0x3c>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <move_hero+0x46>
     8b0:	00 00       	nop
		_delay_ms(100);
		hero->dx = 0;
     8b2:	1d 86       	std	Y+13, r1	; 0x0d
     8b4:	1e 86       	std	Y+14, r1	; 0x0e
     8b6:	1f 86       	std	Y+15, r1	; 0x0f
     8b8:	18 8a       	std	Y+16, r1	; 0x10
		hero->dy = 1;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 e8       	ldi	r26, 0x80	; 128
     8c0:	bf e3       	ldi	r27, 0x3F	; 63
     8c2:	89 8b       	std	Y+17, r24	; 0x11
     8c4:	9a 8b       	std	Y+18, r25	; 0x12
     8c6:	ab 8b       	std	Y+19, r26	; 0x13
     8c8:	bc 8b       	std	Y+20, r27	; 0x14
		hero_d = 3;
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 ca 02 	sts	0x02CA, r25
     8d2:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( (hero->dx == -1) && ( pressed ( SW1 ) )) { // Right Button, turn right, up
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5f eb       	ldi	r21, 0xBF	; 191
     8de:	6d 85       	ldd	r22, Y+13	; 0x0d
     8e0:	7e 85       	ldd	r23, Y+14	; 0x0e
     8e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e4:	98 89       	ldd	r25, Y+16	; 0x10
     8e6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     8ea:	81 11       	cpse	r24, r1
     8ec:	1d c0       	rjmp	.+58     	; 0x928 <move_hero+0xbe>
     8ee:	19 9b       	sbis	0x03, 1	; 3
     8f0:	1b c0       	rjmp	.+54     	; 0x928 <move_hero+0xbe>
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	80 e7       	ldi	r24, 0x70	; 112
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <move_hero+0x8e>
     900:	00 c0       	rjmp	.+0      	; 0x902 <move_hero+0x98>
     902:	00 00       	nop
		_delay_ms(100);
		hero->dx = 0;
     904:	1d 86       	std	Y+13, r1	; 0x0d
     906:	1e 86       	std	Y+14, r1	; 0x0e
     908:	1f 86       	std	Y+15, r1	; 0x0f
     90a:	18 8a       	std	Y+16, r1	; 0x10
		hero->dy = -1;
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a0 e8       	ldi	r26, 0x80	; 128
     912:	bf eb       	ldi	r27, 0xBF	; 191
     914:	89 8b       	std	Y+17, r24	; 0x11
     916:	9a 8b       	std	Y+18, r25	; 0x12
     918:	ab 8b       	std	Y+19, r26	; 0x13
     91a:	bc 8b       	std	Y+20, r27	; 0x14
		hero_d = 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 ca 02 	sts	0x02CA, r25
     924:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dy == 1 ) && ( pressed ( SW1 ) )) { // Right Button, turn right, left
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e8       	ldi	r20, 0x80	; 128
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	69 89       	ldd	r22, Y+17	; 0x11
     932:	7a 89       	ldd	r23, Y+18	; 0x12
     934:	8b 89       	ldd	r24, Y+19	; 0x13
     936:	9c 89       	ldd	r25, Y+20	; 0x14
     938:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     93c:	81 11       	cpse	r24, r1
     93e:	1d c0       	rjmp	.+58     	; 0x97a <move_hero+0x110>
     940:	19 9b       	sbis	0x03, 1	; 3
     942:	1b c0       	rjmp	.+54     	; 0x97a <move_hero+0x110>
     944:	2f ef       	ldi	r18, 0xFF	; 255
     946:	80 e7       	ldi	r24, 0x70	; 112
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	80 40       	sbci	r24, 0x00	; 0
     94e:	90 40       	sbci	r25, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <move_hero+0xe0>
     952:	00 c0       	rjmp	.+0      	; 0x954 <move_hero+0xea>
     954:	00 00       	nop
		_delay_ms(100);
		hero->dx = -1;
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	a0 e8       	ldi	r26, 0x80	; 128
     95c:	bf eb       	ldi	r27, 0xBF	; 191
     95e:	8d 87       	std	Y+13, r24	; 0x0d
     960:	9e 87       	std	Y+14, r25	; 0x0e
     962:	af 87       	std	Y+15, r26	; 0x0f
     964:	b8 8b       	std	Y+16, r27	; 0x10
		hero->dy = 0;
     966:	19 8a       	std	Y+17, r1	; 0x11
     968:	1a 8a       	std	Y+18, r1	; 0x12
     96a:	1b 8a       	std	Y+19, r1	; 0x13
     96c:	1c 8a       	std	Y+20, r1	; 0x14
		hero_d = 4;
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 ca 02 	sts	0x02CA, r25
     976:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dy == -1 ) && ( pressed ( SW1 ) )) { // Right Button, turn right , right
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e8       	ldi	r20, 0x80	; 128
     980:	5f eb       	ldi	r21, 0xBF	; 191
     982:	69 89       	ldd	r22, Y+17	; 0x11
     984:	7a 89       	ldd	r23, Y+18	; 0x12
     986:	8b 89       	ldd	r24, Y+19	; 0x13
     988:	9c 89       	ldd	r25, Y+20	; 0x14
     98a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     98e:	81 11       	cpse	r24, r1
     990:	1d c0       	rjmp	.+58     	; 0x9cc <move_hero+0x162>
     992:	19 9b       	sbis	0x03, 1	; 3
     994:	1b c0       	rjmp	.+54     	; 0x9cc <move_hero+0x162>
     996:	2f ef       	ldi	r18, 0xFF	; 255
     998:	80 e7       	ldi	r24, 0x70	; 112
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	21 50       	subi	r18, 0x01	; 1
     99e:	80 40       	sbci	r24, 0x00	; 0
     9a0:	90 40       	sbci	r25, 0x00	; 0
     9a2:	e1 f7       	brne	.-8      	; 0x99c <move_hero+0x132>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <move_hero+0x13c>
     9a6:	00 00       	nop
		_delay_ms(100);
		hero->dx = 1;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e8       	ldi	r26, 0x80	; 128
     9ae:	bf e3       	ldi	r27, 0x3F	; 63
     9b0:	8d 87       	std	Y+13, r24	; 0x0d
     9b2:	9e 87       	std	Y+14, r25	; 0x0e
     9b4:	af 87       	std	Y+15, r26	; 0x0f
     9b6:	b8 8b       	std	Y+16, r27	; 0x10
		hero->dy = 0;
     9b8:	19 8a       	std	Y+17, r1	; 0x11
     9ba:	1a 8a       	std	Y+18, r1	; 0x12
     9bc:	1b 8a       	std	Y+19, r1	; 0x13
     9be:	1c 8a       	std	Y+20, r1	; 0x14
		hero_d = 2;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	90 93 ca 02 	sts	0x02CA, r25
     9c8:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dx == 1 ) && ( pressed ( SW0 ) )) { // Left Button, turn left, up
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e8       	ldi	r20, 0x80	; 128
     9d2:	5f e3       	ldi	r21, 0x3F	; 63
     9d4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9d6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9d8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9da:	98 89       	ldd	r25, Y+16	; 0x10
     9dc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     9e0:	81 11       	cpse	r24, r1
     9e2:	1d c0       	rjmp	.+58     	; 0xa1e <move_hero+0x1b4>
     9e4:	18 9b       	sbis	0x03, 0	; 3
     9e6:	1b c0       	rjmp	.+54     	; 0xa1e <move_hero+0x1b4>
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	80 e7       	ldi	r24, 0x70	; 112
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <move_hero+0x184>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <move_hero+0x18e>
     9f8:	00 00       	nop
		_delay_ms(100);
		hero->dx = 0;
     9fa:	1d 86       	std	Y+13, r1	; 0x0d
     9fc:	1e 86       	std	Y+14, r1	; 0x0e
     9fe:	1f 86       	std	Y+15, r1	; 0x0f
     a00:	18 8a       	std	Y+16, r1	; 0x10
		hero->dy = -1;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	a0 e8       	ldi	r26, 0x80	; 128
     a08:	bf eb       	ldi	r27, 0xBF	; 191
     a0a:	89 8b       	std	Y+17, r24	; 0x11
     a0c:	9a 8b       	std	Y+18, r25	; 0x12
     a0e:	ab 8b       	std	Y+19, r26	; 0x13
     a10:	bc 8b       	std	Y+20, r27	; 0x14
		hero_d = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 ca 02 	sts	0x02CA, r25
     a1a:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dx == -1 ) && ( pressed ( SW0 ) )) { // Left Button, turn left, down
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	5f eb       	ldi	r21, 0xBF	; 191
     a26:	6d 85       	ldd	r22, Y+13	; 0x0d
     a28:	7e 85       	ldd	r23, Y+14	; 0x0e
     a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a2c:	98 89       	ldd	r25, Y+16	; 0x10
     a2e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     a32:	81 11       	cpse	r24, r1
     a34:	1d c0       	rjmp	.+58     	; 0xa70 <move_hero+0x206>
     a36:	18 9b       	sbis	0x03, 0	; 3
     a38:	1b c0       	rjmp	.+54     	; 0xa70 <move_hero+0x206>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	80 e7       	ldi	r24, 0x70	; 112
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <move_hero+0x1d6>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <move_hero+0x1e0>
     a4a:	00 00       	nop
		_delay_ms(100);
		hero->dx = 0;
     a4c:	1d 86       	std	Y+13, r1	; 0x0d
     a4e:	1e 86       	std	Y+14, r1	; 0x0e
     a50:	1f 86       	std	Y+15, r1	; 0x0f
     a52:	18 8a       	std	Y+16, r1	; 0x10
		hero->dy = 1;
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e8       	ldi	r26, 0x80	; 128
     a5a:	bf e3       	ldi	r27, 0x3F	; 63
     a5c:	89 8b       	std	Y+17, r24	; 0x11
     a5e:	9a 8b       	std	Y+18, r25	; 0x12
     a60:	ab 8b       	std	Y+19, r26	; 0x13
     a62:	bc 8b       	std	Y+20, r27	; 0x14
		hero_d = 3;
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	90 93 ca 02 	sts	0x02CA, r25
     a6c:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dy == 1 ) && ( pressed ( SW0 ) )) { // Left Button, turn left, right
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e8       	ldi	r20, 0x80	; 128
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	69 89       	ldd	r22, Y+17	; 0x11
     a7a:	7a 89       	ldd	r23, Y+18	; 0x12
     a7c:	8b 89       	ldd	r24, Y+19	; 0x13
     a7e:	9c 89       	ldd	r25, Y+20	; 0x14
     a80:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     a84:	81 11       	cpse	r24, r1
     a86:	1d c0       	rjmp	.+58     	; 0xac2 <move_hero+0x258>
     a88:	18 9b       	sbis	0x03, 0	; 3
     a8a:	1b c0       	rjmp	.+54     	; 0xac2 <move_hero+0x258>
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	80 e7       	ldi	r24, 0x70	; 112
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	80 40       	sbci	r24, 0x00	; 0
     a96:	90 40       	sbci	r25, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <move_hero+0x228>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <move_hero+0x232>
     a9c:	00 00       	nop
		_delay_ms(100);
		hero->dx = 1;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e8       	ldi	r26, 0x80	; 128
     aa4:	bf e3       	ldi	r27, 0x3F	; 63
     aa6:	8d 87       	std	Y+13, r24	; 0x0d
     aa8:	9e 87       	std	Y+14, r25	; 0x0e
     aaa:	af 87       	std	Y+15, r26	; 0x0f
     aac:	b8 8b       	std	Y+16, r27	; 0x10
		hero->dy = 0;
     aae:	19 8a       	std	Y+17, r1	; 0x11
     ab0:	1a 8a       	std	Y+18, r1	; 0x12
     ab2:	1b 8a       	std	Y+19, r1	; 0x13
     ab4:	1c 8a       	std	Y+20, r1	; 0x14
		hero_d = 2;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	90 93 ca 02 	sts	0x02CA, r25
     abe:	80 93 c9 02 	sts	0x02C9, r24
	}
	if ( ( hero->dy == -1 ) && ( pressed ( SW0 ) )) { // Left Button, turn left, left
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	5f eb       	ldi	r21, 0xBF	; 191
     aca:	69 89       	ldd	r22, Y+17	; 0x11
     acc:	7a 89       	ldd	r23, Y+18	; 0x12
     ace:	8b 89       	ldd	r24, Y+19	; 0x13
     ad0:	9c 89       	ldd	r25, Y+20	; 0x14
     ad2:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     ad6:	81 11       	cpse	r24, r1
     ad8:	1d c0       	rjmp	.+58     	; 0xb14 <__stack+0x15>
     ada:	18 9b       	sbis	0x03, 0	; 3
     adc:	1b c0       	rjmp	.+54     	; 0xb14 <__stack+0x15>
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	80 e7       	ldi	r24, 0x70	; 112
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	21 50       	subi	r18, 0x01	; 1
     ae6:	80 40       	sbci	r24, 0x00	; 0
     ae8:	90 40       	sbci	r25, 0x00	; 0
     aea:	e1 f7       	brne	.-8      	; 0xae4 <move_hero+0x27a>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <move_hero+0x284>
     aee:	00 00       	nop
		_delay_ms(100);
		hero->dx = -1;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e8       	ldi	r26, 0x80	; 128
     af6:	bf eb       	ldi	r27, 0xBF	; 191
     af8:	8d 87       	std	Y+13, r24	; 0x0d
     afa:	9e 87       	std	Y+14, r25	; 0x0e
     afc:	af 87       	std	Y+15, r26	; 0x0f
     afe:	b8 8b       	std	Y+16, r27	; 0x10
		hero->dy = 0;
     b00:	19 8a       	std	Y+17, r1	; 0x11
     b02:	1a 8a       	std	Y+18, r1	; 0x12
     b04:	1b 8a       	std	Y+19, r1	; 0x13
     b06:	1c 8a       	std	Y+20, r1	; 0x14
		hero_d = 4;
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 ca 02 	sts	0x02CA, r25
     b10:	80 93 c9 02 	sts	0x02C9, r24
	}

	hero->x += hero->dx;
     b14:	2d 85       	ldd	r18, Y+13	; 0x0d
     b16:	3e 85       	ldd	r19, Y+14	; 0x0e
     b18:	4f 85       	ldd	r20, Y+15	; 0x0f
     b1a:	58 89       	ldd	r21, Y+16	; 0x10
     b1c:	68 81       	ld	r22, Y
     b1e:	79 81       	ldd	r23, Y+1	; 0x01
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
     b2c:	86 2f       	mov	r24, r22
     b2e:	99 2d       	mov	r25, r9
     b30:	aa 2d       	mov	r26, r10
     b32:	bb 2d       	mov	r27, r11
     b34:	88 83       	st	Y, r24
     b36:	99 83       	std	Y+1, r25	; 0x01
     b38:	aa 83       	std	Y+2, r26	; 0x02
     b3a:	bb 83       	std	Y+3, r27	; 0x03
	hero->y += hero->dy;
     b3c:	29 89       	ldd	r18, Y+17	; 0x11
     b3e:	3a 89       	ldd	r19, Y+18	; 0x12
     b40:	4b 89       	ldd	r20, Y+19	; 0x13
     b42:	5c 89       	ldd	r21, Y+20	; 0x14
     b44:	6c 81       	ldd	r22, Y+4	; 0x04
     b46:	7d 81       	ldd	r23, Y+5	; 0x05
     b48:	8e 81       	ldd	r24, Y+6	; 0x06
     b4a:	9f 81       	ldd	r25, Y+7	; 0x07
     b4c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
     b54:	86 2f       	mov	r24, r22
     b56:	9d 2d       	mov	r25, r13
     b58:	ae 2d       	mov	r26, r14
     b5a:	bf 2d       	mov	r27, r15
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	9d 83       	std	Y+5, r25	; 0x05
     b60:	ae 83       	std	Y+6, r26	; 0x06
     b62:	bf 83       	std	Y+7, r27	; 0x07

	if ( hero->x >= LCD_X - hero->width) {
     b64:	08 85       	ldd	r16, Y+8	; 0x08
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	64 e5       	ldi	r22, 0x54	; 84
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	60 1b       	sub	r22, r16
     b6e:	71 0b       	sbc	r23, r17
     b70:	88 27       	eor	r24, r24
     b72:	77 fd       	sbrc	r23, 7
     b74:	80 95       	com	r24
     b76:	98 2f       	mov	r25, r24
     b78:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	68 2d       	mov	r22, r8
     b82:	79 2d       	mov	r23, r9
     b84:	8a 2d       	mov	r24, r10
     b86:	9b 2d       	mov	r25, r11
     b88:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     b8c:	87 fd       	sbrc	r24, 7
     b8e:	0e c0       	rjmp	.+28     	; 0xbac <__stack+0xad>
		hero->x -=1;
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e8       	ldi	r20, 0x80	; 128
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	68 2d       	mov	r22, r8
     b9a:	79 2d       	mov	r23, r9
     b9c:	8a 2d       	mov	r24, r10
     b9e:	9b 2d       	mov	r25, r11
     ba0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     ba4:	68 83       	st	Y, r22
     ba6:	79 83       	std	Y+1, r23	; 0x01
     ba8:	8a 83       	std	Y+2, r24	; 0x02
     baa:	9b 83       	std	Y+3, r25	; 0x03
	}

	if (hero->x < 0 + hero->width - 2) {
     bac:	88 80       	ld	r8, Y
     bae:	99 80       	ldd	r9, Y+1	; 0x01
     bb0:	aa 80       	ldd	r10, Y+2	; 0x02
     bb2:	bb 80       	ldd	r11, Y+3	; 0x03
     bb4:	b8 01       	movw	r22, r16
     bb6:	62 50       	subi	r22, 0x02	; 2
     bb8:	71 09       	sbc	r23, r1
     bba:	88 27       	eor	r24, r24
     bbc:	77 fd       	sbrc	r23, 7
     bbe:	80 95       	com	r24
     bc0:	98 2f       	mov	r25, r24
     bc2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     bd2:	87 ff       	sbrs	r24, 7
     bd4:	0c c0       	rjmp	.+24     	; 0xbee <__stack+0xef>
		hero ->x +=1;
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	c5 01       	movw	r24, r10
     be0:	b4 01       	movw	r22, r8
     be2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     be6:	68 83       	st	Y, r22
     be8:	79 83       	std	Y+1, r23	; 0x01
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	9b 83       	std	Y+3, r25	; 0x03
	}

	if ( hero->y >= LCD_Y - hero->height ) {
     bee:	89 85       	ldd	r24, Y+9	; 0x09
     bf0:	60 e3       	ldi	r22, 0x30	; 48
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	68 1b       	sub	r22, r24
     bf6:	71 09       	sbc	r23, r1
     bf8:	88 27       	eor	r24, r24
     bfa:	77 fd       	sbrc	r23, 7
     bfc:	80 95       	com	r24
     bfe:	98 2f       	mov	r25, r24
     c00:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	6c 2d       	mov	r22, r12
     c0a:	7d 2d       	mov	r23, r13
     c0c:	8e 2d       	mov	r24, r14
     c0e:	9f 2d       	mov	r25, r15
     c10:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     c14:	87 fd       	sbrc	r24, 7
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <__stack+0x135>
		hero->y -=1;
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	6c 2d       	mov	r22, r12
     c22:	7d 2d       	mov	r23, r13
     c24:	8e 2d       	mov	r24, r14
     c26:	9f 2d       	mov	r25, r15
     c28:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__subsf3>
     c2c:	6c 83       	std	Y+4, r22	; 0x04
     c2e:	7d 83       	std	Y+5, r23	; 0x05
     c30:	8e 83       	std	Y+6, r24	; 0x06
     c32:	9f 83       	std	Y+7, r25	; 0x07
	}

	if ( hero->y < 0 + 13) {
     c34:	cc 80       	ldd	r12, Y+4	; 0x04
     c36:	dd 80       	ldd	r13, Y+5	; 0x05
     c38:	ee 80       	ldd	r14, Y+6	; 0x06
     c3a:	ff 80       	ldd	r15, Y+7	; 0x07
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e5       	ldi	r20, 0x50	; 80
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	c7 01       	movw	r24, r14
     c46:	b6 01       	movw	r22, r12
     c48:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     c4c:	87 ff       	sbrs	r24, 7
     c4e:	0c c0       	rjmp	.+24     	; 0xc68 <__stack+0x169>
		hero->y +=1;
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e8       	ldi	r20, 0x80	; 128
     c56:	5f e3       	ldi	r21, 0x3F	; 63
     c58:	c7 01       	movw	r24, r14
     c5a:	b6 01       	movw	r22, r12
     c5c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__addsf3>
     c60:	6c 83       	std	Y+4, r22	; 0x04
     c62:	7d 83       	std	Y+5, r23	; 0x05
     c64:	8e 83       	std	Y+6, r24	; 0x06
     c66:	9f 83       	std	Y+7, r25	; 0x07
	}
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	8f 90       	pop	r8
     c80:	08 95       	ret

00000c82 <update_checker>:
	draw_sprite( &hero );


}
void update_checker() {
	if ( in_pit == 1 ) {
     c82:	20 91 92 01 	lds	r18, 0x0192
     c86:	30 91 93 01 	lds	r19, 0x0193
     c8a:	80 91 05 01 	lds	r24, 0x0105
     c8e:	90 91 06 01 	lds	r25, 0x0106
     c92:	21 30       	cpi	r18, 0x01	; 1
     c94:	31 05       	cpc	r19, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <update_checker+0x18>
		pit_hero( hero_prt );
     c98:	d6 cc       	rjmp	.-1620   	; 0x646 <pit_hero>
     c9a:	e7 cd       	rjmp	.-1074   	; 0x86a <move_hero>

00000c9c <update_hero>:
	}
	else {
		move_hero( hero_prt );
     c9c:	f2 df       	rcall	.-28     	; 0xc82 <update_checker>
     c9e:	80 91 05 01 	lds	r24, 0x0105


void update_hero() {
//	move_hero ( hero_prt );
	update_checker();
	draw_sprite ( hero_prt );
     ca2:	90 91 06 01 	lds	r25, 0x0106
     ca6:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <draw_sprite>

00000caa <section_selector>:


	}
}

void section_selector( int picker ) {
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
	if ( picker == 1 ) { // Left Section
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	81 f4       	brne	.+32     	; 0xcd4 <section_selector+0x2a>
		randx = (rand()%25)+1; // 1 - 28
     cb4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     cb8:	69 e1       	ldi	r22, 0x19	; 25
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	90 93 ce 02 	sts	0x02CE, r25
     cc6:	80 93 cd 02 	sts	0x02CD, r24
		randy = (rand()%30)+14; // 14 - 47
     cca:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     cce:	6e e1       	ldi	r22, 0x1E	; 30
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <section_selector+0x4c>
	}
	else if ( picker == 2 ) { // Right Section
     cd4:	02 97       	sbiw	r24, 0x02	; 2
     cd6:	b1 f4       	brne	.+44     	; 0xd04 <section_selector+0x5a>
		randx = (rand()%30)+51; // 50 - 81
     cd8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     cdc:	ce e1       	ldi	r28, 0x1E	; 30
     cde:	d0 e0       	ldi	r29, 0x00	; 0
     ce0:	be 01       	movw	r22, r28
     ce2:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
     ce6:	c3 96       	adiw	r24, 0x33	; 51
     ce8:	90 93 ce 02 	sts	0x02CE, r25
     cec:	80 93 cd 02 	sts	0x02CD, r24
		randy = (rand()%30)+14; // 14 - 47
     cf0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     cf4:	be 01       	movw	r22, r28
     cf6:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
     cfa:	0e 96       	adiw	r24, 0x0e	; 14
     cfc:	90 93 cc 02 	sts	0x02CC, r25
     d00:	80 93 cb 02 	sts	0x02CB, r24
	}
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <setup_zombies>:
void setup_zombies(
	Sprite zombies[],
	byte *zbitmaps[],
	byte width[],
	byte height[]
	) {
     d0a:	4f 92       	push	r4
     d0c:	5f 92       	push	r5
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	4b 01       	movw	r8, r22
     d2c:	ec 01       	movw	r28, r24
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	c8 2e       	mov	r12, r24
     d32:	d1 2c       	mov	r13, r1
	for ( int i = 0; i < 8; i++ ) {
		Sprite * sprite = &zombies[i];

		byte * bitmap = zbitmaps[ i % 1];

		int picker = 1 + rand() % 2;
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	a9 2e       	mov	r10, r25
     d38:	b1 2c       	mov	r11, r1
		section_selector ( picker );

		init_sprite ( sprite, randx, randy, 4, 3, bitmap );
		sprite->is_visible = 1;
     d3a:	11 e0       	ldi	r17, 0x01	; 1
		sprite->dx = 1;
     d3c:	41 2c       	mov	r4, r1
     d3e:	51 2c       	mov	r5, r1
     d40:	20 e8       	ldi	r18, 0x80	; 128
     d42:	62 2e       	mov	r6, r18
     d44:	2f e3       	ldi	r18, 0x3F	; 63
     d46:	72 2e       	mov	r7, r18
	) {

	for ( int i = 0; i < 8; i++ ) {
		Sprite * sprite = &zombies[i];

		byte * bitmap = zbitmaps[ i % 1];
     d48:	f4 01       	movw	r30, r8
     d4a:	e0 80       	ld	r14, Z
     d4c:	f1 80       	ldd	r15, Z+1	; 0x01

		int picker = 1 + rand() % 2;
     d4e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     d52:	b5 01       	movw	r22, r10
     d54:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
		section_selector ( picker );
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	a7 df       	rcall	.-178    	; 0xcaa <section_selector>
     d5c:	03 e0       	ldi	r16, 0x03	; 3

		init_sprite ( sprite, randx, randy, 4, 3, bitmap );
     d5e:	24 e0       	ldi	r18, 0x04	; 4
     d60:	40 91 cb 02 	lds	r20, 0x02CB
     d64:	60 91 cd 02 	lds	r22, 0x02CD
     d68:	ce 01       	movw	r24, r28
     d6a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <init_sprite>
     d6e:	1a 87       	std	Y+10, r17	; 0x0a
		sprite->is_visible = 1;
     d70:	4d 86       	std	Y+13, r4	; 0x0d
		sprite->dx = 1;
     d72:	5e 86       	std	Y+14, r5	; 0x0e
     d74:	6f 86       	std	Y+15, r6	; 0x0f
     d76:	78 8a       	std	Y+16, r7	; 0x10
     d78:	19 8a       	std	Y+17, r1	; 0x11
		sprite->dy = 0;
     d7a:	1a 8a       	std	Y+18, r1	; 0x12
     d7c:	1b 8a       	std	Y+19, r1	; 0x13
     d7e:	1c 8a       	std	Y+20, r1	; 0x14
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	cf 1a       	sub	r12, r31
     d84:	d1 08       	sbc	r13, r1
     d86:	65 96       	adiw	r28, 0x15	; 21
     d88:	c1 14       	cp	r12, r1
	byte *zbitmaps[],
	byte width[],
	byte height[]
	) {

	for ( int i = 0; i < 8; i++ ) {
     d8a:	d1 04       	cpc	r13, r1
     d8c:	e9 f6       	brne	.-70     	; 0xd48 <setup_zombies+0x3e>
     d8e:	df 91       	pop	r29
		sprite->dx = 1;
		sprite->dy = 0;


	}
}
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	7f 90       	pop	r7
     da8:	6f 90       	pop	r6
     daa:	5f 90       	pop	r5
     dac:	4f 90       	pop	r4
     dae:	08 95       	ret

00000db0 <draw_zombies>:
     db0:	0f 93       	push	r16
		randx = (rand()%30)+51; // 50 - 81
		randy = (rand()%30)+14; // 14 - 47
	}
}

void draw_zombies ( Sprite * sprites ) {
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
	for ( int i = 0; i < zombie_count; i++ ) {
		draw_sprite ( sprites + i );
     dbe:	c8 01       	movw	r24, r16
     dc0:	8c 0f       	add	r24, r28
     dc2:	9d 1f       	adc	r25, r29
     dc4:	0e 94 9b 13 	call	0x2736	; 0x2736 <draw_sprite>
     dc8:	65 96       	adiw	r28, 0x15	; 21
		randy = (rand()%30)+14; // 14 - 47
	}
}

void draw_zombies ( Sprite * sprites ) {
	for ( int i = 0; i < zombie_count; i++ ) {
     dca:	c8 3a       	cpi	r28, 0xA8	; 168
     dcc:	d1 05       	cpc	r29, r1
     dce:	b9 f7       	brne	.-18     	; 0xdbe <draw_zombies+0xe>
		draw_sprite ( sprites + i );
	}
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <start_zombies>:
		BYTE( 11100000 ),
		BYTE( 01000000 ),
		BYTE( 10100000 )
	};

void start_zombies() {
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <start_zombies+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <start_zombies+0x8>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62


	byte *zbitmaps[1] = { bitmap1 };
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
	byte width[] = {4};
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	8c 83       	std	Y+4, r24	; 0x04
	byte height[] = {3};
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	8b 83       	std	Y+3, r24	; 0x03

//	Sprite zombies[zombie_count];


	setup_zombies ( zombies, zbitmaps, width, height );
     df6:	9e 01       	movw	r18, r28
     df8:	2d 5f       	subi	r18, 0xFD	; 253
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	ae 01       	movw	r20, r28
     dfe:	4c 5f       	subi	r20, 0xFC	; 252
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	be 01       	movw	r22, r28
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	89 ed       	ldi	r24, 0xD9	; 217
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	7e df       	rcall	.-260    	; 0xd0a <setup_zombies>
     e0e:	89 ed       	ldi	r24, 0xD9	; 217

	draw_zombies ( zombies );
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	ce df       	rcall	.-100    	; 0xdb0 <draw_zombies>
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0

}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <zombie_drawer>:
     e22:	80 91 0a 01 	lds	r24, 0x010A
	update_zombies( z );
	draw_zombies( z );
}

void zombie_drawer() {
	draw_zombies( z );
     e26:	90 91 0b 01 	lds	r25, 0x010B
     e2a:	c2 cf       	rjmp	.-124    	; 0xdb0 <draw_zombies>

00000e2c <update_zombies>:
     e2c:	2f 92       	push	r2
}

void update_zombies ( Sprite * sprites ) {
     e2e:	3f 92       	push	r3
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	1c 01       	movw	r2, r24
     e52:	ec 01       	movw	r28, r24
     e54:	00 e0       	ldi	r16, 0x00	; 0
     e56:	10 e0       	ldi	r17, 0x00	; 0
	// pick a direction to move in
	for ( int i = 0; i < zombie_count; i++ ) {
		int change = rand()%100;
     e58:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
     e5c:	64 e6       	ldi	r22, 0x64	; 100
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
		if ( change > 95 ) {
     e64:	80 36       	cpi	r24, 0x60	; 96
     e66:	91 05       	cpc	r25, r1
     e68:	7c f1       	brlt	.+94     	; 0xec8 <update_zombies+0x9c>
			if ( sprites[i].dy > 0 ) {
     e6a:	c9 88       	ldd	r12, Y+17	; 0x11
     e6c:	da 88       	ldd	r13, Y+18	; 0x12
     e6e:	eb 88       	ldd	r14, Y+19	; 0x13
     e70:	fc 88       	ldd	r15, Y+20	; 0x14
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	a9 01       	movw	r20, r18
     e78:	c7 01       	movw	r24, r14
     e7a:	b6 01       	movw	r22, r12
     e7c:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     e80:	18 16       	cp	r1, r24
     e82:	0c f4       	brge	.+2      	; 0xe86 <update_zombies+0x5a>
     e84:	47 c0       	rjmp	.+142    	; 0xf14 <update_zombies+0xe8>
				sprites[i].dx = -1;
				sprites[i].dy = 0;
			}
			else if( sprites[i].dy < 0 ) {
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	a9 01       	movw	r20, r18
     e8c:	c7 01       	movw	r24, r14
     e8e:	b6 01       	movw	r22, r12
     e90:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     e94:	87 fd       	sbrc	r24, 7
     e96:	28 c0       	rjmp	.+80     	; 0xee8 <update_zombies+0xbc>
				sprites[i].dx = 1;
				sprites[i].dy = 0;
			}
			else if ( sprites[i].dx > 0 ) {
     e98:	cd 84       	ldd	r12, Y+13	; 0x0d
     e9a:	de 84       	ldd	r13, Y+14	; 0x0e
     e9c:	ef 84       	ldd	r14, Y+15	; 0x0f
     e9e:	f8 88       	ldd	r15, Y+16	; 0x10
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	c7 01       	movw	r24, r14
     ea8:	b6 01       	movw	r22, r12
     eaa:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     eae:	18 16       	cp	r1, r24
     eb0:	0c f4       	brge	.+2      	; 0xeb4 <update_zombies+0x88>
     eb2:	54 c0       	rjmp	.+168    	; 0xf5c <update_zombies+0x130>
				sprites[i].dx = 0;
				sprites[i].dy = 1;
			}
			else if( sprites[i].dx < 0) {
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     ec2:	87 ff       	sbrs	r24, 7
     ec4:	57 c0       	rjmp	.+174    	; 0xf74 <update_zombies+0x148>
     ec6:	38 c0       	rjmp	.+112    	; 0xf38 <update_zombies+0x10c>
				sprites[i].dx = 0;
				sprites[i].dy = -1;
			}
		}
		if( change < 5 ) {
     ec8:	05 97       	sbiw	r24, 0x05	; 5
     eca:	0c f0       	brlt	.+2      	; 0xece <update_zombies+0xa2>
     ecc:	53 c0       	rjmp	.+166    	; 0xf74 <update_zombies+0x148>
			if( sprites[i].dy > 0) {
     ece:	c9 88       	ldd	r12, Y+17	; 0x11
     ed0:	da 88       	ldd	r13, Y+18	; 0x12
     ed2:	eb 88       	ldd	r14, Y+19	; 0x13
     ed4:	fc 88       	ldd	r15, Y+20	; 0x14
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	a9 01       	movw	r20, r18
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	6c f4       	brge	.+26     	; 0xf02 <update_zombies+0xd6>
					sprites[i].dx = 1;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e8       	ldi	r26, 0x80	; 128
     eee:	bf e3       	ldi	r27, 0x3F	; 63
     ef0:	8d 87       	std	Y+13, r24	; 0x0d
     ef2:	9e 87       	std	Y+14, r25	; 0x0e
     ef4:	af 87       	std	Y+15, r26	; 0x0f
     ef6:	b8 8b       	std	Y+16, r27	; 0x10
					sprites[i].dy = 0;
     ef8:	19 8a       	std	Y+17, r1	; 0x11
     efa:	1a 8a       	std	Y+18, r1	; 0x12
     efc:	1b 8a       	std	Y+19, r1	; 0x13
     efe:	1c 8a       	std	Y+20, r1	; 0x14
     f00:	39 c0       	rjmp	.+114    	; 0xf74 <update_zombies+0x148>
			}
			else if( sprites[i].dy < 0 ) {
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a9 01       	movw	r20, r18
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     f10:	87 ff       	sbrs	r24, 7
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <update_zombies+0xf2>
					sprites[i].dx = -1;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 e8       	ldi	r26, 0x80	; 128
     f1a:	bf eb       	ldi	r27, 0xBF	; 191
     f1c:	e9 cf       	rjmp	.-46     	; 0xef0 <update_zombies+0xc4>
					sprites[i].dy = 0;
			}
			else if( sprites[i].dx > 0){
     f1e:	cd 84       	ldd	r12, Y+13	; 0x0d
     f20:	de 84       	ldd	r13, Y+14	; 0x0e
     f22:	ef 84       	ldd	r14, Y+15	; 0x0f
     f24:	f8 88       	ldd	r15, Y+16	; 0x10
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	c7 01       	movw	r24, r14
     f2e:	b6 01       	movw	r22, r12
     f30:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f4       	brge	.+18     	; 0xf4a <update_zombies+0x11e>
					sprites[i].dx = 0;
     f38:	1d 86       	std	Y+13, r1	; 0x0d
     f3a:	1e 86       	std	Y+14, r1	; 0x0e
     f3c:	1f 86       	std	Y+15, r1	; 0x0f
     f3e:	18 8a       	std	Y+16, r1	; 0x10
					sprites[i].dy = -1;
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e8       	ldi	r26, 0x80	; 128
     f46:	bf eb       	ldi	r27, 0xBF	; 191
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <update_zombies+0x140>
			}
			else if ( sprites[i].dx < 0){
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	c7 01       	movw	r24, r14
     f52:	b6 01       	movw	r22, r12
     f54:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__cmpsf2>
     f58:	87 ff       	sbrs	r24, 7
     f5a:	0c c0       	rjmp	.+24     	; 0xf74 <update_zombies+0x148>
				sprites[i].dx = 0;
     f5c:	1d 86       	std	Y+13, r1	; 0x0d
     f5e:	1e 86       	std	Y+14, r1	; 0x0e
     f60:	1f 86       	std	Y+15, r1	; 0x0f
     f62:	18 8a       	std	Y+16, r1	; 0x10
				sprites[i].dy = 1;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e8       	ldi	r26, 0x80	; 128
     f6a:	bf e3       	ldi	r27, 0x3F	; 63
     f6c:	89 8b       	std	Y+17, r24	; 0x11
     f6e:	9a 8b       	std	Y+18, r25	; 0x12
     f70:	ab 8b       	std	Y+19, r26	; 0x13
     f72:	bc 8b       	std	Y+20, r27	; 0x14
			}
		}
		if ( (sprites[i].x >= pit_prt->x) && (sprites[i].x <= pit_prt->x + 5 ) && (sprites[i].y >= pit_prt->y) && (sprites[i].y <= pit_prt->y +5)) {
     f74:	48 80       	ld	r4, Y
     f76:	59 80       	ldd	r5, Y+1	; 0x01
     f78:	6a 80       	ldd	r6, Y+2	; 0x02
     f7a:	7b 80       	ldd	r7, Y+3	; 0x03
     f7c:	e0 90 12 01 	lds	r14, 0x0112
     f80:	f0 90 13 01 	lds	r15, 0x0113
     f84:	d7 01       	movw	r26, r14
     f86:	8d 90       	ld	r8, X+
     f88:	9d 90       	ld	r9, X+
     f8a:	ad 90       	ld	r10, X+
     f8c:	bc 90       	ld	r11, X
     f8e:	a5 01       	movw	r20, r10
     f90:	94 01       	movw	r18, r8
     f92:	c3 01       	movw	r24, r6
     f94:	b2 01       	movw	r22, r4
     f96:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     f9a:	87 fd       	sbrc	r24, 7
     f9c:	4c c0       	rjmp	.+152    	; 0x1036 <update_zombies+0x20a>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 ea       	ldi	r20, 0xA0	; 160
     fa4:	50 e4       	ldi	r21, 0x40	; 64
     fa6:	c5 01       	movw	r24, r10
     fa8:	b4 01       	movw	r22, r8
     faa:	86 d7       	rcall	.+3852   	; 0x1eb8 <__addsf3>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c3 01       	movw	r24, r6
     fb2:	b2 01       	movw	r22, r4
     fb4:	e5 d7       	rcall	.+4042   	; 0x1f80 <__cmpsf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	0c f4       	brge	.+2      	; 0xfbc <update_zombies+0x190>
     fba:	3d c0       	rjmp	.+122    	; 0x1036 <update_zombies+0x20a>
     fbc:	4c 80       	ldd	r4, Y+4	; 0x04
     fbe:	5d 80       	ldd	r5, Y+5	; 0x05
     fc0:	6e 80       	ldd	r6, Y+6	; 0x06
     fc2:	7f 80       	ldd	r7, Y+7	; 0x07
     fc4:	f7 01       	movw	r30, r14
     fc6:	c4 80       	ldd	r12, Z+4	; 0x04
     fc8:	d5 80       	ldd	r13, Z+5	; 0x05
     fca:	e6 80       	ldd	r14, Z+6	; 0x06
     fcc:	f7 80       	ldd	r15, Z+7	; 0x07
     fce:	a7 01       	movw	r20, r14
     fd0:	96 01       	movw	r18, r12
     fd2:	c3 01       	movw	r24, r6
     fd4:	b2 01       	movw	r22, r4
     fd6:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     fda:	87 fd       	sbrc	r24, 7
     fdc:	2c c0       	rjmp	.+88     	; 0x1036 <update_zombies+0x20a>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 ea       	ldi	r20, 0xA0	; 160
     fe4:	50 e4       	ldi	r21, 0x40	; 64
     fe6:	c7 01       	movw	r24, r14
     fe8:	b6 01       	movw	r22, r12
     fea:	66 d7       	rcall	.+3788   	; 0x1eb8 <__addsf3>
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	c3 01       	movw	r24, r6
     ff2:	b2 01       	movw	r22, r4
     ff4:	c5 d7       	rcall	.+3978   	; 0x1f80 <__cmpsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	f4 f0       	brlt	.+60     	; 0x1036 <update_zombies+0x20a>
     ffa:	1d 86       	std	Y+13, r1	; 0x0d
     ffc:	1e 86       	std	Y+14, r1	; 0x0e
     ffe:	1f 86       	std	Y+15, r1	; 0x0f
    1000:	18 8a       	std	Y+16, r1	; 0x10
			sprites[i].dx = 0;
    1002:	19 8a       	std	Y+17, r1	; 0x11
    1004:	1a 8a       	std	Y+18, r1	; 0x12
    1006:	1b 8a       	std	Y+19, r1	; 0x13
    1008:	1c 8a       	std	Y+20, r1	; 0x14
			sprites[i].dy = 0;
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
			sprites[i].x = pit_prt->x + 1;
    1012:	c5 01       	movw	r24, r10
    1014:	b4 01       	movw	r22, r8
    1016:	50 d7       	rcall	.+3744   	; 0x1eb8 <__addsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	c7 01       	movw	r24, r14
			sprites[i].y = pit_prt->y + 1;
    102a:	b6 01       	movw	r22, r12
    102c:	45 d7       	rcall	.+3722   	; 0x1eb8 <__addsf3>
    102e:	6c 83       	std	Y+4, r22	; 0x04
    1030:	7d 83       	std	Y+5, r23	; 0x05
    1032:	8e 83       	std	Y+6, r24	; 0x06
    1034:	9f 83       	std	Y+7, r25	; 0x07
    1036:	88 80       	ld	r8, Y
    1038:	99 80       	ldd	r9, Y+1	; 0x01
    103a:	aa 80       	ldd	r10, Y+2	; 0x02
    103c:	bb 80       	ldd	r11, Y+3	; 0x03
    103e:	e0 90 32 01 	lds	r14, 0x0132
		}
		if ( (sprites[i].x >= sword_prt->x) && (sprites[i].x <= sword_prt->x + 4 ) && (sprites[i].y >= sword_prt->y) && (sprites[i].y <= sword_prt->y +4)) {
    1042:	f0 90 33 01 	lds	r15, 0x0133
    1046:	d7 01       	movw	r26, r14
    1048:	4d 90       	ld	r4, X+
    104a:	5d 90       	ld	r5, X+
    104c:	6d 90       	ld	r6, X+
    104e:	7c 90       	ld	r7, X
    1050:	a3 01       	movw	r20, r6
    1052:	92 01       	movw	r18, r4
    1054:	c5 01       	movw	r24, r10
    1056:	b4 01       	movw	r22, r8
    1058:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
    105c:	87 fd       	sbrc	r24, 7
    105e:	58 c0       	rjmp	.+176    	; 0x1110 <update_zombies+0x2e4>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	50 e4       	ldi	r21, 0x40	; 64
    1068:	c3 01       	movw	r24, r6
    106a:	b2 01       	movw	r22, r4
    106c:	25 d7       	rcall	.+3658   	; 0x1eb8 <__addsf3>
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	c5 01       	movw	r24, r10
    1074:	b4 01       	movw	r22, r8
    1076:	84 d7       	rcall	.+3848   	; 0x1f80 <__cmpsf2>
    1078:	18 16       	cp	r1, r24
    107a:	0c f4       	brge	.+2      	; 0x107e <update_zombies+0x252>
    107c:	49 c0       	rjmp	.+146    	; 0x1110 <update_zombies+0x2e4>
    107e:	8c 80       	ldd	r8, Y+4	; 0x04
    1080:	9d 80       	ldd	r9, Y+5	; 0x05
    1082:	ae 80       	ldd	r10, Y+6	; 0x06
    1084:	bf 80       	ldd	r11, Y+7	; 0x07
    1086:	f7 01       	movw	r30, r14
    1088:	c4 80       	ldd	r12, Z+4	; 0x04
    108a:	d5 80       	ldd	r13, Z+5	; 0x05
    108c:	e6 80       	ldd	r14, Z+6	; 0x06
    108e:	f7 80       	ldd	r15, Z+7	; 0x07
    1090:	a7 01       	movw	r20, r14
    1092:	96 01       	movw	r18, r12
    1094:	c5 01       	movw	r24, r10
    1096:	b4 01       	movw	r22, r8
    1098:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
    109c:	87 fd       	sbrc	r24, 7
    109e:	38 c0       	rjmp	.+112    	; 0x1110 <update_zombies+0x2e4>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	50 e4       	ldi	r21, 0x40	; 64
    10a8:	c7 01       	movw	r24, r14
    10aa:	b6 01       	movw	r22, r12
    10ac:	05 d7       	rcall	.+3594   	; 0x1eb8 <__addsf3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	c5 01       	movw	r24, r10
    10b4:	b4 01       	movw	r22, r8
    10b6:	64 d7       	rcall	.+3784   	; 0x1f80 <__cmpsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	54 f1       	brlt	.+84     	; 0x1110 <update_zombies+0x2e4>
    10bc:	1d 86       	std	Y+13, r1	; 0x0d
    10be:	1e 86       	std	Y+14, r1	; 0x0e
    10c0:	1f 86       	std	Y+15, r1	; 0x0f
    10c2:	18 8a       	std	Y+16, r1	; 0x10
    10c4:	19 8a       	std	Y+17, r1	; 0x11
    10c6:	1a 8a       	std	Y+18, r1	; 0x12
    10c8:	1b 8a       	std	Y+19, r1	; 0x13
    10ca:	1c 8a       	std	Y+20, r1	; 0x14
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
			sprites[i].dx = 0;
    10d0:	a0 ea       	ldi	r26, 0xA0	; 160
    10d2:	b0 ec       	ldi	r27, 0xC0	; 192
    10d4:	88 83       	st	Y, r24
    10d6:	99 83       	std	Y+1, r25	; 0x01
			sprites[i].dy = 0;
    10d8:	aa 83       	std	Y+2, r26	; 0x02
    10da:	bb 83       	std	Y+3, r27	; 0x03
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	9d 83       	std	Y+5, r25	; 0x05
			sprites[i].x = -5;
    10e0:	ae 83       	std	Y+6, r26	; 0x06
    10e2:	bf 83       	std	Y+7, r27	; 0x07
    10e4:	f1 01       	movw	r30, r2
    10e6:	e0 0f       	add	r30, r16
    10e8:	f1 1f       	adc	r31, r17
    10ea:	12 86       	std	Z+10, r1	; 0x0a
    10ec:	80 91 8e 01 	lds	r24, 0x018E
			sprites[i].y = -5;
    10f0:	90 91 8f 01 	lds	r25, 0x018F
    10f4:	02 96       	adiw	r24, 0x02	; 2
    10f6:	90 93 8f 01 	sts	0x018F, r25

void zombie_drawer() {
	draw_zombies( z );
}

void update_zombies ( Sprite * sprites ) {
    10fa:	80 93 8e 01 	sts	0x018E, r24
		if ( (sprites[i].x >= sword_prt->x) && (sprites[i].x <= sword_prt->x + 4 ) && (sprites[i].y >= sword_prt->y) && (sprites[i].y <= sword_prt->y +4)) {
			sprites[i].dx = 0;
			sprites[i].dy = 0;
			sprites[i].x = -5;
			sprites[i].y = -5;
			sprites[i].is_visible = 0;
    10fe:	80 91 90 01 	lds	r24, 0x0190
			score = score + 2;
    1102:	90 91 91 01 	lds	r25, 0x0191
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	90 93 91 01 	sts	0x0191, r25
    110c:	80 93 90 01 	sts	0x0190, r24
    1110:	71 01       	movw	r14, r2
			dead_zombies = dead_zombies + 1;
    1112:	e0 0e       	add	r14, r16
    1114:	f1 1e       	adc	r15, r17
    1116:	d7 01       	movw	r26, r14
    1118:	1a 96       	adiw	r26, 0x0a	; 10
    111a:	8c 91       	ld	r24, X
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	d1 f4       	brne	.+52     	; 0x1154 <update_zombies+0x328>
    1120:	2d 85       	ldd	r18, Y+13	; 0x0d
    1122:	3e 85       	ldd	r19, Y+14	; 0x0e

void zombie_drawer() {
	draw_zombies( z );
}

void update_zombies ( Sprite * sprites ) {
    1124:	4f 85       	ldd	r20, Y+15	; 0x0f
    1126:	58 89       	ldd	r21, Y+16	; 0x10
    1128:	68 81       	ld	r22, Y
			score = score + 2;
			dead_zombies = dead_zombies + 1;


				}
		if ( sprites[i].is_visible == 1) {
    112a:	79 81       	ldd	r23, Y+1	; 0x01
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	9b 81       	ldd	r25, Y+3	; 0x03
    1130:	c3 d6       	rcall	.+3462   	; 0x1eb8 <__addsf3>
    1132:	68 83       	st	Y, r22
			sprites[i].x += sprites[i].dx;
    1134:	79 83       	std	Y+1, r23	; 0x01
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	9b 83       	std	Y+3, r25	; 0x03
    113a:	29 89       	ldd	r18, Y+17	; 0x11
    113c:	3a 89       	ldd	r19, Y+18	; 0x12
    113e:	4b 89       	ldd	r20, Y+19	; 0x13
    1140:	5c 89       	ldd	r21, Y+20	; 0x14
    1142:	6c 81       	ldd	r22, Y+4	; 0x04
    1144:	7d 81       	ldd	r23, Y+5	; 0x05
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	b6 d6       	rcall	.+3436   	; 0x1eb8 <__addsf3>
    114c:	6c 83       	std	Y+4, r22	; 0x04
    114e:	7d 83       	std	Y+5, r23	; 0x05
			sprites[i].y += sprites[i].dy;
    1150:	8e 83       	std	Y+6, r24	; 0x06
    1152:	9f 83       	std	Y+7, r25	; 0x07
    1154:	88 80       	ld	r8, Y
    1156:	99 80       	ldd	r9, Y+1	; 0x01
    1158:	aa 80       	ldd	r10, Y+2	; 0x02
    115a:	bb 80       	ldd	r11, Y+3	; 0x03
    115c:	f7 01       	movw	r30, r14
    115e:	c0 84       	ldd	r12, Z+8	; 0x08
    1160:	d1 2c       	mov	r13, r1
    1162:	84 e5       	ldi	r24, 0x54	; 84
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	8c 19       	sub	r24, r12
    1168:	9d 09       	sbc	r25, r13
    116a:	bc 01       	movw	r22, r24
		}


		if ( sprites[i].x >= LCD_X - sprites[i].width) {
    116c:	88 27       	eor	r24, r24
    116e:	77 fd       	sbrc	r23, 7
    1170:	80 95       	com	r24
    1172:	98 2f       	mov	r25, r24
    1174:	0b d7       	rcall	.+3606   	; 0x1f8c <__floatsisf>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c5 01       	movw	r24, r10
    117c:	b4 01       	movw	r22, r8
    117e:	b6 d7       	rcall	.+3948   	; 0x20ec <__gesf2>
    1180:	87 fd       	sbrc	r24, 7
    1182:	0b c0       	rjmp	.+22     	; 0x119a <update_zombies+0x36e>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	92 d6       	rcall	.+3364   	; 0x1eb6 <__subsf3>
    1192:	68 83       	st	Y, r22
    1194:	79 83       	std	Y+1, r23	; 0x01
    1196:	8a 83       	std	Y+2, r24	; 0x02
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	88 80       	ld	r8, Y
    119c:	99 80       	ldd	r9, Y+1	; 0x01
    119e:	aa 80       	ldd	r10, Y+2	; 0x02
			sprites[i].x -=1;
    11a0:	bb 80       	ldd	r11, Y+3	; 0x03
    11a2:	f2 e0       	ldi	r31, 0x02	; 2
    11a4:	cf 1a       	sub	r12, r31
    11a6:	d1 08       	sbc	r13, r1
    11a8:	b6 01       	movw	r22, r12
    11aa:	88 27       	eor	r24, r24
    11ac:	77 fd       	sbrc	r23, 7
    11ae:	80 95       	com	r24
    11b0:	98 2f       	mov	r25, r24
    11b2:	ec d6       	rcall	.+3544   	; 0x1f8c <__floatsisf>
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
		}

		if (sprites[i].x < 0 + sprites[i].width - 2) {
    11b8:	c5 01       	movw	r24, r10
    11ba:	b4 01       	movw	r22, r8
    11bc:	e1 d6       	rcall	.+3522   	; 0x1f80 <__cmpsf2>
    11be:	87 ff       	sbrs	r24, 7
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <update_zombies+0x3ac>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	c5 01       	movw	r24, r10
    11cc:	b4 01       	movw	r22, r8
    11ce:	74 d6       	rcall	.+3304   	; 0x1eb8 <__addsf3>
    11d0:	68 83       	st	Y, r22
    11d2:	79 83       	std	Y+1, r23	; 0x01
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	9b 83       	std	Y+3, r25	; 0x03
    11d8:	8c 80       	ldd	r8, Y+4	; 0x04
    11da:	9d 80       	ldd	r9, Y+5	; 0x05
    11dc:	ae 80       	ldd	r10, Y+6	; 0x06
    11de:	bf 80       	ldd	r11, Y+7	; 0x07
    11e0:	d7 01       	movw	r26, r14
    11e2:	19 96       	adiw	r26, 0x09	; 9
			sprites[i].x +=1;
    11e4:	8c 91       	ld	r24, X
    11e6:	e0 e3       	ldi	r30, 0x30	; 48
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	e8 1b       	sub	r30, r24
    11ec:	f1 09       	sbc	r31, r1
    11ee:	bf 01       	movw	r22, r30
    11f0:	88 27       	eor	r24, r24
    11f2:	77 fd       	sbrc	r23, 7
    11f4:	80 95       	com	r24
    11f6:	98 2f       	mov	r25, r24
    11f8:	c9 d6       	rcall	.+3474   	; 0x1f8c <__floatsisf>
    11fa:	9b 01       	movw	r18, r22
		}

		if ( sprites[i].y >= LCD_Y - sprites[i].height ) {
    11fc:	ac 01       	movw	r20, r24
    11fe:	c5 01       	movw	r24, r10
    1200:	b4 01       	movw	r22, r8
    1202:	74 d7       	rcall	.+3816   	; 0x20ec <__gesf2>
    1204:	87 fd       	sbrc	r24, 7
    1206:	0b c0       	rjmp	.+22     	; 0x121e <update_zombies+0x3f2>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	c5 01       	movw	r24, r10
    1212:	b4 01       	movw	r22, r8
    1214:	50 d6       	rcall	.+3232   	; 0x1eb6 <__subsf3>
    1216:	6c 83       	std	Y+4, r22	; 0x04
    1218:	7d 83       	std	Y+5, r23	; 0x05
    121a:	8e 83       	std	Y+6, r24	; 0x06
    121c:	9f 83       	std	Y+7, r25	; 0x07
    121e:	cc 80       	ldd	r12, Y+4	; 0x04
    1220:	dd 80       	ldd	r13, Y+5	; 0x05
    1222:	ee 80       	ldd	r14, Y+6	; 0x06
    1224:	ff 80       	ldd	r15, Y+7	; 0x07
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e5       	ldi	r20, 0x50	; 80
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	c7 01       	movw	r24, r14
			sprites[i].y -=1;
    1230:	b6 01       	movw	r22, r12
    1232:	a6 d6       	rcall	.+3404   	; 0x1f80 <__cmpsf2>
    1234:	87 ff       	sbrs	r24, 7
    1236:	0b c0       	rjmp	.+22     	; 0x124e <update_zombies+0x422>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	5f e3       	ldi	r21, 0x3F	; 63
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	39 d6       	rcall	.+3186   	; 0x1eb8 <__addsf3>
    1246:	6c 83       	std	Y+4, r22	; 0x04
		}

		if ( sprites[i].y < 0 + 13) {
    1248:	7d 83       	std	Y+5, r23	; 0x05
    124a:	8e 83       	std	Y+6, r24	; 0x06
    124c:	9f 83       	std	Y+7, r25	; 0x07
    124e:	0b 5e       	subi	r16, 0xEB	; 235
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	65 96       	adiw	r28, 0x15	; 21
    1254:	08 3a       	cpi	r16, 0xA8	; 168
    1256:	11 05       	cpc	r17, r1
    1258:	09 f0       	breq	.+2      	; 0x125c <update_zombies+0x430>
    125a:	fe cd       	rjmp	.-1028   	; 0xe58 <update_zombies+0x2c>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
			sprites[i].y +=1;
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	3f 90       	pop	r3
    127e:	2f 90       	pop	r2
    1280:	08 95       	ret

00001282 <zombie_updater>:
	draw_zombies( z );
}

void update_zombies ( Sprite * sprites ) {
	// pick a direction to move in
	for ( int i = 0; i < zombie_count; i++ ) {
    1282:	80 91 0a 01 	lds	r24, 0x010A
    1286:	90 91 0b 01 	lds	r25, 0x010B
		if ( sprites[i].y < 0 + 13) {
			sprites[i].y +=1;
		}

	}
}
    128a:	d0 dd       	rcall	.-1120   	; 0xe2c <update_zombies>
    128c:	80 91 0a 01 	lds	r24, 0x010A
    1290:	90 91 0b 01 	lds	r25, 0x010B
    1294:	8d cd       	rjmp	.-1254   	; 0xdb0 <draw_zombies>

00001296 <zombie_collision>:
    1296:	2f 92       	push	r2
    1298:	3f 92       	push	r3
    129a:	4f 92       	push	r4
    129c:	5f 92       	push	r5
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
	for ( int i = 0; i < zombie_count; i++ ) {
		zombie_collision( zs + i );
	}
}

void zombie_collision( Sprite * z) {
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	2b 97       	sbiw	r28, 0x0b	; 11
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
	if (
			( hero.x > z->x && hero.y > z->y && hero.x < z->x + 3 && hero.y < z->y + 3 ) ||
    12ce:	80 90 c4 01 	lds	r8, 0x01C4
    12d2:	90 90 c5 01 	lds	r9, 0x01C5
    12d6:	a0 90 c6 01 	lds	r10, 0x01C6
    12da:	b0 90 c7 01 	lds	r11, 0x01C7
    12de:	dc 01       	movw	r26, r24
    12e0:	cd 90       	ld	r12, X+
    12e2:	dd 90       	ld	r13, X+
    12e4:	ed 90       	ld	r14, X+
    12e6:	fc 90       	ld	r15, X
		zombie_collision( zs + i );
	}
}

void zombie_collision( Sprite * z) {
	if (
    12e8:	a7 01       	movw	r20, r14
    12ea:	96 01       	movw	r18, r12
    12ec:	c5 01       	movw	r24, r10
    12ee:	b4 01       	movw	r22, r8
    12f0:	fd d6       	rcall	.+3578   	; 0x20ec <__gesf2>
    12f2:	18 16       	cp	r1, r24
    12f4:	0c f0       	brlt	.+2      	; 0x12f8 <zombie_collision+0x62>
    12f6:	39 c0       	rjmp	.+114    	; 0x136a <zombie_collision+0xd4>
    12f8:	40 90 c8 01 	lds	r4, 0x01C8
			( hero.x > z->x && hero.y > z->y && hero.x < z->x + 3 && hero.y < z->y + 3 ) ||
    12fc:	50 90 c9 01 	lds	r5, 0x01C9
    1300:	60 90 ca 01 	lds	r6, 0x01CA
    1304:	70 90 cb 01 	lds	r7, 0x01CB
    1308:	ad 81       	ldd	r26, Y+5	; 0x05
    130a:	be 81       	ldd	r27, Y+6	; 0x06
    130c:	14 96       	adiw	r26, 0x04	; 4
    130e:	8d 91       	ld	r24, X+
    1310:	9d 91       	ld	r25, X+
    1312:	0d 90       	ld	r0, X+
    1314:	bc 91       	ld	r27, X
    1316:	a0 2d       	mov	r26, r0
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	ab 83       	std	Y+3, r26	; 0x03
    131e:	bc 83       	std	Y+4, r27	; 0x04
    1320:	9c 01       	movw	r18, r24
    1322:	ad 01       	movw	r20, r26
    1324:	c3 01       	movw	r24, r6
    1326:	b2 01       	movw	r22, r4
    1328:	e1 d6       	rcall	.+3522   	; 0x20ec <__gesf2>
    132a:	18 16       	cp	r1, r24
    132c:	f4 f4       	brge	.+60     	; 0x136a <zombie_collision+0xd4>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e4       	ldi	r20, 0x40	; 64
    1334:	50 e4       	ldi	r21, 0x40	; 64
    1336:	c7 01       	movw	r24, r14
    1338:	b6 01       	movw	r22, r12
    133a:	be d5       	rcall	.+2940   	; 0x1eb8 <__addsf3>
    133c:	9b 01       	movw	r18, r22
    133e:	ac 01       	movw	r20, r24
    1340:	c5 01       	movw	r24, r10
    1342:	b4 01       	movw	r22, r8
    1344:	1d d6       	rcall	.+3130   	; 0x1f80 <__cmpsf2>
    1346:	87 ff       	sbrs	r24, 7
    1348:	10 c0       	rjmp	.+32     	; 0x136a <zombie_collision+0xd4>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e4       	ldi	r20, 0x40	; 64
    1350:	50 e4       	ldi	r21, 0x40	; 64
    1352:	69 81       	ldd	r22, Y+1	; 0x01
    1354:	7a 81       	ldd	r23, Y+2	; 0x02
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	ae d5       	rcall	.+2908   	; 0x1eb8 <__addsf3>
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	c3 01       	movw	r24, r6
    1362:	b2 01       	movw	r22, r4
    1364:	0d d6       	rcall	.+3098   	; 0x1f80 <__cmpsf2>
    1366:	87 fd       	sbrc	r24, 7
    1368:	a1 c0       	rjmp	.+322    	; 0x14ac <zombie_collision+0x216>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
			( hero.x + 1 > z->x && hero.y + 1 > z->y && hero.x + 1 < z->x + 3 && hero.y + 1 < z->y + 3 )  ||
    1376:	a0 d5       	rcall	.+2880   	; 0x1eb8 <__addsf3>
    1378:	1b 01       	movw	r2, r22
    137a:	8c 01       	movw	r16, r24
    137c:	a7 01       	movw	r20, r14
    137e:	96 01       	movw	r18, r12
    1380:	73 2d       	mov	r23, r3
    1382:	91 2f       	mov	r25, r17
    1384:	b3 d6       	rcall	.+3430   	; 0x20ec <__gesf2>
    1386:	18 16       	cp	r1, r24
    1388:	0c f0       	brlt	.+2      	; 0x138c <zombie_collision+0xf6>
	}
}

void zombie_collision( Sprite * z) {
	if (
			( hero.x > z->x && hero.y > z->y && hero.x < z->x + 3 && hero.y < z->y + 3 ) ||
    138a:	40 c0       	rjmp	.+128    	; 0x140c <zombie_collision+0x176>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	60 91 c8 01 	lds	r22, 0x01C8
    1398:	70 91 c9 01 	lds	r23, 0x01C9
			( hero.x + 1 > z->x && hero.y + 1 > z->y && hero.x + 1 < z->x + 3 && hero.y + 1 < z->y + 3 )  ||
    139c:	80 91 ca 01 	lds	r24, 0x01CA
    13a0:	90 91 cb 01 	lds	r25, 0x01CB
    13a4:	89 d5       	rcall	.+2834   	; 0x1eb8 <__addsf3>
    13a6:	6b 87       	std	Y+11, r22	; 0x0b
    13a8:	78 87       	std	Y+8, r23	; 0x08
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	9f 83       	std	Y+7, r25	; 0x07
    13ae:	ed 81       	ldd	r30, Y+5	; 0x05
    13b0:	fe 81       	ldd	r31, Y+6	; 0x06
    13b2:	44 80       	ldd	r4, Z+4	; 0x04
    13b4:	55 80       	ldd	r5, Z+5	; 0x05
    13b6:	66 80       	ldd	r6, Z+6	; 0x06
    13b8:	77 80       	ldd	r7, Z+7	; 0x07
    13ba:	a3 01       	movw	r20, r6
    13bc:	92 01       	movw	r18, r4
    13be:	96 d6       	rcall	.+3372   	; 0x20ec <__gesf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	24 f5       	brge	.+72     	; 0x140c <zombie_collision+0x176>
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e4       	ldi	r20, 0x40	; 64
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	73 d5       	rcall	.+2790   	; 0x1eb8 <__addsf3>
    13d2:	9b 01       	movw	r18, r22
    13d4:	ac 01       	movw	r20, r24
    13d6:	62 2d       	mov	r22, r2
    13d8:	73 2d       	mov	r23, r3
    13da:	80 2f       	mov	r24, r16
    13dc:	91 2f       	mov	r25, r17
    13de:	d0 d5       	rcall	.+2976   	; 0x1f80 <__cmpsf2>
    13e0:	87 ff       	sbrs	r24, 7
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <zombie_collision+0x176>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e4       	ldi	r20, 0x40	; 64
    13ea:	50 e4       	ldi	r21, 0x40	; 64
    13ec:	c3 01       	movw	r24, r6
    13ee:	b2 01       	movw	r22, r4
    13f0:	63 d5       	rcall	.+2758   	; 0x1eb8 <__addsf3>
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	bb 85       	ldd	r27, Y+11	; 0x0b
    13f8:	a8 85       	ldd	r26, Y+8	; 0x08
    13fa:	19 81       	ldd	r17, Y+1	; 0x01
    13fc:	0f 81       	ldd	r16, Y+7	; 0x07
    13fe:	6b 2f       	mov	r22, r27
    1400:	7a 2f       	mov	r23, r26
    1402:	81 2f       	mov	r24, r17
    1404:	90 2f       	mov	r25, r16
    1406:	bc d5       	rcall	.+2936   	; 0x1f80 <__cmpsf2>
    1408:	87 fd       	sbrc	r24, 7
    140a:	50 c0       	rjmp	.+160    	; 0x14ac <zombie_collision+0x216>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e4       	ldi	r21, 0x40	; 64
    1414:	c5 01       	movw	r24, r10
    1416:	b4 01       	movw	r22, r8
    1418:	4f d5       	rcall	.+2718   	; 0x1eb8 <__addsf3>
    141a:	2b 01       	movw	r4, r22
    141c:	3c 01       	movw	r6, r24
    141e:	a7 01       	movw	r20, r14
    1420:	96 01       	movw	r18, r12
    1422:	75 2d       	mov	r23, r5
    1424:	97 2d       	mov	r25, r7
    1426:	62 d6       	rcall	.+3268   	; 0x20ec <__gesf2>
			( hero.x + 2 > z->x && hero.y + 2 > z->y && hero.x + 2 < z->x + 3 && hero.y + 2 < z->y + 3 )
    1428:	18 16       	cp	r1, r24
    142a:	0c f0       	brlt	.+2      	; 0x142e <zombie_collision+0x198>
    142c:	7d c0       	rjmp	.+250    	; 0x1528 <zombie_collision+0x292>
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e4       	ldi	r21, 0x40	; 64
    1436:	60 91 c8 01 	lds	r22, 0x01C8
    143a:	70 91 c9 01 	lds	r23, 0x01C9
}

void zombie_collision( Sprite * z) {
	if (
			( hero.x > z->x && hero.y > z->y && hero.x < z->x + 3 && hero.y < z->y + 3 ) ||
			( hero.x + 1 > z->x && hero.y + 1 > z->y && hero.x + 1 < z->x + 3 && hero.y + 1 < z->y + 3 )  ||
    143e:	80 91 ca 01 	lds	r24, 0x01CA
    1442:	90 91 cb 01 	lds	r25, 0x01CB
    1446:	38 d5       	rcall	.+2672   	; 0x1eb8 <__addsf3>
    1448:	8b 01       	movw	r16, r22
    144a:	1c 01       	movw	r2, r24
    144c:	ad 81       	ldd	r26, Y+5	; 0x05
			( hero.x + 2 > z->x && hero.y + 2 > z->y && hero.x + 2 < z->x + 3 && hero.y + 2 < z->y + 3 )
    144e:	be 81       	ldd	r27, Y+6	; 0x06
    1450:	14 96       	adiw	r26, 0x04	; 4
    1452:	8d 90       	ld	r8, X+
    1454:	9d 90       	ld	r9, X+
    1456:	ad 90       	ld	r10, X+
    1458:	bc 90       	ld	r11, X
    145a:	17 97       	sbiw	r26, 0x07	; 7
    145c:	a5 01       	movw	r20, r10
    145e:	94 01       	movw	r18, r8
    1460:	71 2f       	mov	r23, r17
    1462:	93 2d       	mov	r25, r3
    1464:	43 d6       	rcall	.+3206   	; 0x20ec <__gesf2>
    1466:	18 16       	cp	r1, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <zombie_collision+0x1d6>
    146a:	5e c0       	rjmp	.+188    	; 0x1528 <zombie_collision+0x292>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e4       	ldi	r20, 0x40	; 64
    1472:	50 e4       	ldi	r21, 0x40	; 64
    1474:	c7 01       	movw	r24, r14
    1476:	b6 01       	movw	r22, r12
    1478:	1f d5       	rcall	.+2622   	; 0x1eb8 <__addsf3>
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	64 2d       	mov	r22, r4
    1480:	75 2d       	mov	r23, r5
    1482:	86 2d       	mov	r24, r6
    1484:	97 2d       	mov	r25, r7
    1486:	7c d5       	rcall	.+2808   	; 0x1f80 <__cmpsf2>
    1488:	87 ff       	sbrs	r24, 7
    148a:	4e c0       	rjmp	.+156    	; 0x1528 <zombie_collision+0x292>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e4       	ldi	r20, 0x40	; 64
    1492:	50 e4       	ldi	r21, 0x40	; 64
    1494:	c5 01       	movw	r24, r10
    1496:	b4 01       	movw	r22, r8
    1498:	0f d5       	rcall	.+2590   	; 0x1eb8 <__addsf3>
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	60 2f       	mov	r22, r16
    14a0:	71 2f       	mov	r23, r17
    14a2:	82 2d       	mov	r24, r2
    14a4:	93 2d       	mov	r25, r3
    14a6:	6c d5       	rcall	.+2776   	; 0x1f80 <__cmpsf2>
    14a8:	87 ff       	sbrs	r24, 7
    14aa:	3e c0       	rjmp	.+124    	; 0x1528 <zombie_collision+0x292>
    14ac:	80 91 00 01 	lds	r24, 0x0100
    14b0:	90 91 01 01 	lds	r25, 0x0101
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	90 93 01 01 	sts	0x0101, r25
    14ba:	80 93 00 01 	sts	0x0100, r24
    14be:	18 16       	cp	r1, r24
    14c0:	19 06       	cpc	r1, r25
    14c2:	cc f4       	brge	.+50     	; 0x14f6 <zombie_collision+0x260>
    14c4:	2b 96       	adiw	r28, 0x0b	; 11
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
			) {
		lives = lives - 1;
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	bf 90       	pop	r11
    14e2:	af 90       	pop	r10
    14e4:	9f 90       	pop	r9
    14e6:	8f 90       	pop	r8
    14e8:	7f 90       	pop	r7
		if ( lives > 0 ){
    14ea:	6f 90       	pop	r6
    14ec:	5f 90       	pop	r5
    14ee:	4f 90       	pop	r4
		else {
			clear();
		}

	}
}
    14f0:	3f 90       	pop	r3
    14f2:	2f 90       	pop	r2
    14f4:	b5 c0       	rjmp	.+362    	; 0x1660 <hero_die>
    14f6:	2b 96       	adiw	r28, 0x0b	; 11
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
			( hero.x + 1 > z->x && hero.y + 1 > z->y && hero.x + 1 < z->x + 3 && hero.y + 1 < z->y + 3 )  ||
			( hero.x + 2 > z->x && hero.y + 2 > z->y && hero.x + 2 < z->x + 3 && hero.y + 2 < z->y + 3 )
			) {
		lives = lives - 1;
		if ( lives > 0 ){
			hero_die();
    1520:	4f 90       	pop	r4
    1522:	3f 90       	pop	r3
		else {
			clear();
		}

	}
}
    1524:	2f 90       	pop	r2
    1526:	f7 c5       	rjmp	.+3054   	; 0x2116 <clear>
    1528:	2b 96       	adiw	r28, 0x0b	; 11
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	9f 90       	pop	r9
    154a:	8f 90       	pop	r8
    154c:	7f 90       	pop	r7
    154e:	6f 90       	pop	r6
    1550:	5f 90       	pop	r5
    1552:	4f 90       	pop	r4
		lives = lives - 1;
		if ( lives > 0 ){
			hero_die();
		}
		else {
			clear();
    1554:	3f 90       	pop	r3
    1556:	2f 90       	pop	r2
		}

	}
}
    1558:	08 95       	ret

0000155a <zombies_collission>:
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	8c 01       	movw	r16, r24
    1564:	c0 e0       	ldi	r28, 0x00	; 0
    1566:	d0 e0       	ldi	r29, 0x00	; 0
    1568:	c8 01       	movw	r24, r16
    156a:	8c 0f       	add	r24, r28
    156c:	9d 1f       	adc	r25, r29
    156e:	93 de       	rcall	.-730    	; 0x1296 <zombie_collision>
    1570:	65 96       	adiw	r28, 0x15	; 21
    1572:	c8 3a       	cpi	r28, 0xA8	; 168
    1574:	d1 05       	cpc	r29, r1
    1576:	c1 f7       	brne	.-16     	; 0x1568 <zombies_collission+0xe>
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <kill_zombie>:
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
	for ( int i = 0; i < zombie_count; i++ ) {
		kill_zombie( zombies + i );
	}
}

void kill_zombie( Sprite * zombie ) {
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
	if ( zombie->x < sword_prt->x && zombie->y < sword_prt->y && zombie->y > sword_prt->y + 3) {
    159a:	a0 90 32 01 	lds	r10, 0x0132
    159e:	b0 90 33 01 	lds	r11, 0x0133
    15a2:	f5 01       	movw	r30, r10
    15a4:	20 81       	ld	r18, Z
    15a6:	31 81       	ldd	r19, Z+1	; 0x01
    15a8:	42 81       	ldd	r20, Z+2	; 0x02
    15aa:	53 81       	ldd	r21, Z+3	; 0x03
    15ac:	68 81       	ld	r22, Y
    15ae:	79 81       	ldd	r23, Y+1	; 0x01
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	e5 d4       	rcall	.+2506   	; 0x1f80 <__cmpsf2>
    15b6:	87 ff       	sbrs	r24, 7
    15b8:	29 c0       	rjmp	.+82     	; 0x160c <kill_zombie+0x8a>
    15ba:	cc 80       	ldd	r12, Y+4	; 0x04
    15bc:	dd 80       	ldd	r13, Y+5	; 0x05
    15be:	ee 80       	ldd	r14, Y+6	; 0x06
    15c0:	ff 80       	ldd	r15, Y+7	; 0x07
    15c2:	f5 01       	movw	r30, r10
    15c4:	84 80       	ldd	r8, Z+4	; 0x04
    15c6:	95 80       	ldd	r9, Z+5	; 0x05
    15c8:	a6 80       	ldd	r10, Z+6	; 0x06
    15ca:	b7 80       	ldd	r11, Z+7	; 0x07
    15cc:	a5 01       	movw	r20, r10
    15ce:	94 01       	movw	r18, r8
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	d5 d4       	rcall	.+2474   	; 0x1f80 <__cmpsf2>
    15d6:	87 ff       	sbrs	r24, 7
    15d8:	19 c0       	rjmp	.+50     	; 0x160c <kill_zombie+0x8a>
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e4       	ldi	r20, 0x40	; 64
    15e0:	50 e4       	ldi	r21, 0x40	; 64
    15e2:	c5 01       	movw	r24, r10
    15e4:	b4 01       	movw	r22, r8
    15e6:	68 d4       	rcall	.+2256   	; 0x1eb8 <__addsf3>
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	c7 01       	movw	r24, r14
    15ee:	b6 01       	movw	r22, r12
    15f0:	7d d5       	rcall	.+2810   	; 0x20ec <__gesf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	5c f4       	brge	.+22     	; 0x160c <kill_zombie+0x8a>
    15f6:	37 e0       	ldi	r19, 0x07	; 7
    15f8:	e3 2e       	mov	r14, r19
    15fa:	31 e0       	ldi	r19, 0x01	; 1
    15fc:	f3 2e       	mov	r15, r19
		init_sprite ( zombie, -10, -10, 4, 3, bitmap1 );
    15fe:	03 e0       	ldi	r16, 0x03	; 3
    1600:	24 e0       	ldi	r18, 0x04	; 4
    1602:	46 ef       	ldi	r20, 0xF6	; 246
    1604:	66 ef       	ldi	r22, 0xF6	; 246
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <init_sprite>
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
	}
}
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	9f 90       	pop	r9
    1620:	8f 90       	pop	r8
    1622:	08 95       	ret

00001624 <kill_zombies>:
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
		}

	}
}

void kill_zombies( Sprite * zombies ) {
    162c:	8c 01       	movw	r16, r24
    162e:	c0 e0       	ldi	r28, 0x00	; 0
    1630:	d0 e0       	ldi	r29, 0x00	; 0
	for ( int i = 0; i < zombie_count; i++ ) {
		kill_zombie( zombies + i );
    1632:	c8 01       	movw	r24, r16
    1634:	8c 0f       	add	r24, r28
    1636:	9d 1f       	adc	r25, r29
    1638:	a4 df       	rcall	.-184    	; 0x1582 <kill_zombie>
    163a:	65 96       	adiw	r28, 0x15	; 21
    163c:	c8 3a       	cpi	r28, 0xA8	; 168

	}
}

void kill_zombies( Sprite * zombies ) {
	for ( int i = 0; i < zombie_count; i++ ) {
    163e:	d1 05       	cpc	r29, r1
    1640:	c1 f7       	brne	.-16     	; 0x1632 <kill_zombies+0xe>
    1642:	df 91       	pop	r29
		kill_zombie( zombies + i );
	}
}
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <check_zombie>:
    164c:	80 91 0a 01 	lds	r24, 0x010A

	}
}

void check_zombie() {
	zombies_collission ( z );
    1650:	90 91 0b 01 	lds	r25, 0x010B
    1654:	82 df       	rcall	.-252    	; 0x155a <zombies_collission>
    1656:	80 91 0a 01 	lds	r24, 0x010A
	kill_zombies( z );
    165a:	90 91 0b 01 	lds	r25, 0x010B
    165e:	e2 cf       	rjmp	.-60     	; 0x1624 <kill_zombies>

00001660 <hero_die>:
#include "hero.h"
#include "zombies.h"
#include "game_over.h"

void hero_die() {
	clear();
    1660:	5a d5       	rcall	.+2740   	; 0x2116 <clear>
    1662:	0e 94 5d 02 	call	0x4ba	; 0x4ba <screen_lines>
	screen_lines();
    1666:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <start_hero>
	start_hero();
    166a:	b7 cb       	rjmp	.-2194   	; 0xdda <start_zombies>

0000166c <start_pit>:
			BYTE( 11111100 ),
	};

int in_pit = 0;

void start_pit() {
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29


	const int pit_width = 6;
	const int pit_height = 6;

	int rand_x = (rand()%70)+5;;
    1676:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
    167a:	ec 01       	movw	r28, r24
	int rand_y = (rand()%30)+14;
    167c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
    1680:	6e e1       	ldi	r22, 0x1E	; 30
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
    1688:	ac 01       	movw	r20, r24
    168a:	42 5f       	subi	r20, 0xF2	; 242
    168c:	5f 4f       	sbci	r21, 0xFF	; 255


	const int pit_width = 6;
	const int pit_height = 6;

	int rand_x = (rand()%70)+5;;
    168e:	ce 01       	movw	r24, r28
    1690:	66 e4       	ldi	r22, 0x46	; 70
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
    1698:	05 96       	adiw	r24, 0x05	; 5
	int rand_y = (rand()%30)+14;

	init_sprite( &pit, rand_x,rand_y,pit_width,pit_height, bitmap_pit );
    169a:	9c e0       	ldi	r25, 0x0C	; 12
    169c:	e9 2e       	mov	r14, r25
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	f9 2e       	mov	r15, r25
    16a2:	06 e0       	ldi	r16, 0x06	; 6
    16a4:	26 e0       	ldi	r18, 0x06	; 6
    16a6:	68 2f       	mov	r22, r24
    16a8:	8f ea       	ldi	r24, 0xAF	; 175
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <init_sprite>
	draw_sprite( &pit );
    16b0:	8f ea       	ldi	r24, 0xAF	; 175
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	0e 94 9b 13 	call	0x2736	; 0x2736 <draw_sprite>
	pit_prt->is_visible = 1;
    16b8:	e0 91 12 01 	lds	r30, 0x0112
    16bc:	f0 91 13 01 	lds	r31, 0x0113
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	82 87       	std	Z+10, r24	; 0x0a
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <draw_pit>:

void draw_pit() {
	draw_sprite ( &pit );
    16d0:	8f ea       	ldi	r24, 0xAF	; 175
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <draw_sprite>

000016d8 <pit_collision>:
}
void pit_collision() {
    16d8:	4f 92       	push	r4
    16da:	5f 92       	push	r5
    16dc:	6f 92       	push	r6
    16de:	7f 92       	push	r7
    16e0:	8f 92       	push	r8
    16e2:	9f 92       	push	r9
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <pit_collision+0x22>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <pit_collision+0x24>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	if (
			( hero.x > pit_prt->x && hero.y + 1 > pit_prt->y && hero.x < pit_prt->x+5 && hero.y < pit_prt->y+5 ) || // right side
    1700:	c0 90 c4 01 	lds	r12, 0x01C4
    1704:	d0 90 c5 01 	lds	r13, 0x01C5
    1708:	e0 90 c6 01 	lds	r14, 0x01C6
    170c:	f0 90 c7 01 	lds	r15, 0x01C7
    1710:	00 91 12 01 	lds	r16, 0x0112
    1714:	10 91 13 01 	lds	r17, 0x0113
    1718:	d8 01       	movw	r26, r16
    171a:	8d 90       	ld	r8, X+
    171c:	9d 90       	ld	r9, X+
    171e:	ad 90       	ld	r10, X+
    1720:	bc 90       	ld	r11, X

void draw_pit() {
	draw_sprite ( &pit );
}
void pit_collision() {
	if (
    1722:	a5 01       	movw	r20, r10
    1724:	94 01       	movw	r18, r8
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	e0 d4       	rcall	.+2496   	; 0x20ec <__gesf2>
    172c:	18 16       	cp	r1, r24
    172e:	6c f0       	brlt	.+26     	; 0x174a <pit_collision+0x72>
    1730:	20 e0       	ldi	r18, 0x00	; 0
			( hero.x > pit_prt->x && hero.y + 1 > pit_prt->y && hero.x < pit_prt->x+5 && hero.y < pit_prt->y+5 ) || // right side
			( hero.x + 1 > pit_prt->x && hero.y + 1 > pit_prt->y && hero.x < pit_prt->x+5 && hero.y < pit_prt->y+5 )
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	c7 01       	movw	r24, r14
    173a:	b6 01       	movw	r22, r12
    173c:	bd d3       	rcall	.+1914   	; 0x1eb8 <__addsf3>
    173e:	a5 01       	movw	r20, r10
    1740:	94 01       	movw	r18, r8
void draw_pit() {
	draw_sprite ( &pit );
}
void pit_collision() {
	if (
			( hero.x > pit_prt->x && hero.y + 1 > pit_prt->y && hero.x < pit_prt->x+5 && hero.y < pit_prt->y+5 ) || // right side
    1742:	d4 d4       	rcall	.+2472   	; 0x20ec <__gesf2>
    1744:	18 16       	cp	r1, r24
    1746:	0c f0       	brlt	.+2      	; 0x174a <pit_collision+0x72>
    1748:	45 c0       	rjmp	.+138    	; 0x17d4 <pit_collision+0xfc>
    174a:	40 90 c8 01 	lds	r4, 0x01C8
    174e:	50 90 c9 01 	lds	r5, 0x01C9
    1752:	60 90 ca 01 	lds	r6, 0x01CA
    1756:	70 90 cb 01 	lds	r7, 0x01CB
    175a:	d8 01       	movw	r26, r16
    175c:	14 96       	adiw	r26, 0x04	; 4
    175e:	8d 91       	ld	r24, X+
    1760:	9d 91       	ld	r25, X+
    1762:	0d 90       	ld	r0, X+
    1764:	bc 91       	ld	r27, X
    1766:	a0 2d       	mov	r26, r0
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	ab 83       	std	Y+3, r26	; 0x03
    176e:	bc 83       	std	Y+4, r27	; 0x04
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	c3 01       	movw	r24, r6
    177a:	b2 01       	movw	r22, r4
    177c:	9d d3       	rcall	.+1850   	; 0x1eb8 <__addsf3>
    177e:	29 81       	ldd	r18, Y+1	; 0x01
    1780:	3a 81       	ldd	r19, Y+2	; 0x02
    1782:	4b 81       	ldd	r20, Y+3	; 0x03
    1784:	5c 81       	ldd	r21, Y+4	; 0x04
    1786:	b2 d4       	rcall	.+2404   	; 0x20ec <__gesf2>
    1788:	18 16       	cp	r1, r24
    178a:	24 f5       	brge	.+72     	; 0x17d4 <pit_collision+0xfc>
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 ea       	ldi	r20, 0xA0	; 160
    1792:	50 e4       	ldi	r21, 0x40	; 64
    1794:	c5 01       	movw	r24, r10
    1796:	b4 01       	movw	r22, r8
    1798:	8f d3       	rcall	.+1822   	; 0x1eb8 <__addsf3>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	c7 01       	movw	r24, r14
    17a0:	b6 01       	movw	r22, r12
    17a2:	ee d3       	rcall	.+2012   	; 0x1f80 <__cmpsf2>
    17a4:	87 ff       	sbrs	r24, 7
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <pit_collision+0xfc>
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 ea       	ldi	r20, 0xA0	; 160
    17ae:	50 e4       	ldi	r21, 0x40	; 64
    17b0:	69 81       	ldd	r22, Y+1	; 0x01
    17b2:	7a 81       	ldd	r23, Y+2	; 0x02
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	7f d3       	rcall	.+1790   	; 0x1eb8 <__addsf3>
    17ba:	9b 01       	movw	r18, r22
    17bc:	ac 01       	movw	r20, r24
    17be:	c3 01       	movw	r24, r6
    17c0:	b2 01       	movw	r22, r4
    17c2:	de d3       	rcall	.+1980   	; 0x1f80 <__cmpsf2>
    17c4:	87 ff       	sbrs	r24, 7
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <pit_collision+0xfc>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	90 93 93 01 	sts	0x0193, r25
    17d0:	80 93 92 01 	sts	0x0192, r24
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
			( hero.x + 1 > pit_prt->x && hero.y + 1 > pit_prt->y && hero.x < pit_prt->x+5 && hero.y < pit_prt->y+5 )
	) {
		in_pit = 1;
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15

	}

}
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	5f 90       	pop	r5
    17fa:	4f 90       	pop	r4
    17fc:	08 95       	ret

000017fe <random_seed>:
#include "friendly_ports.h"

void random_seed( void );

void random_seed() {
	unsigned int seed = 0;
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
	while (!(PINB & 3 )) {
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <random_seed+0x8>
	seed++;
    1804:	01 96       	adiw	r24, 0x01	; 1

void random_seed( void );

void random_seed() {
	unsigned int seed = 0;
	while (!(PINB & 3 )) {
    1806:	23 b1       	in	r18, 0x03	; 3
    1808:	23 70       	andi	r18, 0x03	; 3
    180a:	e1 f3       	breq	.-8      	; 0x1804 <random_seed+0x6>
	seed++;
	}
	// Seed the random number generator
	srand(seed);
    180c:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <srand>

00001810 <sword_setup>:
//	if ( hero_d == 4 ) {
//		bitmap_sword = bitmap_sword_left;
//	}
//}

void sword_setup() {
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
	sword_pickup = 0;
    181a:	10 92 99 01 	sts	0x0199, r1
    181e:	10 92 98 01 	sts	0x0198, r1

	const int sword_width = 4;
	const int sword_height = 4;

	int rand_x = (rand()%70)+5;;
    1822:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
    1826:	ec 01       	movw	r28, r24
	int rand_y = (rand()%30)+14;
    1828:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <rand>
    182c:	6e e1       	ldi	r22, 0x1E	; 30
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
    1834:	ac 01       	movw	r20, r24
    1836:	42 5f       	subi	r20, 0xF2	; 242
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
	sword_pickup = 0;

	const int sword_width = 4;
	const int sword_height = 4;

	int rand_x = (rand()%70)+5;;
    183a:	ce 01       	movw	r24, r28
    183c:	66 e4       	ldi	r22, 0x46	; 70
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__divmodhi4>
    1844:	05 96       	adiw	r24, 0x05	; 5
	int rand_y = (rand()%30)+14;

	init_sprite( &sword, rand_x,rand_y,sword_width,sword_height, bitmap_sword );
    1846:	9e e1       	ldi	r25, 0x1E	; 30
    1848:	e9 2e       	mov	r14, r25
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	f9 2e       	mov	r15, r25
    184e:	04 e0       	ldi	r16, 0x04	; 4
    1850:	24 e0       	ldi	r18, 0x04	; 4
    1852:	68 2f       	mov	r22, r24
    1854:	8a e9       	ldi	r24, 0x9A	; 154
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	3e d7       	rcall	.+3708   	; 0x26d6 <init_sprite>
    185a:	81 e0       	ldi	r24, 0x01	; 1
	sword.is_visible = 1;
    185c:	80 93 a4 01 	sts	0x01A4, r24
    1860:	e0 91 32 01 	lds	r30, 0x0132
	sword_prt->is_visible = 1;
    1864:	f0 91 33 01 	lds	r31, 0x0133
    1868:	82 87       	std	Z+10, r24	; 0x0a
    186a:	8a e9       	ldi	r24, 0x9A	; 154
	draw_sprite( &sword );
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	df 91       	pop	r29
}
    1870:	cf 91       	pop	r28
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	5e c7       	rjmp	.+3772   	; 0x2736 <draw_sprite>

0000187a <sword_pickup_title>:
	int rand_y = (rand()%30)+14;

	init_sprite( &sword, rand_x,rand_y,sword_width,sword_height, bitmap_sword );
	sword.is_visible = 1;
	sword_prt->is_visible = 1;
	draw_sprite( &sword );
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
}

void sword_pickup_title() {
    187e:	0f 93       	push	r16
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	6d 97       	sbiw	r28, 0x1d	; 29
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
	// Draw the sword into the infromation bar
	byte bitmap_sword_tool[] = {
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	de 01       	movw	r26, r28
    189c:	56 96       	adiw	r26, 0x16	; 22
    189e:	01 90       	ld	r0, Z+
    18a0:	0d 92       	st	X+, r0
    18a2:	8a 95       	dec	r24
    18a4:	e1 f7       	brne	.-8      	; 0x189e <sword_pickup_title+0x24>
	const int sword_tool_width = 8;
	const int sword_tool_height = 8;

	Sprite sword_tool;

	init_sprite( &sword_tool, 49, 2, sword_tool_width, sword_tool_height, bitmap_sword_tool);
    18a6:	26 e1       	ldi	r18, 0x16	; 22
    18a8:	e2 2e       	mov	r14, r18
    18aa:	f1 2c       	mov	r15, r1
    18ac:	ec 0e       	add	r14, r28
    18ae:	fd 1e       	adc	r15, r29
    18b0:	08 e0       	ldi	r16, 0x08	; 8
    18b2:	28 e0       	ldi	r18, 0x08	; 8
    18b4:	42 e0       	ldi	r20, 0x02	; 2
    18b6:	61 e3       	ldi	r22, 0x31	; 49
    18b8:	ce 01       	movw	r24, r28
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	0c d7       	rcall	.+3608   	; 0x26d6 <init_sprite>
    18be:	ce 01       	movw	r24, r28

	draw_sprite( &sword_tool );
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	39 d7       	rcall	.+3698   	; 0x2736 <draw_sprite>
    18c4:	6d 96       	adiw	r28, 0x1d	; 29
    18c6:	0f b6       	in	r0, 0x3f	; 63

}
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	08 95       	ret

000018dc <draw_sword>:
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17

void draw_sword() {
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
	if ( sword_pickup == 1 ) {
    18e4:	80 91 98 01 	lds	r24, 0x0198
    18e8:	90 91 99 01 	lds	r25, 0x0199
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f9 f4       	brne	.+62     	; 0x192e <draw_sword+0x52>
		sword_prt->x = hero_prt->x + 2;
    18f0:	c0 91 32 01 	lds	r28, 0x0132
    18f4:	d0 91 33 01 	lds	r29, 0x0133
    18f8:	00 91 05 01 	lds	r16, 0x0105
    18fc:	10 91 06 01 	lds	r17, 0x0106
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e4       	ldi	r21, 0x40	; 64
    1908:	f8 01       	movw	r30, r16
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	d2 d2       	rcall	.+1444   	; 0x1eb8 <__addsf3>
    1914:	68 83       	st	Y, r22
    1916:	79 83       	std	Y+1, r23	; 0x01
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	f8 01       	movw	r30, r16
		sword_prt->y = hero_prt->y;
    191e:	84 81       	ldd	r24, Z+4	; 0x04
    1920:	95 81       	ldd	r25, Z+5	; 0x05
    1922:	a6 81       	ldd	r26, Z+6	; 0x06
    1924:	b7 81       	ldd	r27, Z+7	; 0x07
    1926:	8c 83       	std	Y+4, r24	; 0x04
    1928:	9d 83       	std	Y+5, r25	; 0x05
    192a:	ae 83       	std	Y+6, r26	; 0x06
    192c:	bf 83       	std	Y+7, r27	; 0x07
    192e:	80 91 32 01 	lds	r24, 0x0132
	}
	draw_sprite( sword_prt );
    1932:	90 91 33 01 	lds	r25, 0x0133
    1936:	ff d6       	rcall	.+3582   	; 0x2736 <draw_sprite>
    1938:	80 91 98 01 	lds	r24, 0x0198
	if (sword_pickup == 1) {
    193c:	90 91 99 01 	lds	r25, 0x0199
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	31 f4       	brne	.+12     	; 0x1950 <draw_sword+0x74>
    1944:	9a df       	rcall	.-204    	; 0x187a <sword_pickup_title>
    1946:	df 91       	pop	r29
		sword_pickup_title();
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
		kill_zombies();
	}
}
    194c:	0f 91       	pop	r16
    194e:	6a ce       	rjmp	.-812    	; 0x1624 <kill_zombies>
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
		sword_prt->y = hero_prt->y;
	}
	draw_sprite( sword_prt );
	if (sword_pickup == 1) {
		sword_pickup_title();
		kill_zombies();
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
	}
}
    1958:	08 95       	ret

0000195a <pickup_sword>:
    195a:	2f 92       	push	r2
    195c:	3f 92       	push	r3
    195e:	4f 92       	push	r4
    1960:	5f 92       	push	r5

void pickup_sword() {
    1962:	6f 92       	push	r6
    1964:	7f 92       	push	r7
    1966:	8f 92       	push	r8
    1968:	9f 92       	push	r9
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	00 d0       	rcall	.+0      	; 0x1980 <pickup_sword+0x26>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <pickup_sword+0x28>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <pickup_sword+0x2a>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	if (
			(hero.x > sword_prt->x && hero.y > sword_prt->y && hero.x < sword_prt->x + 4 && hero.y < sword_prt->y + 4 )||
    1988:	80 90 c4 01 	lds	r8, 0x01C4
    198c:	90 90 c5 01 	lds	r9, 0x01C5
    1990:	a0 90 c6 01 	lds	r10, 0x01C6
    1994:	b0 90 c7 01 	lds	r11, 0x01C7
    1998:	80 91 32 01 	lds	r24, 0x0132
    199c:	90 91 33 01 	lds	r25, 0x0133
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	dc 01       	movw	r26, r24
    19a6:	cd 90       	ld	r12, X+
    19a8:	dd 90       	ld	r13, X+
    19aa:	ed 90       	ld	r14, X+
    19ac:	fc 90       	ld	r15, X
		kill_zombies();
	}
}

void pickup_sword() {
	if (
    19ae:	a7 01       	movw	r20, r14
    19b0:	96 01       	movw	r18, r12
    19b2:	c5 01       	movw	r24, r10
    19b4:	b4 01       	movw	r22, r8
    19b6:	9a d3       	rcall	.+1844   	; 0x20ec <__gesf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	0c f0       	brlt	.+2      	; 0x19be <pickup_sword+0x64>
    19bc:	39 c0       	rjmp	.+114    	; 0x1a30 <pickup_sword+0xd6>
    19be:	40 90 c8 01 	lds	r4, 0x01C8
			(hero.x > sword_prt->x && hero.y > sword_prt->y && hero.x < sword_prt->x + 4 && hero.y < sword_prt->y + 4 )||
    19c2:	50 90 c9 01 	lds	r5, 0x01C9
    19c6:	60 90 ca 01 	lds	r6, 0x01CA
    19ca:	70 90 cb 01 	lds	r7, 0x01CB
    19ce:	ad 81       	ldd	r26, Y+5	; 0x05
    19d0:	be 81       	ldd	r27, Y+6	; 0x06
    19d2:	14 96       	adiw	r26, 0x04	; 4
    19d4:	8d 91       	ld	r24, X+
    19d6:	9d 91       	ld	r25, X+
    19d8:	0d 90       	ld	r0, X+
    19da:	bc 91       	ld	r27, X
    19dc:	a0 2d       	mov	r26, r0
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	ab 83       	std	Y+3, r26	; 0x03
    19e4:	bc 83       	std	Y+4, r27	; 0x04
    19e6:	9c 01       	movw	r18, r24
    19e8:	ad 01       	movw	r20, r26
    19ea:	c3 01       	movw	r24, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	7e d3       	rcall	.+1788   	; 0x20ec <__gesf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	f4 f4       	brge	.+60     	; 0x1a30 <pickup_sword+0xd6>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	50 e4       	ldi	r21, 0x40	; 64
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	5b d2       	rcall	.+1206   	; 0x1eb8 <__addsf3>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	c5 01       	movw	r24, r10
    1a08:	b4 01       	movw	r22, r8
    1a0a:	ba d2       	rcall	.+1396   	; 0x1f80 <__cmpsf2>
    1a0c:	87 ff       	sbrs	r24, 7
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <pickup_sword+0xd6>
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	50 e4       	ldi	r21, 0x40	; 64
    1a18:	69 81       	ldd	r22, Y+1	; 0x01
    1a1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	4b d2       	rcall	.+1174   	; 0x1eb8 <__addsf3>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	c3 01       	movw	r24, r6
    1a28:	b2 01       	movw	r22, r4
    1a2a:	aa d2       	rcall	.+1364   	; 0x1f80 <__cmpsf2>
    1a2c:	87 fd       	sbrc	r24, 7
    1a2e:	4d c0       	rjmp	.+154    	; 0x1aca <pickup_sword+0x170>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	50 e4       	ldi	r21, 0x40	; 64
    1a38:	c5 01       	movw	r24, r10
    1a3a:	b4 01       	movw	r22, r8
			( hero.x + 2 > sword_prt->x && hero.y + 2 > sword_prt->y  && hero.x + 2 < sword_prt->x + 4 && hero.y + 2 < sword_prt->y + 4)
    1a3c:	3d d2       	rcall	.+1146   	; 0x1eb8 <__addsf3>
    1a3e:	1b 01       	movw	r2, r22
    1a40:	8c 01       	movw	r16, r24
    1a42:	a7 01       	movw	r20, r14
    1a44:	96 01       	movw	r18, r12
    1a46:	73 2d       	mov	r23, r3
    1a48:	91 2f       	mov	r25, r17
    1a4a:	50 d3       	rcall	.+1696   	; 0x20ec <__gesf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <pickup_sword+0xf8>
	}
}

void pickup_sword() {
	if (
			(hero.x > sword_prt->x && hero.y > sword_prt->y && hero.x < sword_prt->x + 4 && hero.y < sword_prt->y + 4 )||
    1a50:	4b c0       	rjmp	.+150    	; 0x1ae8 <pickup_sword+0x18e>
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e4       	ldi	r21, 0x40	; 64
    1a5a:	60 91 c8 01 	lds	r22, 0x01C8
    1a5e:	70 91 c9 01 	lds	r23, 0x01C9
			( hero.x + 2 > sword_prt->x && hero.y + 2 > sword_prt->y  && hero.x + 2 < sword_prt->x + 4 && hero.y + 2 < sword_prt->y + 4)
    1a62:	80 91 ca 01 	lds	r24, 0x01CA
    1a66:	90 91 cb 01 	lds	r25, 0x01CB
    1a6a:	26 d2       	rcall	.+1100   	; 0x1eb8 <__addsf3>
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	3c 01       	movw	r6, r24
    1a70:	ed 81       	ldd	r30, Y+5	; 0x05
    1a72:	fe 81       	ldd	r31, Y+6	; 0x06
    1a74:	84 80       	ldd	r8, Z+4	; 0x04
    1a76:	95 80       	ldd	r9, Z+5	; 0x05
    1a78:	a6 80       	ldd	r10, Z+6	; 0x06
    1a7a:	b7 80       	ldd	r11, Z+7	; 0x07
    1a7c:	a5 01       	movw	r20, r10
    1a7e:	94 01       	movw	r18, r8
    1a80:	75 2d       	mov	r23, r5
    1a82:	97 2d       	mov	r25, r7
    1a84:	33 d3       	rcall	.+1638   	; 0x20ec <__gesf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	7c f5       	brge	.+94     	; 0x1ae8 <pickup_sword+0x18e>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	50 e4       	ldi	r21, 0x40	; 64
    1a92:	c7 01       	movw	r24, r14
    1a94:	b6 01       	movw	r22, r12
    1a96:	10 d2       	rcall	.+1056   	; 0x1eb8 <__addsf3>
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	62 2d       	mov	r22, r2
    1a9e:	73 2d       	mov	r23, r3
    1aa0:	80 2f       	mov	r24, r16
    1aa2:	91 2f       	mov	r25, r17
    1aa4:	6d d2       	rcall	.+1242   	; 0x1f80 <__cmpsf2>
    1aa6:	87 ff       	sbrs	r24, 7
    1aa8:	1f c0       	rjmp	.+62     	; 0x1ae8 <pickup_sword+0x18e>
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	50 e4       	ldi	r21, 0x40	; 64
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	b4 01       	movw	r22, r8
    1ab6:	00 d2       	rcall	.+1024   	; 0x1eb8 <__addsf3>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	64 2d       	mov	r22, r4
    1abe:	75 2d       	mov	r23, r5
    1ac0:	86 2d       	mov	r24, r6
    1ac2:	97 2d       	mov	r25, r7
    1ac4:	5d d2       	rcall	.+1210   	; 0x1f80 <__cmpsf2>
    1ac6:	87 ff       	sbrs	r24, 7
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <pickup_sword+0x18e>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	90 93 99 01 	sts	0x0199, r25
    1ad2:	80 93 98 01 	sts	0x0198, r24
    1ad6:	80 91 8e 01 	lds	r24, 0x018E
    1ada:	90 91 8f 01 	lds	r25, 0x018F
    1ade:	03 96       	adiw	r24, 0x03	; 3
    1ae0:	90 93 8f 01 	sts	0x018F, r25
    1ae4:	80 93 8e 01 	sts	0x018E, r24
			) {
		sword_pickup =1;
    1ae8:	26 96       	adiw	r28, 0x06	; 6
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
		score = score + 3;
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
	}
}
    1b04:	bf 90       	pop	r11
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	7f 90       	pop	r7
    1b0e:	6f 90       	pop	r6
    1b10:	5f 90       	pop	r5
    1b12:	4f 90       	pop	r4
    1b14:	3f 90       	pop	r3
    1b16:	2f 90       	pop	r2
    1b18:	08 95       	ret

00001b1a <grenades_setup>:
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	36 e1       	ldi	r19, 0x16	; 22
    1b22:	e3 2e       	mov	r14, r19
    1b24:	31 e0       	ldi	r19, 0x01	; 1
    1b26:	f3 2e       	mov	r15, r19
    1b28:	04 e0       	ldi	r16, 0x04	; 4
    1b2a:	24 e0       	ldi	r18, 0x04	; 4
    1b2c:	46 e2       	ldi	r20, 0x26	; 38
    1b2e:	66 e4       	ldi	r22, 0x46	; 70
    1b30:	86 e9       	ldi	r24, 0x96	; 150
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	d0 d5       	rcall	.+2976   	; 0x26d6 <init_sprite>

void grenades_setup() {
	const int grenades_width = 4;
	const int grenades_height = 4;

	init_sprite( &grenades, 70,38,grenades_width,grenades_height, bitmap_grenades );
    1b36:	81 e0       	ldi	r24, 0x01	; 1
	grenades.is_visible = 1;
    1b38:	80 93 a0 02 	sts	0x02A0, r24
    1b3c:	e0 91 1c 01 	lds	r30, 0x011C
	grenades_prt->is_visible = 1;
    1b40:	f0 91 1d 01 	lds	r31, 0x011D
    1b44:	82 87       	std	Z+10, r24	; 0x0a
    1b46:	86 e9       	ldi	r24, 0x96	; 150
	draw_sprite( &grenades );
    1b48:	92 e0       	ldi	r25, 0x02	; 2
    1b4a:	0f 91       	pop	r16

}
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	f2 c5       	rjmp	.+3044   	; 0x2736 <draw_sprite>

00001b52 <grenades_pickup_title>:
	const int grenades_height = 4;

	init_sprite( &grenades, 70,38,grenades_width,grenades_height, bitmap_grenades );
	grenades.is_visible = 1;
	grenades_prt->is_visible = 1;
	draw_sprite( &grenades );
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15

}

void grenades_pickup_title() {
    1b56:	0f 93       	push	r16
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	6d 97       	sbiw	r28, 0x1d	; 29
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
	// Draw the grenades into the infromation bar
	byte bitmap_grenades_tool[] = {
    1b6c:	88 e0       	ldi	r24, 0x08	; 8
    1b6e:	e0 e4       	ldi	r30, 0x40	; 64
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
    1b72:	de 01       	movw	r26, r28
    1b74:	56 96       	adiw	r26, 0x16	; 22
    1b76:	01 90       	ld	r0, Z+
    1b78:	0d 92       	st	X+, r0
    1b7a:	8a 95       	dec	r24
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <grenades_pickup_title+0x24>
	const int grenades_tool_width = 8;
	const int grenades_tool_height = 8;

	Sprite grenades_tool;

	init_sprite( &grenades_tool, 59, 2, grenades_tool_width, grenades_tool_height, bitmap_grenades_tool);
    1b7e:	46 e1       	ldi	r20, 0x16	; 22
    1b80:	e4 2e       	mov	r14, r20
    1b82:	f1 2c       	mov	r15, r1
    1b84:	ec 0e       	add	r14, r28
    1b86:	fd 1e       	adc	r15, r29
    1b88:	08 e0       	ldi	r16, 0x08	; 8
    1b8a:	28 e0       	ldi	r18, 0x08	; 8
    1b8c:	42 e0       	ldi	r20, 0x02	; 2
    1b8e:	6b e3       	ldi	r22, 0x3B	; 59
    1b90:	ce 01       	movw	r24, r28
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	a0 d5       	rcall	.+2880   	; 0x26d6 <init_sprite>
    1b96:	ce 01       	movw	r24, r28
	draw_sprite( &grenades_tool );
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	cd d5       	rcall	.+2970   	; 0x2736 <draw_sprite>
    1b9c:	80 91 15 01 	lds	r24, 0x0115

	sprintf(g, "%d", grenade_count);
    1ba0:	8f 93       	push	r24
    1ba2:	80 91 14 01 	lds	r24, 0x0114
    1ba6:	8f 93       	push	r24
    1ba8:	88 e8       	ldi	r24, 0x88	; 136
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	8f ec       	ldi	r24, 0xCF	; 207
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <sprintf>
    1bbc:	43 e0       	ldi	r20, 0x03	; 3
    1bbe:	64 e4       	ldi	r22, 0x44	; 68
	draw_string(g, 68, 3);
    1bc0:	8f ec       	ldi	r24, 0xCF	; 207
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	25 d5       	rcall	.+2634   	; 0x2610 <draw_string>
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	6d 96       	adiw	r28, 0x1d	; 29
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli

}
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	08 95       	ret

00001bea <pickup_granades>:
    1bea:	2f 92       	push	r2
    1bec:	3f 92       	push	r3
    1bee:	4f 92       	push	r4

void pickup_granades() {
    1bf0:	5f 92       	push	r5
    1bf2:	6f 92       	push	r6
    1bf4:	7f 92       	push	r7
    1bf6:	8f 92       	push	r8
    1bf8:	9f 92       	push	r9
    1bfa:	af 92       	push	r10
    1bfc:	bf 92       	push	r11
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <pickup_granades+0x26>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <pickup_granades+0x28>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <pickup_granades+0x2a>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
	if (
			( hero.x > grenades_prt->x && hero.y > grenades_prt->y && hero.x < grenades_prt->x + 4 && hero.y < grenades_prt->y + 4 )||
    1c18:	80 90 c4 01 	lds	r8, 0x01C4
    1c1c:	90 90 c5 01 	lds	r9, 0x01C5
    1c20:	a0 90 c6 01 	lds	r10, 0x01C6
    1c24:	b0 90 c7 01 	lds	r11, 0x01C7
    1c28:	80 91 1c 01 	lds	r24, 0x011C
    1c2c:	90 91 1d 01 	lds	r25, 0x011D
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	dc 01       	movw	r26, r24
    1c36:	cd 90       	ld	r12, X+
    1c38:	dd 90       	ld	r13, X+
    1c3a:	ed 90       	ld	r14, X+
    1c3c:	fc 90       	ld	r15, X
	draw_string(g, 68, 3);

}

void pickup_granades() {
	if (
    1c3e:	a7 01       	movw	r20, r14
    1c40:	96 01       	movw	r18, r12
    1c42:	c5 01       	movw	r24, r10
    1c44:	b4 01       	movw	r22, r8
    1c46:	52 d2       	rcall	.+1188   	; 0x20ec <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <pickup_granades+0x64>
    1c4c:	39 c0       	rjmp	.+114    	; 0x1cc0 <pickup_granades+0xd6>
    1c4e:	40 90 c8 01 	lds	r4, 0x01C8
			( hero.x > grenades_prt->x && hero.y > grenades_prt->y && hero.x < grenades_prt->x + 4 && hero.y < grenades_prt->y + 4 )||
    1c52:	50 90 c9 01 	lds	r5, 0x01C9
    1c56:	60 90 ca 01 	lds	r6, 0x01CA
    1c5a:	70 90 cb 01 	lds	r7, 0x01CB
    1c5e:	ad 81       	ldd	r26, Y+5	; 0x05
    1c60:	be 81       	ldd	r27, Y+6	; 0x06
    1c62:	14 96       	adiw	r26, 0x04	; 4
    1c64:	8d 91       	ld	r24, X+
    1c66:	9d 91       	ld	r25, X+
    1c68:	0d 90       	ld	r0, X+
    1c6a:	bc 91       	ld	r27, X
    1c6c:	a0 2d       	mov	r26, r0
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	ab 83       	std	Y+3, r26	; 0x03
    1c74:	bc 83       	std	Y+4, r27	; 0x04
    1c76:	9c 01       	movw	r18, r24
    1c78:	ad 01       	movw	r20, r26
    1c7a:	c3 01       	movw	r24, r6
    1c7c:	b2 01       	movw	r22, r4
    1c7e:	36 d2       	rcall	.+1132   	; 0x20ec <__gesf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	f4 f4       	brge	.+60     	; 0x1cc0 <pickup_granades+0xd6>
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	50 e4       	ldi	r21, 0x40	; 64
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	b6 01       	movw	r22, r12
    1c90:	13 d1       	rcall	.+550    	; 0x1eb8 <__addsf3>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	c5 01       	movw	r24, r10
    1c98:	b4 01       	movw	r22, r8
    1c9a:	72 d1       	rcall	.+740    	; 0x1f80 <__cmpsf2>
    1c9c:	87 ff       	sbrs	r24, 7
    1c9e:	10 c0       	rjmp	.+32     	; 0x1cc0 <pickup_granades+0xd6>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	50 e4       	ldi	r21, 0x40	; 64
    1ca8:	69 81       	ldd	r22, Y+1	; 0x01
    1caa:	7a 81       	ldd	r23, Y+2	; 0x02
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	03 d1       	rcall	.+518    	; 0x1eb8 <__addsf3>
    1cb2:	9b 01       	movw	r18, r22
    1cb4:	ac 01       	movw	r20, r24
    1cb6:	c3 01       	movw	r24, r6
    1cb8:	b2 01       	movw	r22, r4
    1cba:	62 d1       	rcall	.+708    	; 0x1f80 <__cmpsf2>
    1cbc:	87 fd       	sbrc	r24, 7
    1cbe:	4d c0       	rjmp	.+154    	; 0x1d5a <pickup_granades+0x170>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e4       	ldi	r21, 0x40	; 64
    1cc8:	c5 01       	movw	r24, r10
    1cca:	b4 01       	movw	r22, r8
			( hero.x + 2 > grenades_prt->x && hero.y + 2 > grenades_prt->y  && hero.x + 2 < grenades_prt->x + 4 && hero.y + 2 < grenades_prt->y + 4)
    1ccc:	f5 d0       	rcall	.+490    	; 0x1eb8 <__addsf3>
    1cce:	1b 01       	movw	r2, r22
    1cd0:	8c 01       	movw	r16, r24
    1cd2:	a7 01       	movw	r20, r14
    1cd4:	96 01       	movw	r18, r12
    1cd6:	73 2d       	mov	r23, r3
    1cd8:	91 2f       	mov	r25, r17
    1cda:	08 d2       	rcall	.+1040   	; 0x20ec <__gesf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	0c f0       	brlt	.+2      	; 0x1ce2 <pickup_granades+0xf8>

}

void pickup_granades() {
	if (
			( hero.x > grenades_prt->x && hero.y > grenades_prt->y && hero.x < grenades_prt->x + 4 && hero.y < grenades_prt->y + 4 )||
    1ce0:	54 c0       	rjmp	.+168    	; 0x1d8a <pickup_granades+0x1a0>
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e4       	ldi	r21, 0x40	; 64
    1cea:	60 91 c8 01 	lds	r22, 0x01C8
    1cee:	70 91 c9 01 	lds	r23, 0x01C9
			( hero.x + 2 > grenades_prt->x && hero.y + 2 > grenades_prt->y  && hero.x + 2 < grenades_prt->x + 4 && hero.y + 2 < grenades_prt->y + 4)
    1cf2:	80 91 ca 01 	lds	r24, 0x01CA
    1cf6:	90 91 cb 01 	lds	r25, 0x01CB
    1cfa:	de d0       	rcall	.+444    	; 0x1eb8 <__addsf3>
    1cfc:	2b 01       	movw	r4, r22
    1cfe:	3c 01       	movw	r6, r24
    1d00:	ed 81       	ldd	r30, Y+5	; 0x05
    1d02:	fe 81       	ldd	r31, Y+6	; 0x06
    1d04:	84 80       	ldd	r8, Z+4	; 0x04
    1d06:	95 80       	ldd	r9, Z+5	; 0x05
    1d08:	a6 80       	ldd	r10, Z+6	; 0x06
    1d0a:	b7 80       	ldd	r11, Z+7	; 0x07
    1d0c:	a5 01       	movw	r20, r10
    1d0e:	94 01       	movw	r18, r8
    1d10:	75 2d       	mov	r23, r5
    1d12:	97 2d       	mov	r25, r7
    1d14:	eb d1       	rcall	.+982    	; 0x20ec <__gesf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	c4 f5       	brge	.+112    	; 0x1d8a <pickup_granades+0x1a0>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	50 e4       	ldi	r21, 0x40	; 64
    1d22:	c7 01       	movw	r24, r14
    1d24:	b6 01       	movw	r22, r12
    1d26:	c8 d0       	rcall	.+400    	; 0x1eb8 <__addsf3>
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	62 2d       	mov	r22, r2
    1d2e:	73 2d       	mov	r23, r3
    1d30:	80 2f       	mov	r24, r16
    1d32:	91 2f       	mov	r25, r17
    1d34:	25 d1       	rcall	.+586    	; 0x1f80 <__cmpsf2>
    1d36:	87 ff       	sbrs	r24, 7
    1d38:	28 c0       	rjmp	.+80     	; 0x1d8a <pickup_granades+0x1a0>
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	50 e4       	ldi	r21, 0x40	; 64
    1d42:	c5 01       	movw	r24, r10
    1d44:	b4 01       	movw	r22, r8
    1d46:	b8 d0       	rcall	.+368    	; 0x1eb8 <__addsf3>
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	64 2d       	mov	r22, r4
    1d4e:	75 2d       	mov	r23, r5
    1d50:	86 2d       	mov	r24, r6
    1d52:	97 2d       	mov	r25, r7
    1d54:	15 d1       	rcall	.+554    	; 0x1f80 <__cmpsf2>
    1d56:	87 ff       	sbrs	r24, 7
    1d58:	18 c0       	rjmp	.+48     	; 0x1d8a <pickup_granades+0x1a0>
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	90 93 97 01 	sts	0x0197, r25
    1d62:	80 93 96 01 	sts	0x0196, r24
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a4 eb       	ldi	r26, 0xB4	; 180
    1d6c:	b2 e4       	ldi	r27, 0x42	; 66
    1d6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d70:	fe 81       	ldd	r31, Y+6	; 0x06
    1d72:	80 83       	st	Z, r24
    1d74:	91 83       	std	Z+1, r25	; 0x01
				) {
		grenades_pickup = 1;
    1d76:	a2 83       	std	Z+2, r26	; 0x02
    1d78:	b3 83       	std	Z+3, r27	; 0x03
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a8 e4       	ldi	r26, 0x48	; 72
    1d80:	b2 e4       	ldi	r27, 0x42	; 66
		grenades_prt->x = 90;
    1d82:	84 83       	std	Z+4, r24	; 0x04
    1d84:	95 83       	std	Z+5, r25	; 0x05
    1d86:	a6 83       	std	Z+6, r26	; 0x06
    1d88:	b7 83       	std	Z+7, r27	; 0x07
    1d8a:	26 96       	adiw	r28, 0x06	; 6
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
		grenades_prt->y = 50;
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
	}
}
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	9f 90       	pop	r9
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	5f 90       	pop	r5
    1db4:	4f 90       	pop	r4
    1db6:	3f 90       	pop	r3
    1db8:	2f 90       	pop	r2
    1dba:	08 95       	ret

00001dbc <bang_setup>:
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	56 e1       	ldi	r21, 0x16	; 22
    1dc4:	e5 2e       	mov	r14, r21
    1dc6:	51 e0       	ldi	r21, 0x01	; 1
    1dc8:	f5 2e       	mov	r15, r21
    1dca:	04 e0       	ldi	r16, 0x04	; 4
    1dcc:	24 e0       	ldi	r18, 0x04	; 4
    1dce:	46 ef       	ldi	r20, 0xF6	; 246
    1dd0:	66 ef       	ldi	r22, 0xF6	; 246
    1dd2:	81 e8       	ldi	r24, 0x81	; 129
    1dd4:	92 e0       	ldi	r25, 0x02	; 2
    1dd6:	7f d4       	rcall	.+2302   	; 0x26d6 <init_sprite>

void bang_setup() {
	init_sprite( &bomb, -10,-10,4,4, bitmap_grenades );
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
	bomb.is_visible = 1;
    1dda:	80 93 8b 02 	sts	0x028B, r24
    1dde:	e0 91 1c 01 	lds	r30, 0x011C
	grenades_prt->is_visible = 1;
    1de2:	f0 91 1d 01 	lds	r31, 0x011D
    1de6:	82 87       	std	Z+10, r24	; 0x0a
    1de8:	81 e8       	ldi	r24, 0x81	; 129
	draw_sprite( &bomb );
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	0f 91       	pop	r16
}
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	a1 c4       	rjmp	.+2370   	; 0x2736 <draw_sprite>

00001df4 <draw_granades>:

void bang_setup() {
	init_sprite( &bomb, -10,-10,4,4, bitmap_grenades );
	bomb.is_visible = 1;
	grenades_prt->is_visible = 1;
	draw_sprite( &bomb );
    1df4:	80 91 96 01 	lds	r24, 0x0196
}

void draw_granades() {
	if ( grenades_pickup == 1 && grenade_count > 0) {
    1df8:	90 91 97 01 	lds	r25, 0x0197
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	69 f4       	brne	.+26     	; 0x1e1a <draw_granades+0x26>
    1e00:	80 91 14 01 	lds	r24, 0x0114
    1e04:	90 91 15 01 	lds	r25, 0x0115
    1e08:	18 16       	cp	r1, r24
    1e0a:	19 06       	cpc	r1, r25
    1e0c:	34 f4       	brge	.+12     	; 0x1e1a <draw_granades+0x26>
		grenades_pickup_title();
    1e0e:	a1 de       	rcall	.-702    	; 0x1b52 <grenades_pickup_title>
    1e10:	80 91 1c 01 	lds	r24, 0x011C
		draw_sprite(grenades_prt);
    1e14:	90 91 1d 01 	lds	r25, 0x011D
    1e18:	8e d4       	rcall	.+2332   	; 0x2736 <draw_sprite>
    1e1a:	80 91 94 01 	lds	r24, 0x0194
	}
	if ( grenade_drop ) {
    1e1e:	90 91 95 01 	lds	r25, 0x0195
    1e22:	89 2b       	or	r24, r25
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <draw_granades+0x3c>
    1e26:	80 91 1a 01 	lds	r24, 0x011A
		draw_sprite (bomb_prt );
    1e2a:	90 91 1b 01 	lds	r25, 0x011B
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <draw_granades+0x44>
    1e30:	80 91 1c 01 	lds	r24, 0x011C
	}
	else {
		draw_sprite(grenades_prt);
    1e34:	90 91 1d 01 	lds	r25, 0x011D
    1e38:	7e c4       	rjmp	.+2300   	; 0x2736 <draw_sprite>

00001e3a <granade_use>:
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	80 91 92 01 	lds	r24, 0x0192
	}
}

void granade_use() {
	if ( in_pit == 0 && grenades_pickup == 1 &&  grenade_count > 0) {
    1e42:	90 91 93 01 	lds	r25, 0x0193
    1e46:	89 2b       	or	r24, r25
    1e48:	99 f5       	brne	.+102    	; 0x1eb0 <granade_use+0x76>
    1e4a:	20 91 96 01 	lds	r18, 0x0196
    1e4e:	30 91 97 01 	lds	r19, 0x0197
    1e52:	21 30       	cpi	r18, 0x01	; 1
    1e54:	31 05       	cpc	r19, r1
    1e56:	61 f5       	brne	.+88     	; 0x1eb0 <granade_use+0x76>
    1e58:	80 91 14 01 	lds	r24, 0x0114
    1e5c:	90 91 15 01 	lds	r25, 0x0115
    1e60:	18 16       	cp	r1, r24
    1e62:	19 06       	cpc	r1, r25
    1e64:	2c f5       	brge	.+74     	; 0x1eb0 <granade_use+0x76>
		if ( pressed( SW0 ) && pressed( SW1 ) ) {
    1e66:	18 9b       	sbis	0x03, 0	; 3
    1e68:	23 c0       	rjmp	.+70     	; 0x1eb0 <granade_use+0x76>
    1e6a:	19 9b       	sbis	0x03, 1	; 3
    1e6c:	21 c0       	rjmp	.+66     	; 0x1eb0 <granade_use+0x76>
			grenade_count = grenade_count - 1;
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	90 93 15 01 	sts	0x0115, r25
    1e74:	80 93 14 01 	sts	0x0114, r24
			bomb_prt->x = hero_prt->x;
    1e78:	e0 91 1a 01 	lds	r30, 0x011A
    1e7c:	f0 91 1b 01 	lds	r31, 0x011B
    1e80:	c0 91 05 01 	lds	r28, 0x0105
    1e84:	d0 91 06 01 	lds	r29, 0x0106
    1e88:	88 81       	ld	r24, Y
    1e8a:	99 81       	ldd	r25, Y+1	; 0x01
    1e8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e8e:	bb 81       	ldd	r27, Y+3	; 0x03
    1e90:	80 83       	st	Z, r24
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	a2 83       	std	Z+2, r26	; 0x02
    1e96:	b3 83       	std	Z+3, r27	; 0x03
			bomb_prt->y = hero_prt->y;
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	ae 81       	ldd	r26, Y+6	; 0x06
    1e9e:	bf 81       	ldd	r27, Y+7	; 0x07
    1ea0:	84 83       	std	Z+4, r24	; 0x04
    1ea2:	95 83       	std	Z+5, r25	; 0x05
    1ea4:	a6 83       	std	Z+6, r26	; 0x06
    1ea6:	b7 83       	std	Z+7, r27	; 0x07
			grenade_drop = 1;
    1ea8:	30 93 95 01 	sts	0x0195, r19
    1eac:	20 93 94 01 	sts	0x0194, r18

		}

	}
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <__subsf3>:
    1eb6:	50 58       	subi	r21, 0x80	; 128

00001eb8 <__addsf3>:
    1eb8:	bb 27       	eor	r27, r27
    1eba:	aa 27       	eor	r26, r26
    1ebc:	0e d0       	rcall	.+28     	; 0x1eda <__addsf3x>
    1ebe:	dc c0       	rjmp	.+440    	; 0x2078 <__fp_round>
    1ec0:	cd d0       	rcall	.+410    	; 0x205c <__fp_pscA>
    1ec2:	30 f0       	brcs	.+12     	; 0x1ed0 <__addsf3+0x18>
    1ec4:	d2 d0       	rcall	.+420    	; 0x206a <__fp_pscB>
    1ec6:	20 f0       	brcs	.+8      	; 0x1ed0 <__addsf3+0x18>
    1ec8:	31 f4       	brne	.+12     	; 0x1ed6 <__addsf3+0x1e>
    1eca:	9f 3f       	cpi	r25, 0xFF	; 255
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <__addsf3+0x1a>
    1ece:	1e f4       	brtc	.+6      	; 0x1ed6 <__addsf3+0x1e>
    1ed0:	c2 c0       	rjmp	.+388    	; 0x2056 <__fp_nan>
    1ed2:	0e f4       	brtc	.+2      	; 0x1ed6 <__addsf3+0x1e>
    1ed4:	e0 95       	com	r30
    1ed6:	e7 fb       	bst	r30, 7
    1ed8:	b8 c0       	rjmp	.+368    	; 0x204a <__fp_inf>

00001eda <__addsf3x>:
    1eda:	e9 2f       	mov	r30, r25
    1edc:	de d0       	rcall	.+444    	; 0x209a <__fp_split3>
    1ede:	80 f3       	brcs	.-32     	; 0x1ec0 <__addsf3+0x8>
    1ee0:	ba 17       	cp	r27, r26
    1ee2:	62 07       	cpc	r22, r18
    1ee4:	73 07       	cpc	r23, r19
    1ee6:	84 07       	cpc	r24, r20
    1ee8:	95 07       	cpc	r25, r21
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <__addsf3x+0x18>
    1eec:	71 f4       	brne	.+28     	; 0x1f0a <__addsf3x+0x30>
    1eee:	9e f5       	brtc	.+102    	; 0x1f56 <__addsf3x+0x7c>
    1ef0:	f6 c0       	rjmp	.+492    	; 0x20de <__fp_zero>
    1ef2:	0e f4       	brtc	.+2      	; 0x1ef6 <__addsf3x+0x1c>
    1ef4:	e0 95       	com	r30
    1ef6:	0b 2e       	mov	r0, r27
    1ef8:	ba 2f       	mov	r27, r26
    1efa:	a0 2d       	mov	r26, r0
    1efc:	0b 01       	movw	r0, r22
    1efe:	b9 01       	movw	r22, r18
    1f00:	90 01       	movw	r18, r0
    1f02:	0c 01       	movw	r0, r24
    1f04:	ca 01       	movw	r24, r20
    1f06:	a0 01       	movw	r20, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	ff 27       	eor	r31, r31
    1f0c:	59 1b       	sub	r21, r25
    1f0e:	99 f0       	breq	.+38     	; 0x1f36 <__addsf3x+0x5c>
    1f10:	59 3f       	cpi	r21, 0xF9	; 249
    1f12:	50 f4       	brcc	.+20     	; 0x1f28 <__addsf3x+0x4e>
    1f14:	50 3e       	cpi	r21, 0xE0	; 224
    1f16:	68 f1       	brcs	.+90     	; 0x1f72 <__addsf3x+0x98>
    1f18:	1a 16       	cp	r1, r26
    1f1a:	f0 40       	sbci	r31, 0x00	; 0
    1f1c:	a2 2f       	mov	r26, r18
    1f1e:	23 2f       	mov	r18, r19
    1f20:	34 2f       	mov	r19, r20
    1f22:	44 27       	eor	r20, r20
    1f24:	58 5f       	subi	r21, 0xF8	; 248
    1f26:	f3 cf       	rjmp	.-26     	; 0x1f0e <__addsf3x+0x34>
    1f28:	46 95       	lsr	r20
    1f2a:	37 95       	ror	r19
    1f2c:	27 95       	ror	r18
    1f2e:	a7 95       	ror	r26
    1f30:	f0 40       	sbci	r31, 0x00	; 0
    1f32:	53 95       	inc	r21
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__addsf3x+0x4e>
    1f36:	7e f4       	brtc	.+30     	; 0x1f56 <__addsf3x+0x7c>
    1f38:	1f 16       	cp	r1, r31
    1f3a:	ba 0b       	sbc	r27, r26
    1f3c:	62 0b       	sbc	r22, r18
    1f3e:	73 0b       	sbc	r23, r19
    1f40:	84 0b       	sbc	r24, r20
    1f42:	ba f0       	brmi	.+46     	; 0x1f72 <__addsf3x+0x98>
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	a1 f0       	breq	.+40     	; 0x1f70 <__addsf3x+0x96>
    1f48:	ff 0f       	add	r31, r31
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	66 1f       	adc	r22, r22
    1f4e:	77 1f       	adc	r23, r23
    1f50:	88 1f       	adc	r24, r24
    1f52:	c2 f7       	brpl	.-16     	; 0x1f44 <__addsf3x+0x6a>
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <__addsf3x+0x98>
    1f56:	ba 0f       	add	r27, r26
    1f58:	62 1f       	adc	r22, r18
    1f5a:	73 1f       	adc	r23, r19
    1f5c:	84 1f       	adc	r24, r20
    1f5e:	48 f4       	brcc	.+18     	; 0x1f72 <__addsf3x+0x98>
    1f60:	87 95       	ror	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	b7 95       	ror	r27
    1f68:	f7 95       	ror	r31
    1f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <__addsf3x+0x96>
    1f6e:	b3 cf       	rjmp	.-154    	; 0x1ed6 <__addsf3+0x1e>
    1f70:	93 95       	inc	r25
    1f72:	88 0f       	add	r24, r24
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <__addsf3x+0x9e>
    1f76:	99 27       	eor	r25, r25
    1f78:	ee 0f       	add	r30, r30
    1f7a:	97 95       	ror	r25
    1f7c:	87 95       	ror	r24
    1f7e:	08 95       	ret

00001f80 <__cmpsf2>:
    1f80:	40 d0       	rcall	.+128    	; 0x2002 <__fp_cmp>
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <__cmpsf2+0x6>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	08 95       	ret

00001f88 <__floatunsisf>:
    1f88:	e8 94       	clt
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <__floatsisf+0x12>

00001f8c <__floatsisf>:
    1f8c:	97 fb       	bst	r25, 7
    1f8e:	3e f4       	brtc	.+14     	; 0x1f9e <__floatsisf+0x12>
    1f90:	90 95       	com	r25
    1f92:	80 95       	com	r24
    1f94:	70 95       	com	r23
    1f96:	61 95       	neg	r22
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	99 23       	and	r25, r25
    1fa0:	a9 f0       	breq	.+42     	; 0x1fcc <__floatsisf+0x40>
    1fa2:	f9 2f       	mov	r31, r25
    1fa4:	96 e9       	ldi	r25, 0x96	; 150
    1fa6:	bb 27       	eor	r27, r27
    1fa8:	93 95       	inc	r25
    1faa:	f6 95       	lsr	r31
    1fac:	87 95       	ror	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	f1 11       	cpse	r31, r1
    1fb6:	f8 cf       	rjmp	.-16     	; 0x1fa8 <__floatsisf+0x1c>
    1fb8:	fa f4       	brpl	.+62     	; 0x1ff8 <__floatsisf+0x6c>
    1fba:	bb 0f       	add	r27, r27
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <__floatsisf+0x36>
    1fbe:	60 ff       	sbrs	r22, 0
    1fc0:	1b c0       	rjmp	.+54     	; 0x1ff8 <__floatsisf+0x6c>
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <__floatsisf+0x6c>
    1fcc:	88 23       	and	r24, r24
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <__floatsisf+0x48>
    1fd0:	96 e9       	ldi	r25, 0x96	; 150
    1fd2:	11 c0       	rjmp	.+34     	; 0x1ff6 <__floatsisf+0x6a>
    1fd4:	77 23       	and	r23, r23
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <__floatsisf+0x54>
    1fd8:	9e e8       	ldi	r25, 0x8E	; 142
    1fda:	87 2f       	mov	r24, r23
    1fdc:	76 2f       	mov	r23, r22
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <__floatsisf+0x5e>
    1fe0:	66 23       	and	r22, r22
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <__floatsisf+0x74>
    1fe4:	96 e8       	ldi	r25, 0x86	; 134
    1fe6:	86 2f       	mov	r24, r22
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	2a f0       	brmi	.+10     	; 0x1ff8 <__floatsisf+0x6c>
    1fee:	9a 95       	dec	r25
    1ff0:	66 0f       	add	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	da f7       	brpl	.-10     	; 0x1fee <__floatsisf+0x62>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	96 95       	lsr	r25
    1ffc:	87 95       	ror	r24
    1ffe:	97 f9       	bld	r25, 7
    2000:	08 95       	ret

00002002 <__fp_cmp>:
    2002:	99 0f       	add	r25, r25
    2004:	00 08       	sbc	r0, r0
    2006:	55 0f       	add	r21, r21
    2008:	aa 0b       	sbc	r26, r26
    200a:	e0 e8       	ldi	r30, 0x80	; 128
    200c:	fe ef       	ldi	r31, 0xFE	; 254
    200e:	16 16       	cp	r1, r22
    2010:	17 06       	cpc	r1, r23
    2012:	e8 07       	cpc	r30, r24
    2014:	f9 07       	cpc	r31, r25
    2016:	c0 f0       	brcs	.+48     	; 0x2048 <__fp_cmp+0x46>
    2018:	12 16       	cp	r1, r18
    201a:	13 06       	cpc	r1, r19
    201c:	e4 07       	cpc	r30, r20
    201e:	f5 07       	cpc	r31, r21
    2020:	98 f0       	brcs	.+38     	; 0x2048 <__fp_cmp+0x46>
    2022:	62 1b       	sub	r22, r18
    2024:	73 0b       	sbc	r23, r19
    2026:	84 0b       	sbc	r24, r20
    2028:	95 0b       	sbc	r25, r21
    202a:	39 f4       	brne	.+14     	; 0x203a <__fp_cmp+0x38>
    202c:	0a 26       	eor	r0, r26
    202e:	61 f0       	breq	.+24     	; 0x2048 <__fp_cmp+0x46>
    2030:	23 2b       	or	r18, r19
    2032:	24 2b       	or	r18, r20
    2034:	25 2b       	or	r18, r21
    2036:	21 f4       	brne	.+8      	; 0x2040 <__fp_cmp+0x3e>
    2038:	08 95       	ret
    203a:	0a 26       	eor	r0, r26
    203c:	09 f4       	brne	.+2      	; 0x2040 <__fp_cmp+0x3e>
    203e:	a1 40       	sbci	r26, 0x01	; 1
    2040:	a6 95       	lsr	r26
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	81 1d       	adc	r24, r1
    2046:	81 1d       	adc	r24, r1
    2048:	08 95       	ret

0000204a <__fp_inf>:
    204a:	97 f9       	bld	r25, 7
    204c:	9f 67       	ori	r25, 0x7F	; 127
    204e:	80 e8       	ldi	r24, 0x80	; 128
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	08 95       	ret

00002056 <__fp_nan>:
    2056:	9f ef       	ldi	r25, 0xFF	; 255
    2058:	80 ec       	ldi	r24, 0xC0	; 192
    205a:	08 95       	ret

0000205c <__fp_pscA>:
    205c:	00 24       	eor	r0, r0
    205e:	0a 94       	dec	r0
    2060:	16 16       	cp	r1, r22
    2062:	17 06       	cpc	r1, r23
    2064:	18 06       	cpc	r1, r24
    2066:	09 06       	cpc	r0, r25
    2068:	08 95       	ret

0000206a <__fp_pscB>:
    206a:	00 24       	eor	r0, r0
    206c:	0a 94       	dec	r0
    206e:	12 16       	cp	r1, r18
    2070:	13 06       	cpc	r1, r19
    2072:	14 06       	cpc	r1, r20
    2074:	05 06       	cpc	r0, r21
    2076:	08 95       	ret

00002078 <__fp_round>:
    2078:	09 2e       	mov	r0, r25
    207a:	03 94       	inc	r0
    207c:	00 0c       	add	r0, r0
    207e:	11 f4       	brne	.+4      	; 0x2084 <__fp_round+0xc>
    2080:	88 23       	and	r24, r24
    2082:	52 f0       	brmi	.+20     	; 0x2098 <__fp_round+0x20>
    2084:	bb 0f       	add	r27, r27
    2086:	40 f4       	brcc	.+16     	; 0x2098 <__fp_round+0x20>
    2088:	bf 2b       	or	r27, r31
    208a:	11 f4       	brne	.+4      	; 0x2090 <__fp_round+0x18>
    208c:	60 ff       	sbrs	r22, 0
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <__fp_round+0x20>
    2090:	6f 5f       	subi	r22, 0xFF	; 255
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f 4f       	sbci	r24, 0xFF	; 255
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	08 95       	ret

0000209a <__fp_split3>:
    209a:	57 fd       	sbrc	r21, 7
    209c:	90 58       	subi	r25, 0x80	; 128
    209e:	44 0f       	add	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	59 f0       	breq	.+22     	; 0x20ba <__fp_splitA+0x10>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <__fp_splitA+0x1a>
    20a8:	47 95       	ror	r20

000020aa <__fp_splitA>:
    20aa:	88 0f       	add	r24, r24
    20ac:	97 fb       	bst	r25, 7
    20ae:	99 1f       	adc	r25, r25
    20b0:	61 f0       	breq	.+24     	; 0x20ca <__fp_splitA+0x20>
    20b2:	9f 3f       	cpi	r25, 0xFF	; 255
    20b4:	79 f0       	breq	.+30     	; 0x20d4 <__fp_splitA+0x2a>
    20b6:	87 95       	ror	r24
    20b8:	08 95       	ret
    20ba:	12 16       	cp	r1, r18
    20bc:	13 06       	cpc	r1, r19
    20be:	14 06       	cpc	r1, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	f2 cf       	rjmp	.-28     	; 0x20a8 <__fp_split3+0xe>
    20c4:	46 95       	lsr	r20
    20c6:	f1 df       	rcall	.-30     	; 0x20aa <__fp_splitA>
    20c8:	08 c0       	rjmp	.+16     	; 0x20da <__fp_splitA+0x30>
    20ca:	16 16       	cp	r1, r22
    20cc:	17 06       	cpc	r1, r23
    20ce:	18 06       	cpc	r1, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	f1 cf       	rjmp	.-30     	; 0x20b6 <__fp_splitA+0xc>
    20d4:	86 95       	lsr	r24
    20d6:	71 05       	cpc	r23, r1
    20d8:	61 05       	cpc	r22, r1
    20da:	08 94       	sec
    20dc:	08 95       	ret

000020de <__fp_zero>:
    20de:	e8 94       	clt

000020e0 <__fp_szero>:
    20e0:	bb 27       	eor	r27, r27
    20e2:	66 27       	eor	r22, r22
    20e4:	77 27       	eor	r23, r23
    20e6:	cb 01       	movw	r24, r22
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret

000020ec <__gesf2>:
    20ec:	8a df       	rcall	.-236    	; 0x2002 <__fp_cmp>
    20ee:	08 f4       	brcc	.+2      	; 0x20f2 <__gesf2+0x6>
    20f0:	8f ef       	ldi	r24, 0xFF	; 255
    20f2:	08 95       	ret

000020f4 <refresh>:
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	e2 d2       	rcall	.+1476   	; 0x26c2 <LCDPosition>
    20fe:	c0 ed       	ldi	r28, 0xD0	; 208
    2100:	d2 e0       	ldi	r29, 0x02	; 2
    2102:	69 91       	ld	r22, Y+
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	98 d2       	rcall	.+1328   	; 0x2638 <LCDWrite>
    2108:	84 e0       	ldi	r24, 0x04	; 4
    210a:	c8 3c       	cpi	r28, 0xC8	; 200
    210c:	d8 07       	cpc	r29, r24
    210e:	c9 f7       	brne	.-14     	; 0x2102 <refresh+0xe>
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <clear>:
    2116:	e0 ed       	ldi	r30, 0xD0	; 208
    2118:	f2 e0       	ldi	r31, 0x02	; 2
    211a:	11 92       	st	Z+, r1
    211c:	84 e0       	ldi	r24, 0x04	; 4
    211e:	e8 3c       	cpi	r30, 0xC8	; 200
    2120:	f8 07       	cpc	r31, r24
    2122:	d9 f7       	brne	.-10     	; 0x211a <clear+0x4>
    2124:	08 95       	ret

00002126 <set_pixel>:
    2126:	84 35       	cpi	r24, 0x54	; 84
    2128:	00 f5       	brcc	.+64     	; 0x216a <set_pixel+0x44>
    212a:	60 33       	cpi	r22, 0x30	; 48
    212c:	f0 f4       	brcc	.+60     	; 0x216a <set_pixel+0x44>
    212e:	e6 2f       	mov	r30, r22
    2130:	e6 95       	lsr	r30
    2132:	e6 95       	lsr	r30
    2134:	e6 95       	lsr	r30
    2136:	67 70       	andi	r22, 0x07	; 7
    2138:	94 e5       	ldi	r25, 0x54	; 84
    213a:	e9 9f       	mul	r30, r25
    213c:	f0 01       	movw	r30, r0
    213e:	11 24       	eor	r1, r1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	e8 0f       	add	r30, r24
    2144:	f9 1f       	adc	r31, r25
    2146:	e0 53       	subi	r30, 0x30	; 48
    2148:	fd 4f       	sbci	r31, 0xFD	; 253
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	06 2e       	mov	r0, r22
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <set_pixel+0x2e>
    2152:	88 0f       	add	r24, r24
    2154:	0a 94       	dec	r0
    2156:	ea f7       	brpl	.-6      	; 0x2152 <set_pixel+0x2c>
    2158:	44 23       	and	r20, r20
    215a:	19 f0       	breq	.+6      	; 0x2162 <set_pixel+0x3c>
    215c:	90 81       	ld	r25, Z
    215e:	98 2b       	or	r25, r24
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <set_pixel+0x42>
    2162:	80 95       	com	r24
    2164:	90 81       	ld	r25, Z
    2166:	98 23       	and	r25, r24
    2168:	90 83       	st	Z, r25
    216a:	08 95       	ret

0000216c <draw_line>:
    216c:	2f 92       	push	r2
    216e:	3f 92       	push	r3
    2170:	4f 92       	push	r4
    2172:	5f 92       	push	r5
    2174:	6f 92       	push	r6
    2176:	7f 92       	push	r7
    2178:	8f 92       	push	r8
    217a:	9f 92       	push	r9
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	62 97       	sbiw	r28, 0x12	; 18
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	a8 2e       	mov	r10, r24
    21a2:	96 2e       	mov	r9, r22
    21a4:	84 2e       	mov	r8, r20
    21a6:	b2 2e       	mov	r11, r18
    21a8:	84 13       	cpse	r24, r20
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <draw_line+0x52>
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <draw_line+0x4c>
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	69 2d       	mov	r22, r9
    21b2:	8a 2d       	mov	r24, r10
    21b4:	b8 df       	rcall	.-144    	; 0x2126 <set_pixel>
    21b6:	93 94       	inc	r9
    21b8:	b9 14       	cp	r11, r9
    21ba:	c8 f7       	brcc	.-14     	; 0x21ae <draw_line+0x42>
    21bc:	bc c1       	rjmp	.+888    	; 0x2536 <draw_line+0x3ca>
    21be:	62 13       	cpse	r22, r18
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <draw_line+0x68>
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <draw_line+0x62>
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	69 2d       	mov	r22, r9
    21c8:	8a 2d       	mov	r24, r10
    21ca:	ad df       	rcall	.-166    	; 0x2126 <set_pixel>
    21cc:	a3 94       	inc	r10
    21ce:	8a 14       	cp	r8, r10
    21d0:	c8 f7       	brcc	.-14     	; 0x21c4 <draw_line+0x58>
    21d2:	b1 c1       	rjmp	.+866    	; 0x2536 <draw_line+0x3ca>
    21d4:	62 2f       	mov	r22, r18
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	d5 de       	rcall	.-598    	; 0x1f88 <__floatunsisf>
    21de:	6b 01       	movw	r12, r22
    21e0:	7c 01       	movw	r14, r24
    21e2:	69 2d       	mov	r22, r9
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	d0 de       	rcall	.-608    	; 0x1f8c <__floatsisf>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	c7 01       	movw	r24, r14
    21f2:	b6 01       	movw	r22, r12
    21f4:	60 de       	rcall	.-832    	; 0x1eb6 <__subsf3>
    21f6:	1b 01       	movw	r2, r22
    21f8:	2c 01       	movw	r4, r24
    21fa:	68 2d       	mov	r22, r8
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	c2 de       	rcall	.-636    	; 0x1f88 <__floatunsisf>
    2204:	6b 01       	movw	r12, r22
    2206:	7c 01       	movw	r14, r24
    2208:	6a 2d       	mov	r22, r10
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	bd de       	rcall	.-646    	; 0x1f8c <__floatsisf>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	c7 01       	movw	r24, r14
    2218:	b6 01       	movw	r22, r12
    221a:	4d de       	rcall	.-870    	; 0x1eb6 <__subsf3>
    221c:	3b 01       	movw	r6, r22
    221e:	8c 01       	movw	r16, r24
    2220:	76 2f       	mov	r23, r22
    2222:	27 2f       	mov	r18, r23
    2224:	37 2d       	mov	r19, r7
    2226:	40 2f       	mov	r20, r16
    2228:	51 2f       	mov	r21, r17
    222a:	62 2d       	mov	r22, r2
    222c:	73 2d       	mov	r23, r3
    222e:	84 2d       	mov	r24, r4
    2230:	95 2d       	mov	r25, r5
    2232:	7d d3       	rcall	.+1786   	; 0x292e <__divsf3>
    2234:	6b 01       	movw	r12, r22
    2236:	7c 01       	movw	r14, r24
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	7d 2d       	mov	r23, r13
    2242:	9f 2d       	mov	r25, r15
    2244:	a8 14       	cp	r10, r8
    2246:	90 f5       	brcc	.+100    	; 0x22ac <draw_line+0x140>
    2248:	51 df       	rcall	.-350    	; 0x20ec <__gesf2>
    224a:	18 16       	cp	r1, r24
    224c:	0c f4       	brge	.+2      	; 0x2250 <draw_line+0xe4>
    224e:	4a c1       	rjmp	.+660    	; 0x24e4 <draw_line+0x378>
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	6c 2d       	mov	r22, r12
    225a:	7d 2d       	mov	r23, r13
    225c:	8e 2d       	mov	r24, r14
    225e:	9f 2d       	mov	r25, r15
    2260:	8f de       	rcall	.-738    	; 0x1f80 <__cmpsf2>
    2262:	18 16       	cp	r1, r24
    2264:	5c f0       	brlt	.+22     	; 0x227c <draw_line+0x110>
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	6c 2d       	mov	r22, r12
    226e:	7d 2d       	mov	r23, r13
    2270:	8e 2d       	mov	r24, r14
    2272:	9f 2d       	mov	r25, r15
    2274:	3b df       	rcall	.-394    	; 0x20ec <__gesf2>
    2276:	18 16       	cp	r1, r24
    2278:	0c f4       	brge	.+2      	; 0x227c <draw_line+0x110>
    227a:	16 c1       	rjmp	.+556    	; 0x24a8 <draw_line+0x33c>
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	6c 2d       	mov	r22, r12
    2284:	7d 2d       	mov	r23, r13
    2286:	8e 2d       	mov	r24, r14
    2288:	9f 2d       	mov	r25, r15
    228a:	7a de       	rcall	.-780    	; 0x1f80 <__cmpsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f4       	brge	.+2      	; 0x2292 <draw_line+0x126>
    2290:	2c c1       	rjmp	.+600    	; 0x24ea <draw_line+0x37e>
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f eb       	ldi	r21, 0xBF	; 191
    229a:	6c 2d       	mov	r22, r12
    229c:	7d 2d       	mov	r23, r13
    229e:	8e 2d       	mov	r24, r14
    22a0:	9f 2d       	mov	r25, r15
    22a2:	24 df       	rcall	.-440    	; 0x20ec <__gesf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	0c f4       	brge	.+2      	; 0x22aa <draw_line+0x13e>
    22a8:	02 c1       	rjmp	.+516    	; 0x24ae <draw_line+0x342>
    22aa:	1f c1       	rjmp	.+574    	; 0x24ea <draw_line+0x37e>
    22ac:	1f df       	rcall	.-450    	; 0x20ec <__gesf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	0c f4       	brge	.+2      	; 0x22b4 <draw_line+0x148>
    22b2:	20 c1       	rjmp	.+576    	; 0x24f4 <draw_line+0x388>
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	6c 2d       	mov	r22, r12
    22be:	7d 2d       	mov	r23, r13
    22c0:	8e 2d       	mov	r24, r14
    22c2:	9f 2d       	mov	r25, r15
    22c4:	5d de       	rcall	.-838    	; 0x1f80 <__cmpsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	5c f0       	brlt	.+22     	; 0x22e0 <draw_line+0x174>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	a9 01       	movw	r20, r18
    22d0:	6c 2d       	mov	r22, r12
    22d2:	7d 2d       	mov	r23, r13
    22d4:	8e 2d       	mov	r24, r14
    22d6:	9f 2d       	mov	r25, r15
    22d8:	09 df       	rcall	.-494    	; 0x20ec <__gesf2>
    22da:	18 16       	cp	r1, r24
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <draw_line+0x174>
    22de:	ec c0       	rjmp	.+472    	; 0x24b8 <draw_line+0x34c>
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	a9 01       	movw	r20, r18
    22e6:	6c 2d       	mov	r22, r12
    22e8:	7d 2d       	mov	r23, r13
    22ea:	8e 2d       	mov	r24, r14
    22ec:	9f 2d       	mov	r25, r15
    22ee:	48 de       	rcall	.-880    	; 0x1f80 <__cmpsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f4       	brge	.+2      	; 0x22f6 <draw_line+0x18a>
    22f4:	04 c1       	rjmp	.+520    	; 0x24fe <draw_line+0x392>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f eb       	ldi	r21, 0xBF	; 191
    22fe:	6c 2d       	mov	r22, r12
    2300:	7d 2d       	mov	r23, r13
    2302:	8e 2d       	mov	r24, r14
    2304:	9f 2d       	mov	r25, r15
    2306:	f2 de       	rcall	.-540    	; 0x20ec <__gesf2>
    2308:	18 16       	cp	r1, r24
    230a:	0c f4       	brge	.+2      	; 0x230e <draw_line+0x1a2>
    230c:	da c0       	rjmp	.+436    	; 0x24c2 <draw_line+0x356>
    230e:	a2 e0       	ldi	r26, 0x02	; 2
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	f2 c0       	rjmp	.+484    	; 0x24f8 <draw_line+0x38c>
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	03 97       	sbiw	r24, 0x03	; 3
    231a:	04 97       	sbiw	r24, 0x04	; 4
    231c:	20 f0       	brcs	.+8      	; 0x2326 <draw_line+0x1ba>
    231e:	aa 24       	eor	r10, r10
    2320:	a3 94       	inc	r10
    2322:	b1 2c       	mov	r11, r1
    2324:	03 c0       	rjmp	.+6      	; 0x232c <draw_line+0x1c0>
    2326:	aa 24       	eor	r10, r10
    2328:	aa 94       	dec	r10
    232a:	ba 2c       	mov	r11, r10
    232c:	26 01       	movw	r4, r12
    232e:	37 01       	movw	r6, r14
    2330:	77 fa       	bst	r7, 7
    2332:	70 94       	com	r7
    2334:	77 f8       	bld	r7, 7
    2336:	70 94       	com	r7
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	c7 01       	movw	r24, r14
    2340:	b6 01       	movw	r22, r12
    2342:	d4 de       	rcall	.-600    	; 0x20ec <__gesf2>
    2344:	87 fd       	sbrc	r24, 7
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <draw_line+0x1e6>
    2348:	cf 82       	std	Y+7, r12	; 0x07
    234a:	d8 86       	std	Y+8, r13	; 0x08
    234c:	e9 86       	std	Y+9, r14	; 0x09
    234e:	fa 86       	std	Y+10, r15	; 0x0a
    2350:	04 c0       	rjmp	.+8      	; 0x235a <draw_line+0x1ee>
    2352:	4f 82       	std	Y+7, r4	; 0x07
    2354:	58 86       	std	Y+8, r5	; 0x08
    2356:	69 86       	std	Y+9, r6	; 0x09
    2358:	7a 86       	std	Y+10, r7	; 0x0a
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	fa 8b       	std	Y+18, r31	; 0x12
    2360:	e9 8b       	std	Y+17, r30	; 0x11
    2362:	91 2c       	mov	r9, r1
    2364:	81 2c       	mov	r8, r1
    2366:	71 2c       	mov	r7, r1
    2368:	61 2c       	mov	r6, r1
    236a:	c5 01       	movw	r24, r10
    236c:	aa 27       	eor	r26, r26
    236e:	97 fd       	sbrc	r25, 7
    2370:	a0 95       	com	r26
    2372:	ba 2f       	mov	r27, r26
    2374:	8d 87       	std	Y+13, r24	; 0x0d
    2376:	9e 87       	std	Y+14, r25	; 0x0e
    2378:	af 87       	std	Y+15, r26	; 0x0f
    237a:	b8 8b       	std	Y+16, r27	; 0x10
    237c:	82 c0       	rjmp	.+260    	; 0x2482 <draw_line+0x316>
    237e:	ab 81       	ldd	r26, Y+3	; 0x03
    2380:	bc 81       	ldd	r27, Y+4	; 0x04
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	ab 2b       	or	r26, r27
    2386:	19 f0       	breq	.+6      	; 0x238e <draw_line+0x222>
    2388:	60 2f       	mov	r22, r16
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <draw_line+0x226>
    238e:	69 89       	ldd	r22, Y+17	; 0x11
    2390:	80 2f       	mov	r24, r16
    2392:	c9 de       	rcall	.-622    	; 0x2126 <set_pixel>
    2394:	7f 81       	ldd	r23, Y+7	; 0x07
    2396:	68 85       	ldd	r22, Y+8	; 0x08
    2398:	99 85       	ldd	r25, Y+9	; 0x09
    239a:	8a 85       	ldd	r24, Y+10	; 0x0a
    239c:	27 2f       	mov	r18, r23
    239e:	36 2f       	mov	r19, r22
    23a0:	49 2f       	mov	r20, r25
    23a2:	58 2f       	mov	r21, r24
    23a4:	d4 01       	movw	r26, r8
    23a6:	f3 01       	movw	r30, r6
    23a8:	6b 2f       	mov	r22, r27
    23aa:	78 2d       	mov	r23, r8
    23ac:	8f 2f       	mov	r24, r31
    23ae:	96 2d       	mov	r25, r6
    23b0:	83 dd       	rcall	.-1274   	; 0x1eb8 <__addsf3>
    23b2:	6b 87       	std	Y+11, r22	; 0x0b
    23b4:	7c 87       	std	Y+12, r23	; 0x0c
    23b6:	2c 01       	movw	r4, r24
    23b8:	96 2e       	mov	r9, r22
    23ba:	87 2e       	mov	r8, r23
    23bc:	78 2e       	mov	r7, r24
    23be:	65 2c       	mov	r6, r5
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	d4 01       	movw	r26, r8
    23ca:	f3 01       	movw	r30, r6
    23cc:	6b 2f       	mov	r22, r27
    23ce:	7a 2f       	mov	r23, r26
    23d0:	8f 2f       	mov	r24, r31
    23d2:	9e 2f       	mov	r25, r30
    23d4:	8b de       	rcall	.-746    	; 0x20ec <__gesf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	0c f0       	brlt	.+2      	; 0x23dc <draw_line+0x270>
    23da:	43 c0       	rjmp	.+134    	; 0x2462 <draw_line+0x2f6>
    23dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    23de:	7e 85       	ldd	r23, Y+14	; 0x0e
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	98 89       	ldd	r25, Y+16	; 0x10
    23e4:	d3 dd       	rcall	.-1114   	; 0x1f8c <__floatsisf>
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	c7 01       	movw	r24, r14
    23ec:	b6 01       	movw	r22, r12
    23ee:	33 d3       	rcall	.+1638   	; 0x2a56 <__mulsf3>
    23f0:	3b 01       	movw	r6, r22
    23f2:	4c 01       	movw	r8, r24
    23f4:	e1 e0       	ldi	r30, 0x01	; 1
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	fe 83       	std	Y+6, r31	; 0x06
    23fa:	ed 83       	std	Y+5, r30	; 0x05
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	77 2d       	mov	r23, r7
    2404:	99 2d       	mov	r25, r9
    2406:	72 de       	rcall	.-796    	; 0x20ec <__gesf2>
    2408:	18 16       	cp	r1, r24
    240a:	14 f0       	brlt	.+4      	; 0x2410 <draw_line+0x2a4>
    240c:	1e 82       	std	Y+6, r1	; 0x06
    240e:	1d 82       	std	Y+5, r1	; 0x05
    2410:	aa 24       	eor	r10, r10
    2412:	a3 94       	inc	r10
    2414:	b1 2c       	mov	r11, r1
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a9 01       	movw	r20, r18
    241c:	66 2d       	mov	r22, r6
    241e:	77 2d       	mov	r23, r7
    2420:	88 2d       	mov	r24, r8
    2422:	99 2d       	mov	r25, r9
    2424:	ad dd       	rcall	.-1190   	; 0x1f80 <__cmpsf2>
    2426:	87 fd       	sbrc	r24, 7
    2428:	02 c0       	rjmp	.+4      	; 0x242e <draw_line+0x2c2>
    242a:	a1 2c       	mov	r10, r1
    242c:	b1 2c       	mov	r11, r1
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	8a 19       	sub	r24, r10
    2434:	9b 09       	sbc	r25, r11
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	19 f4       	brne	.+6      	; 0x2440 <draw_line+0x2d4>
    243a:	0f 5f       	subi	r16, 0xFF	; 255
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <draw_line+0x2d8>
    2440:	01 50       	subi	r16, 0x01	; 1
    2442:	11 09       	sbc	r17, r1
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	bb 85       	ldd	r27, Y+11	; 0x0b
    244e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2450:	6b 2f       	mov	r22, r27
    2452:	7a 2f       	mov	r23, r26
    2454:	84 2d       	mov	r24, r4
    2456:	95 2d       	mov	r25, r5
    2458:	2e dd       	rcall	.-1444   	; 0x1eb6 <__subsf3>
    245a:	96 2e       	mov	r9, r22
    245c:	87 2e       	mov	r8, r23
    245e:	78 2e       	mov	r7, r24
    2460:	69 2e       	mov	r6, r25
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	82 15       	cp	r24, r2
    2468:	93 05       	cpc	r25, r3
    246a:	30 f4       	brcc	.+12     	; 0x2478 <draw_line+0x30c>
    246c:	a9 89       	ldd	r26, Y+17	; 0x11
    246e:	ba 89       	ldd	r27, Y+18	; 0x12
    2470:	11 96       	adiw	r26, 0x01	; 1
    2472:	ba 8b       	std	Y+18, r27	; 0x12
    2474:	a9 8b       	std	Y+17, r26	; 0x11
    2476:	05 c0       	rjmp	.+10     	; 0x2482 <draw_line+0x316>
    2478:	e9 89       	ldd	r30, Y+17	; 0x11
    247a:	fa 89       	ldd	r31, Y+18	; 0x12
    247c:	31 97       	sbiw	r30, 0x01	; 1
    247e:	fa 8b       	std	Y+18, r31	; 0x12
    2480:	e9 8b       	std	Y+17, r30	; 0x11
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	82 15       	cp	r24, r2
    2488:	93 05       	cpc	r25, r3
    248a:	38 f4       	brcc	.+14     	; 0x249a <draw_line+0x32e>
    248c:	a9 89       	ldd	r26, Y+17	; 0x11
    248e:	ba 89       	ldd	r27, Y+18	; 0x12
    2490:	2a 16       	cp	r2, r26
    2492:	3b 06       	cpc	r3, r27
    2494:	08 f0       	brcs	.+2      	; 0x2498 <draw_line+0x32c>
    2496:	73 cf       	rjmp	.-282    	; 0x237e <draw_line+0x212>
    2498:	4e c0       	rjmp	.+156    	; 0x2536 <draw_line+0x3ca>
    249a:	e9 89       	ldd	r30, Y+17	; 0x11
    249c:	fa 89       	ldd	r31, Y+18	; 0x12
    249e:	e2 15       	cp	r30, r2
    24a0:	f3 05       	cpc	r31, r3
    24a2:	08 f0       	brcs	.+2      	; 0x24a6 <draw_line+0x33a>
    24a4:	6c cf       	rjmp	.-296    	; 0x237e <draw_line+0x212>
    24a6:	47 c0       	rjmp	.+142    	; 0x2536 <draw_line+0x3ca>
    24a8:	1e 82       	std	Y+6, r1	; 0x06
    24aa:	1d 82       	std	Y+5, r1	; 0x05
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <draw_line+0x35e>
    24ae:	87 e0       	ldi	r24, 0x07	; 7
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <draw_line+0x35e>
    24b8:	a4 e0       	ldi	r26, 0x04	; 4
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	be 83       	std	Y+6, r27	; 0x06
    24be:	ad 83       	std	Y+5, r26	; 0x05
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <draw_line+0x35e>
    24c2:	e3 e0       	ldi	r30, 0x03	; 3
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	fe 83       	std	Y+6, r31	; 0x06
    24c8:	ed 83       	std	Y+5, r30	; 0x05
    24ca:	09 2d       	mov	r16, r9
    24cc:	10 e0       	ldi	r17, 0x00	; 0
    24ce:	8a 2d       	mov	r24, r10
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	28 2c       	mov	r2, r8
    24d8:	31 2c       	mov	r3, r1
    24da:	a1 e0       	ldi	r26, 0x01	; 1
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	bc 83       	std	Y+4, r27	; 0x04
    24e0:	ab 83       	std	Y+3, r26	; 0x03
    24e2:	18 cf       	rjmp	.-464    	; 0x2314 <draw_line+0x1a8>
    24e4:	e1 e0       	ldi	r30, 0x01	; 1
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	0c c0       	rjmp	.+24     	; 0x2502 <draw_line+0x396>
    24ea:	86 e0       	ldi	r24, 0x06	; 6
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	09 c0       	rjmp	.+18     	; 0x2506 <draw_line+0x39a>
    24f4:	a5 e0       	ldi	r26, 0x05	; 5
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	be 83       	std	Y+6, r27	; 0x06
    24fa:	ad 83       	std	Y+5, r26	; 0x05
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <draw_line+0x39a>
    24fe:	e2 e0       	ldi	r30, 0x02	; 2
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	fe 83       	std	Y+6, r31	; 0x06
    2504:	ed 83       	std	Y+5, r30	; 0x05
    2506:	22 2d       	mov	r18, r2
    2508:	33 2d       	mov	r19, r3
    250a:	44 2d       	mov	r20, r4
    250c:	55 2d       	mov	r21, r5
    250e:	66 2d       	mov	r22, r6
    2510:	77 2d       	mov	r23, r7
    2512:	80 2f       	mov	r24, r16
    2514:	91 2f       	mov	r25, r17
    2516:	0b d2       	rcall	.+1046   	; 0x292e <__divsf3>
    2518:	c6 2e       	mov	r12, r22
    251a:	d7 2e       	mov	r13, r23
    251c:	e8 2e       	mov	r14, r24
    251e:	f9 2e       	mov	r15, r25
    2520:	0a 2d       	mov	r16, r10
    2522:	10 e0       	ldi	r17, 0x00	; 0
    2524:	89 2d       	mov	r24, r9
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	2b 2c       	mov	r2, r11
    252e:	31 2c       	mov	r3, r1
    2530:	1c 82       	std	Y+4, r1	; 0x04
    2532:	1b 82       	std	Y+3, r1	; 0x03
    2534:	ef ce       	rjmp	.-546    	; 0x2314 <draw_line+0x1a8>
    2536:	62 96       	adiw	r28, 0x12	; 18
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	7f 90       	pop	r7
    255c:	6f 90       	pop	r6
    255e:	5f 90       	pop	r5
    2560:	4f 90       	pop	r4
    2562:	3f 90       	pop	r3
    2564:	2f 90       	pop	r2
    2566:	08 95       	ret

00002568 <draw_character>:
    2568:	7f 92       	push	r7
    256a:	8f 92       	push	r8
    256c:	9f 92       	push	r9
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	86 2e       	mov	r8, r22
    2584:	74 2e       	mov	r7, r20
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	10 e0       	ldi	r17, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	80 97       	sbiw	r24, 0x20	; 32
    258e:	25 e0       	ldi	r18, 0x05	; 5
    2590:	28 9f       	mul	r18, r24
    2592:	60 01       	movw	r12, r0
    2594:	29 9f       	mul	r18, r25
    2596:	d0 0c       	add	r13, r0
    2598:	11 24       	eor	r1, r1
    259a:	aa 24       	eor	r10, r10
    259c:	a3 94       	inc	r10
    259e:	b1 2c       	mov	r11, r1
    25a0:	1c c0       	rjmp	.+56     	; 0x25da <draw_character+0x72>
    25a2:	a5 01       	movw	r20, r10
    25a4:	0c 2e       	mov	r0, r28
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <draw_character+0x44>
    25a8:	44 0f       	add	r20, r20
    25aa:	55 1f       	adc	r21, r21
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <draw_character+0x40>
    25b0:	4e 21       	and	r20, r14
    25b2:	5f 21       	and	r21, r15
    25b4:	0c 2e       	mov	r0, r28
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <draw_character+0x54>
    25b8:	55 95       	asr	r21
    25ba:	47 95       	ror	r20
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <draw_character+0x50>
    25c0:	6c 2f       	mov	r22, r28
    25c2:	67 0d       	add	r22, r7
    25c4:	89 2d       	mov	r24, r9
    25c6:	af dd       	rcall	.-1186   	; 0x2126 <set_pixel>
    25c8:	21 96       	adiw	r28, 0x01	; 1
    25ca:	c8 30       	cpi	r28, 0x08	; 8
    25cc:	d1 05       	cpc	r29, r1
    25ce:	49 f7       	brne	.-46     	; 0x25a2 <draw_character+0x3a>
    25d0:	0f 5f       	subi	r16, 0xFF	; 255
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	05 30       	cpi	r16, 0x05	; 5
    25d6:	11 05       	cpc	r17, r1
    25d8:	69 f0       	breq	.+26     	; 0x25f4 <draw_character+0x8c>
    25da:	c0 e0       	ldi	r28, 0x00	; 0
    25dc:	d0 e0       	ldi	r29, 0x00	; 0
    25de:	f8 01       	movw	r30, r16
    25e0:	ec 0d       	add	r30, r12
    25e2:	fd 1d       	adc	r31, r13
    25e4:	e4 55       	subi	r30, 0x54	; 84
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	e4 91       	lpm	r30, Z
    25ea:	ee 2e       	mov	r14, r30
    25ec:	f1 2c       	mov	r15, r1
    25ee:	98 2c       	mov	r9, r8
    25f0:	90 0e       	add	r9, r16
    25f2:	d7 cf       	rjmp	.-82     	; 0x25a2 <draw_character+0x3a>
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	9f 90       	pop	r9
    260a:	8f 90       	pop	r8
    260c:	7f 90       	pop	r7
    260e:	08 95       	ret

00002610 <draw_string>:
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	16 2f       	mov	r17, r22
    261a:	04 2f       	mov	r16, r20
    261c:	ec 01       	movw	r28, r24
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <draw_string+0x18>
    2620:	40 2f       	mov	r20, r16
    2622:	61 2f       	mov	r22, r17
    2624:	a1 df       	rcall	.-190    	; 0x2568 <draw_character>
    2626:	1b 5f       	subi	r17, 0xFB	; 251
    2628:	89 91       	ld	r24, Y+
    262a:	81 11       	cpse	r24, r1
    262c:	f9 cf       	rjmp	.-14     	; 0x2620 <draw_string+0x10>
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <LCDWrite>:
    2638:	25 b1       	in	r18, 0x05	; 5
    263a:	30 e2       	ldi	r19, 0x20	; 32
    263c:	83 9f       	mul	r24, r19
    263e:	c0 01       	movw	r24, r0
    2640:	11 24       	eor	r1, r1
    2642:	2f 7d       	andi	r18, 0xDF	; 223
    2644:	28 2b       	or	r18, r24
    2646:	25 b9       	out	0x05, r18	; 5
    2648:	5f 98       	cbi	0x0b, 7	; 11
    264a:	87 e0       	ldi	r24, 0x07	; 7
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	8f 98       	cbi	0x11, 7	; 17
    2652:	9b 01       	movw	r18, r22
    2654:	08 2e       	mov	r0, r24
    2656:	02 c0       	rjmp	.+4      	; 0x265c <LCDWrite+0x24>
    2658:	35 95       	asr	r19
    265a:	27 95       	ror	r18
    265c:	0a 94       	dec	r0
    265e:	e2 f7       	brpl	.-8      	; 0x2658 <LCDWrite+0x20>
    2660:	20 ff       	sbrs	r18, 0
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <LCDWrite+0x30>
    2664:	2e 9a       	sbi	0x05, 6	; 5
    2666:	01 c0       	rjmp	.+2      	; 0x266a <LCDWrite+0x32>
    2668:	2e 98       	cbi	0x05, 6	; 5
    266a:	8f 9a       	sbi	0x11, 7	; 17
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	80 f7       	brcc	.-32     	; 0x2650 <LCDWrite+0x18>
    2670:	5f 9a       	sbi	0x0b, 7	; 11
    2672:	08 95       	ret

00002674 <LCDInitialise>:
    2674:	cf 93       	push	r28
    2676:	c8 2f       	mov	r28, r24
    2678:	57 9a       	sbi	0x0a, 7	; 10
    267a:	24 9a       	sbi	0x04, 4	; 4
    267c:	25 9a       	sbi	0x04, 5	; 4
    267e:	26 9a       	sbi	0x04, 6	; 4
    2680:	87 9a       	sbi	0x10, 7	; 16
    2682:	2c 98       	cbi	0x05, 4	; 5
    2684:	5f 9a       	sbi	0x0b, 7	; 11
    2686:	2c 9a       	sbi	0x05, 4	; 5
    2688:	61 e2       	ldi	r22, 0x21	; 33
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	d5 df       	rcall	.-86     	; 0x2638 <LCDWrite>
    268e:	6c 2f       	mov	r22, r28
    2690:	60 68       	ori	r22, 0x80	; 128
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	d1 df       	rcall	.-94     	; 0x2638 <LCDWrite>
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	ce df       	rcall	.-100    	; 0x2638 <LCDWrite>
    269c:	63 e1       	ldi	r22, 0x13	; 19
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	cb df       	rcall	.-106    	; 0x2638 <LCDWrite>
    26a2:	6c e0       	ldi	r22, 0x0C	; 12
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	c8 df       	rcall	.-112    	; 0x2638 <LCDWrite>
    26a8:	60 e2       	ldi	r22, 0x20	; 32
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	c5 df       	rcall	.-118    	; 0x2638 <LCDWrite>
    26ae:	6c e0       	ldi	r22, 0x0C	; 12
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	c2 df       	rcall	.-124    	; 0x2638 <LCDWrite>
    26b4:	60 e4       	ldi	r22, 0x40	; 64
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	bf df       	rcall	.-130    	; 0x2638 <LCDWrite>
    26ba:	60 e8       	ldi	r22, 0x80	; 128
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	cf 91       	pop	r28
    26c0:	bb cf       	rjmp	.-138    	; 0x2638 <LCDWrite>

000026c2 <LCDPosition>:
    26c2:	cf 93       	push	r28
    26c4:	c8 2f       	mov	r28, r24
    26c6:	60 64       	ori	r22, 0x40	; 64
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	b6 df       	rcall	.-148    	; 0x2638 <LCDWrite>
    26cc:	6c 2f       	mov	r22, r28
    26ce:	60 68       	ori	r22, 0x80	; 128
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	cf 91       	pop	r28
    26d4:	b1 cf       	rjmp	.-158    	; 0x2638 <LCDWrite>

000026d6 <init_sprite>:
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <init_sprite+0x10>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	6c 01       	movw	r12, r24
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	2a 83       	std	Y+2, r18	; 0x02
    26f4:	49 83       	std	Y+1, r20	; 0x01
    26f6:	48 dc       	rcall	.-1904   	; 0x1f88 <__floatunsisf>
    26f8:	f6 01       	movw	r30, r12
    26fa:	60 83       	st	Z, r22
    26fc:	71 83       	std	Z+1, r23	; 0x01
    26fe:	82 83       	std	Z+2, r24	; 0x02
    2700:	93 83       	std	Z+3, r25	; 0x03
    2702:	49 81       	ldd	r20, Y+1	; 0x01
    2704:	64 2f       	mov	r22, r20
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	3d dc       	rcall	.-1926   	; 0x1f88 <__floatunsisf>
    270e:	f6 01       	movw	r30, r12
    2710:	64 83       	std	Z+4, r22	; 0x04
    2712:	75 83       	std	Z+5, r23	; 0x05
    2714:	86 83       	std	Z+6, r24	; 0x06
    2716:	97 83       	std	Z+7, r25	; 0x07
    2718:	2a 81       	ldd	r18, Y+2	; 0x02
    271a:	20 87       	std	Z+8, r18	; 0x08
    271c:	01 87       	std	Z+9, r16	; 0x09
    271e:	f4 86       	std	Z+12, r15	; 0x0c
    2720:	e3 86       	std	Z+11, r14	; 0x0b
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	08 95       	ret

00002736 <draw_sprite>:
    2736:	2f 92       	push	r2
    2738:	3f 92       	push	r3
    273a:	4f 92       	push	r4
    273c:	5f 92       	push	r5
    273e:	6f 92       	push	r6
    2740:	7f 92       	push	r7
    2742:	8f 92       	push	r8
    2744:	9f 92       	push	r9
    2746:	af 92       	push	r10
    2748:	bf 92       	push	r11
    274a:	cf 92       	push	r12
    274c:	df 92       	push	r13
    274e:	ef 92       	push	r14
    2750:	ff 92       	push	r15
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	00 d0       	rcall	.+0      	; 0x275c <draw_sprite+0x26>
    275c:	00 d0       	rcall	.+0      	; 0x275e <draw_sprite+0x28>
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	dc 01       	movw	r26, r24
    2768:	1a 96       	adiw	r26, 0x0a	; 10
    276a:	8c 91       	ld	r24, X
    276c:	81 11       	cpse	r24, r1
    276e:	95 c0       	rjmp	.+298    	; 0x289a <draw_sprite+0x164>
    2770:	a0 c0       	rjmp	.+320    	; 0x28b2 <draw_sprite+0x17c>
    2772:	b6 01       	movw	r22, r12
    2774:	88 27       	eor	r24, r24
    2776:	77 fd       	sbrc	r23, 7
    2778:	80 95       	com	r24
    277a:	98 2f       	mov	r25, r24
    277c:	07 dc       	rcall	.-2034   	; 0x1f8c <__floatsisf>
    277e:	eb 81       	ldd	r30, Y+3	; 0x03
    2780:	fc 81       	ldd	r31, Y+4	; 0x04
    2782:	24 81       	ldd	r18, Z+4	; 0x04
    2784:	35 81       	ldd	r19, Z+5	; 0x05
    2786:	46 81       	ldd	r20, Z+6	; 0x06
    2788:	57 81       	ldd	r21, Z+7	; 0x07
    278a:	96 db       	rcall	.-2260   	; 0x1eb8 <__addsf3>
    278c:	96 2e       	mov	r9, r22
    278e:	87 2e       	mov	r8, r23
    2790:	78 2e       	mov	r7, r24
    2792:	69 2e       	mov	r6, r25
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	d4 01       	movw	r26, r8
    279c:	f3 01       	movw	r30, r6
    279e:	6b 2f       	mov	r22, r27
    27a0:	7a 2f       	mov	r23, r26
    27a2:	8f 2f       	mov	r24, r31
    27a4:	9e 2f       	mov	r25, r30
    27a6:	ec db       	rcall	.-2088   	; 0x1f80 <__cmpsf2>
    27a8:	87 fd       	sbrc	r24, 7
    27aa:	73 c0       	rjmp	.+230    	; 0x2892 <draw_sprite+0x15c>
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e4       	ldi	r20, 0x40	; 64
    27b2:	52 e4       	ldi	r21, 0x42	; 66
    27b4:	d4 01       	movw	r26, r8
    27b6:	f3 01       	movw	r30, r6
    27b8:	6b 2f       	mov	r22, r27
    27ba:	7a 2f       	mov	r23, r26
    27bc:	8f 2f       	mov	r24, r31
    27be:	9e 2f       	mov	r25, r30
    27c0:	95 dc       	rcall	.-1750   	; 0x20ec <__gesf2>
    27c2:	87 ff       	sbrs	r24, 7
    27c4:	76 c0       	rjmp	.+236    	; 0x28b2 <draw_sprite+0x17c>
    27c6:	20 e8       	ldi	r18, 0x80	; 128
    27c8:	a2 2e       	mov	r10, r18
    27ca:	b1 2c       	mov	r11, r1
    27cc:	e1 2c       	mov	r14, r1
    27ce:	f1 2c       	mov	r15, r1
    27d0:	52 c0       	rjmp	.+164    	; 0x2876 <draw_sprite+0x140>
    27d2:	ab 81       	ldd	r26, Y+3	; 0x03
    27d4:	bc 81       	ldd	r27, Y+4	; 0x04
    27d6:	1b 96       	adiw	r26, 0x0b	; 11
    27d8:	ed 91       	ld	r30, X+
    27da:	fc 91       	ld	r31, X
    27dc:	1c 97       	sbiw	r26, 0x0c	; 12
    27de:	e0 0f       	add	r30, r16
    27e0:	f1 1f       	adc	r31, r17
    27e2:	b0 81       	ld	r27, Z
    27e4:	b9 83       	std	Y+1, r27	; 0x01
    27e6:	b7 01       	movw	r22, r14
    27e8:	88 27       	eor	r24, r24
    27ea:	77 fd       	sbrc	r23, 7
    27ec:	80 95       	com	r24
    27ee:	98 2f       	mov	r25, r24
    27f0:	cd db       	rcall	.-2150   	; 0x1f8c <__floatsisf>
    27f2:	eb 81       	ldd	r30, Y+3	; 0x03
    27f4:	fc 81       	ldd	r31, Y+4	; 0x04
    27f6:	20 81       	ld	r18, Z
    27f8:	31 81       	ldd	r19, Z+1	; 0x01
    27fa:	42 81       	ldd	r20, Z+2	; 0x02
    27fc:	53 81       	ldd	r21, Z+3	; 0x03
    27fe:	5c db       	rcall	.-2376   	; 0x1eb8 <__addsf3>
    2800:	1b 01       	movw	r2, r22
    2802:	2c 01       	movw	r4, r24
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	73 2d       	mov	r23, r3
    280c:	95 2d       	mov	r25, r5
    280e:	6e dc       	rcall	.-1828   	; 0x20ec <__gesf2>
    2810:	87 fd       	sbrc	r24, 7
    2812:	21 c0       	rjmp	.+66     	; 0x2856 <draw_sprite+0x120>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	48 ea       	ldi	r20, 0xA8	; 168
    281a:	52 e4       	ldi	r21, 0x42	; 66
    281c:	62 2d       	mov	r22, r2
    281e:	73 2d       	mov	r23, r3
    2820:	84 2d       	mov	r24, r4
    2822:	95 2d       	mov	r25, r5
    2824:	ad db       	rcall	.-2214   	; 0x1f80 <__cmpsf2>
    2826:	87 ff       	sbrs	r24, 7
    2828:	16 c0       	rjmp	.+44     	; 0x2856 <draw_sprite+0x120>
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	8a 21       	and	r24, r10
    282e:	99 f0       	breq	.+38     	; 0x2856 <draw_sprite+0x120>
    2830:	a4 01       	movw	r20, r8
    2832:	93 01       	movw	r18, r6
    2834:	65 2f       	mov	r22, r21
    2836:	78 2d       	mov	r23, r8
    2838:	83 2f       	mov	r24, r19
    283a:	96 2d       	mov	r25, r6
    283c:	e0 d0       	rcall	.+448    	; 0x29fe <__fixunssfsi>
    283e:	26 2f       	mov	r18, r22
    2840:	62 2d       	mov	r22, r2
    2842:	73 2d       	mov	r23, r3
    2844:	84 2d       	mov	r24, r4
    2846:	95 2d       	mov	r25, r5
    2848:	2a 83       	std	Y+2, r18	; 0x02
    284a:	d9 d0       	rcall	.+434    	; 0x29fe <__fixunssfsi>
    284c:	86 2f       	mov	r24, r22
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	2a 81       	ldd	r18, Y+2	; 0x02
    2852:	62 2f       	mov	r22, r18
    2854:	68 dc       	rcall	.-1840   	; 0x2126 <set_pixel>
    2856:	ff ef       	ldi	r31, 0xFF	; 255
    2858:	ef 1a       	sub	r14, r31
    285a:	ff 0a       	sbc	r15, r31
    285c:	c7 01       	movw	r24, r14
    285e:	87 70       	andi	r24, 0x07	; 7
    2860:	99 27       	eor	r25, r25
    2862:	89 2b       	or	r24, r25
    2864:	31 f4       	brne	.+12     	; 0x2872 <draw_sprite+0x13c>
    2866:	0f 5f       	subi	r16, 0xFF	; 255
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	90 e8       	ldi	r25, 0x80	; 128
    286c:	a9 2e       	mov	r10, r25
    286e:	b1 2c       	mov	r11, r1
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <draw_sprite+0x140>
    2872:	b5 94       	asr	r11
    2874:	a7 94       	ror	r10
    2876:	ab 81       	ldd	r26, Y+3	; 0x03
    2878:	bc 81       	ldd	r27, Y+4	; 0x04
    287a:	18 96       	adiw	r26, 0x08	; 8
    287c:	2c 91       	ld	r18, X
    287e:	82 2f       	mov	r24, r18
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	e8 16       	cp	r14, r24
    2884:	f9 06       	cpc	r15, r25
    2886:	0c f4       	brge	.+2      	; 0x288a <draw_sprite+0x154>
    2888:	a4 cf       	rjmp	.-184    	; 0x27d2 <draw_sprite+0x9c>
    288a:	27 70       	andi	r18, 0x07	; 7
    288c:	11 f0       	breq	.+4      	; 0x2892 <draw_sprite+0x15c>
    288e:	0f 5f       	subi	r16, 0xFF	; 255
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	bf ef       	ldi	r27, 0xFF	; 255
    2894:	cb 1a       	sub	r12, r27
    2896:	db 0a       	sbc	r13, r27
    2898:	04 c0       	rjmp	.+8      	; 0x28a2 <draw_sprite+0x16c>
    289a:	c1 2c       	mov	r12, r1
    289c:	d1 2c       	mov	r13, r1
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	eb 81       	ldd	r30, Y+3	; 0x03
    28a4:	fc 81       	ldd	r31, Y+4	; 0x04
    28a6:	81 85       	ldd	r24, Z+9	; 0x09
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	c8 16       	cp	r12, r24
    28ac:	d9 06       	cpc	r13, r25
    28ae:	0c f4       	brge	.+2      	; 0x28b2 <draw_sprite+0x17c>
    28b0:	60 cf       	rjmp	.-320    	; 0x2772 <draw_sprite+0x3c>
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	df 90       	pop	r13
    28c8:	cf 90       	pop	r12
    28ca:	bf 90       	pop	r11
    28cc:	af 90       	pop	r10
    28ce:	9f 90       	pop	r9
    28d0:	8f 90       	pop	r8
    28d2:	7f 90       	pop	r7
    28d4:	6f 90       	pop	r6
    28d6:	5f 90       	pop	r5
    28d8:	4f 90       	pop	r4
    28da:	3f 90       	pop	r3
    28dc:	2f 90       	pop	r2
    28de:	08 95       	ret

000028e0 <__divmodhi4>:
    28e0:	97 fb       	bst	r25, 7
    28e2:	07 2e       	mov	r0, r23
    28e4:	16 f4       	brtc	.+4      	; 0x28ea <__divmodhi4+0xa>
    28e6:	00 94       	com	r0
    28e8:	06 d0       	rcall	.+12     	; 0x28f6 <__divmodhi4_neg1>
    28ea:	77 fd       	sbrc	r23, 7
    28ec:	08 d0       	rcall	.+16     	; 0x28fe <__divmodhi4_neg2>
    28ee:	0b d0       	rcall	.+22     	; 0x2906 <__udivmodhi4>
    28f0:	07 fc       	sbrc	r0, 7
    28f2:	05 d0       	rcall	.+10     	; 0x28fe <__divmodhi4_neg2>
    28f4:	3e f4       	brtc	.+14     	; 0x2904 <__divmodhi4_exit>

000028f6 <__divmodhi4_neg1>:
    28f6:	90 95       	com	r25
    28f8:	81 95       	neg	r24
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	08 95       	ret

000028fe <__divmodhi4_neg2>:
    28fe:	70 95       	com	r23
    2900:	61 95       	neg	r22
    2902:	7f 4f       	sbci	r23, 0xFF	; 255

00002904 <__divmodhi4_exit>:
    2904:	08 95       	ret

00002906 <__udivmodhi4>:
    2906:	aa 1b       	sub	r26, r26
    2908:	bb 1b       	sub	r27, r27
    290a:	51 e1       	ldi	r21, 0x11	; 17
    290c:	07 c0       	rjmp	.+14     	; 0x291c <__udivmodhi4_ep>

0000290e <__udivmodhi4_loop>:
    290e:	aa 1f       	adc	r26, r26
    2910:	bb 1f       	adc	r27, r27
    2912:	a6 17       	cp	r26, r22
    2914:	b7 07       	cpc	r27, r23
    2916:	10 f0       	brcs	.+4      	; 0x291c <__udivmodhi4_ep>
    2918:	a6 1b       	sub	r26, r22
    291a:	b7 0b       	sbc	r27, r23

0000291c <__udivmodhi4_ep>:
    291c:	88 1f       	adc	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	5a 95       	dec	r21
    2922:	a9 f7       	brne	.-22     	; 0x290e <__udivmodhi4_loop>
    2924:	80 95       	com	r24
    2926:	90 95       	com	r25
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	08 95       	ret

0000292e <__divsf3>:
    292e:	0c d0       	rcall	.+24     	; 0x2948 <__divsf3x>
    2930:	a3 cb       	rjmp	.-2234   	; 0x2078 <__fp_round>
    2932:	9b db       	rcall	.-2250   	; 0x206a <__fp_pscB>
    2934:	40 f0       	brcs	.+16     	; 0x2946 <__divsf3+0x18>
    2936:	92 db       	rcall	.-2268   	; 0x205c <__fp_pscA>
    2938:	30 f0       	brcs	.+12     	; 0x2946 <__divsf3+0x18>
    293a:	21 f4       	brne	.+8      	; 0x2944 <__divsf3+0x16>
    293c:	5f 3f       	cpi	r21, 0xFF	; 255
    293e:	19 f0       	breq	.+6      	; 0x2946 <__divsf3+0x18>
    2940:	84 cb       	rjmp	.-2296   	; 0x204a <__fp_inf>
    2942:	51 11       	cpse	r21, r1
    2944:	cd cb       	rjmp	.-2150   	; 0x20e0 <__fp_szero>
    2946:	87 cb       	rjmp	.-2290   	; 0x2056 <__fp_nan>

00002948 <__divsf3x>:
    2948:	a8 db       	rcall	.-2224   	; 0x209a <__fp_split3>
    294a:	98 f3       	brcs	.-26     	; 0x2932 <__divsf3+0x4>

0000294c <__divsf3_pse>:
    294c:	99 23       	and	r25, r25
    294e:	c9 f3       	breq	.-14     	; 0x2942 <__divsf3+0x14>
    2950:	55 23       	and	r21, r21
    2952:	b1 f3       	breq	.-20     	; 0x2940 <__divsf3+0x12>
    2954:	95 1b       	sub	r25, r21
    2956:	55 0b       	sbc	r21, r21
    2958:	bb 27       	eor	r27, r27
    295a:	aa 27       	eor	r26, r26
    295c:	62 17       	cp	r22, r18
    295e:	73 07       	cpc	r23, r19
    2960:	84 07       	cpc	r24, r20
    2962:	38 f0       	brcs	.+14     	; 0x2972 <__divsf3_pse+0x26>
    2964:	9f 5f       	subi	r25, 0xFF	; 255
    2966:	5f 4f       	sbci	r21, 0xFF	; 255
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	44 1f       	adc	r20, r20
    296e:	aa 1f       	adc	r26, r26
    2970:	a9 f3       	breq	.-22     	; 0x295c <__divsf3_pse+0x10>
    2972:	33 d0       	rcall	.+102    	; 0x29da <__divsf3_pse+0x8e>
    2974:	0e 2e       	mov	r0, r30
    2976:	3a f0       	brmi	.+14     	; 0x2986 <__divsf3_pse+0x3a>
    2978:	e0 e8       	ldi	r30, 0x80	; 128
    297a:	30 d0       	rcall	.+96     	; 0x29dc <__divsf3_pse+0x90>
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	e6 95       	lsr	r30
    2982:	00 1c       	adc	r0, r0
    2984:	ca f7       	brpl	.-14     	; 0x2978 <__divsf3_pse+0x2c>
    2986:	29 d0       	rcall	.+82     	; 0x29da <__divsf3_pse+0x8e>
    2988:	fe 2f       	mov	r31, r30
    298a:	27 d0       	rcall	.+78     	; 0x29da <__divsf3_pse+0x8e>
    298c:	66 0f       	add	r22, r22
    298e:	77 1f       	adc	r23, r23
    2990:	88 1f       	adc	r24, r24
    2992:	bb 1f       	adc	r27, r27
    2994:	26 17       	cp	r18, r22
    2996:	37 07       	cpc	r19, r23
    2998:	48 07       	cpc	r20, r24
    299a:	ab 07       	cpc	r26, r27
    299c:	b0 e8       	ldi	r27, 0x80	; 128
    299e:	09 f0       	breq	.+2      	; 0x29a2 <__divsf3_pse+0x56>
    29a0:	bb 0b       	sbc	r27, r27
    29a2:	80 2d       	mov	r24, r0
    29a4:	bf 01       	movw	r22, r30
    29a6:	ff 27       	eor	r31, r31
    29a8:	93 58       	subi	r25, 0x83	; 131
    29aa:	5f 4f       	sbci	r21, 0xFF	; 255
    29ac:	2a f0       	brmi	.+10     	; 0x29b8 <__divsf3_pse+0x6c>
    29ae:	9e 3f       	cpi	r25, 0xFE	; 254
    29b0:	51 05       	cpc	r21, r1
    29b2:	68 f0       	brcs	.+26     	; 0x29ce <__divsf3_pse+0x82>
    29b4:	4a cb       	rjmp	.-2412   	; 0x204a <__fp_inf>
    29b6:	94 cb       	rjmp	.-2264   	; 0x20e0 <__fp_szero>
    29b8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ba:	ec f3       	brlt	.-6      	; 0x29b6 <__divsf3_pse+0x6a>
    29bc:	98 3e       	cpi	r25, 0xE8	; 232
    29be:	dc f3       	brlt	.-10     	; 0x29b6 <__divsf3_pse+0x6a>
    29c0:	86 95       	lsr	r24
    29c2:	77 95       	ror	r23
    29c4:	67 95       	ror	r22
    29c6:	b7 95       	ror	r27
    29c8:	f7 95       	ror	r31
    29ca:	9f 5f       	subi	r25, 0xFF	; 255
    29cc:	c9 f7       	brne	.-14     	; 0x29c0 <__divsf3_pse+0x74>
    29ce:	88 0f       	add	r24, r24
    29d0:	91 1d       	adc	r25, r1
    29d2:	96 95       	lsr	r25
    29d4:	87 95       	ror	r24
    29d6:	97 f9       	bld	r25, 7
    29d8:	08 95       	ret
    29da:	e1 e0       	ldi	r30, 0x01	; 1
    29dc:	66 0f       	add	r22, r22
    29de:	77 1f       	adc	r23, r23
    29e0:	88 1f       	adc	r24, r24
    29e2:	bb 1f       	adc	r27, r27
    29e4:	62 17       	cp	r22, r18
    29e6:	73 07       	cpc	r23, r19
    29e8:	84 07       	cpc	r24, r20
    29ea:	ba 07       	cpc	r27, r26
    29ec:	20 f0       	brcs	.+8      	; 0x29f6 <__divsf3_pse+0xaa>
    29ee:	62 1b       	sub	r22, r18
    29f0:	73 0b       	sbc	r23, r19
    29f2:	84 0b       	sbc	r24, r20
    29f4:	ba 0b       	sbc	r27, r26
    29f6:	ee 1f       	adc	r30, r30
    29f8:	88 f7       	brcc	.-30     	; 0x29dc <__divsf3_pse+0x90>
    29fa:	e0 95       	com	r30
    29fc:	08 95       	ret

000029fe <__fixunssfsi>:
    29fe:	55 db       	rcall	.-2390   	; 0x20aa <__fp_splitA>
    2a00:	88 f0       	brcs	.+34     	; 0x2a24 <__fixunssfsi+0x26>
    2a02:	9f 57       	subi	r25, 0x7F	; 127
    2a04:	90 f0       	brcs	.+36     	; 0x2a2a <__fixunssfsi+0x2c>
    2a06:	b9 2f       	mov	r27, r25
    2a08:	99 27       	eor	r25, r25
    2a0a:	b7 51       	subi	r27, 0x17	; 23
    2a0c:	a0 f0       	brcs	.+40     	; 0x2a36 <__fixunssfsi+0x38>
    2a0e:	d1 f0       	breq	.+52     	; 0x2a44 <__fixunssfsi+0x46>
    2a10:	66 0f       	add	r22, r22
    2a12:	77 1f       	adc	r23, r23
    2a14:	88 1f       	adc	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	1a f0       	brmi	.+6      	; 0x2a20 <__fixunssfsi+0x22>
    2a1a:	ba 95       	dec	r27
    2a1c:	c9 f7       	brne	.-14     	; 0x2a10 <__fixunssfsi+0x12>
    2a1e:	12 c0       	rjmp	.+36     	; 0x2a44 <__fixunssfsi+0x46>
    2a20:	b1 30       	cpi	r27, 0x01	; 1
    2a22:	81 f0       	breq	.+32     	; 0x2a44 <__fixunssfsi+0x46>
    2a24:	5c db       	rcall	.-2376   	; 0x20de <__fp_zero>
    2a26:	b1 e0       	ldi	r27, 0x01	; 1
    2a28:	08 95       	ret
    2a2a:	59 cb       	rjmp	.-2382   	; 0x20de <__fp_zero>
    2a2c:	67 2f       	mov	r22, r23
    2a2e:	78 2f       	mov	r23, r24
    2a30:	88 27       	eor	r24, r24
    2a32:	b8 5f       	subi	r27, 0xF8	; 248
    2a34:	39 f0       	breq	.+14     	; 0x2a44 <__fixunssfsi+0x46>
    2a36:	b9 3f       	cpi	r27, 0xF9	; 249
    2a38:	cc f3       	brlt	.-14     	; 0x2a2c <__fixunssfsi+0x2e>
    2a3a:	86 95       	lsr	r24
    2a3c:	77 95       	ror	r23
    2a3e:	67 95       	ror	r22
    2a40:	b3 95       	inc	r27
    2a42:	d9 f7       	brne	.-10     	; 0x2a3a <__fixunssfsi+0x3c>
    2a44:	3e f4       	brtc	.+14     	; 0x2a54 <__fixunssfsi+0x56>
    2a46:	90 95       	com	r25
    2a48:	80 95       	com	r24
    2a4a:	70 95       	com	r23
    2a4c:	61 95       	neg	r22
    2a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a50:	8f 4f       	sbci	r24, 0xFF	; 255
    2a52:	9f 4f       	sbci	r25, 0xFF	; 255
    2a54:	08 95       	ret

00002a56 <__mulsf3>:
    2a56:	0b d0       	rcall	.+22     	; 0x2a6e <__mulsf3x>
    2a58:	0f cb       	rjmp	.-2530   	; 0x2078 <__fp_round>
    2a5a:	00 db       	rcall	.-2560   	; 0x205c <__fp_pscA>
    2a5c:	28 f0       	brcs	.+10     	; 0x2a68 <__mulsf3+0x12>
    2a5e:	05 db       	rcall	.-2550   	; 0x206a <__fp_pscB>
    2a60:	18 f0       	brcs	.+6      	; 0x2a68 <__mulsf3+0x12>
    2a62:	95 23       	and	r25, r21
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <__mulsf3+0x12>
    2a66:	f1 ca       	rjmp	.-2590   	; 0x204a <__fp_inf>
    2a68:	f6 ca       	rjmp	.-2580   	; 0x2056 <__fp_nan>
    2a6a:	11 24       	eor	r1, r1
    2a6c:	39 cb       	rjmp	.-2446   	; 0x20e0 <__fp_szero>

00002a6e <__mulsf3x>:
    2a6e:	15 db       	rcall	.-2518   	; 0x209a <__fp_split3>
    2a70:	a0 f3       	brcs	.-24     	; 0x2a5a <__mulsf3+0x4>

00002a72 <__mulsf3_pse>:
    2a72:	95 9f       	mul	r25, r21
    2a74:	d1 f3       	breq	.-12     	; 0x2a6a <__mulsf3+0x14>
    2a76:	95 0f       	add	r25, r21
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	55 1f       	adc	r21, r21
    2a7c:	62 9f       	mul	r22, r18
    2a7e:	f0 01       	movw	r30, r0
    2a80:	72 9f       	mul	r23, r18
    2a82:	bb 27       	eor	r27, r27
    2a84:	f0 0d       	add	r31, r0
    2a86:	b1 1d       	adc	r27, r1
    2a88:	63 9f       	mul	r22, r19
    2a8a:	aa 27       	eor	r26, r26
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	b1 1d       	adc	r27, r1
    2a90:	aa 1f       	adc	r26, r26
    2a92:	64 9f       	mul	r22, r20
    2a94:	66 27       	eor	r22, r22
    2a96:	b0 0d       	add	r27, r0
    2a98:	a1 1d       	adc	r26, r1
    2a9a:	66 1f       	adc	r22, r22
    2a9c:	82 9f       	mul	r24, r18
    2a9e:	22 27       	eor	r18, r18
    2aa0:	b0 0d       	add	r27, r0
    2aa2:	a1 1d       	adc	r26, r1
    2aa4:	62 1f       	adc	r22, r18
    2aa6:	73 9f       	mul	r23, r19
    2aa8:	b0 0d       	add	r27, r0
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	62 1f       	adc	r22, r18
    2aae:	83 9f       	mul	r24, r19
    2ab0:	a0 0d       	add	r26, r0
    2ab2:	61 1d       	adc	r22, r1
    2ab4:	22 1f       	adc	r18, r18
    2ab6:	74 9f       	mul	r23, r20
    2ab8:	33 27       	eor	r19, r19
    2aba:	a0 0d       	add	r26, r0
    2abc:	61 1d       	adc	r22, r1
    2abe:	23 1f       	adc	r18, r19
    2ac0:	84 9f       	mul	r24, r20
    2ac2:	60 0d       	add	r22, r0
    2ac4:	21 1d       	adc	r18, r1
    2ac6:	82 2f       	mov	r24, r18
    2ac8:	76 2f       	mov	r23, r22
    2aca:	6a 2f       	mov	r22, r26
    2acc:	11 24       	eor	r1, r1
    2ace:	9f 57       	subi	r25, 0x7F	; 127
    2ad0:	50 40       	sbci	r21, 0x00	; 0
    2ad2:	8a f0       	brmi	.+34     	; 0x2af6 <__mulsf3_pse+0x84>
    2ad4:	e1 f0       	breq	.+56     	; 0x2b0e <__mulsf3_pse+0x9c>
    2ad6:	88 23       	and	r24, r24
    2ad8:	4a f0       	brmi	.+18     	; 0x2aec <__mulsf3_pse+0x7a>
    2ada:	ee 0f       	add	r30, r30
    2adc:	ff 1f       	adc	r31, r31
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	91 50       	subi	r25, 0x01	; 1
    2ae8:	50 40       	sbci	r21, 0x00	; 0
    2aea:	a9 f7       	brne	.-22     	; 0x2ad6 <__mulsf3_pse+0x64>
    2aec:	9e 3f       	cpi	r25, 0xFE	; 254
    2aee:	51 05       	cpc	r21, r1
    2af0:	70 f0       	brcs	.+28     	; 0x2b0e <__mulsf3_pse+0x9c>
    2af2:	ab ca       	rjmp	.-2730   	; 0x204a <__fp_inf>
    2af4:	f5 ca       	rjmp	.-2582   	; 0x20e0 <__fp_szero>
    2af6:	5f 3f       	cpi	r21, 0xFF	; 255
    2af8:	ec f3       	brlt	.-6      	; 0x2af4 <__mulsf3_pse+0x82>
    2afa:	98 3e       	cpi	r25, 0xE8	; 232
    2afc:	dc f3       	brlt	.-10     	; 0x2af4 <__mulsf3_pse+0x82>
    2afe:	86 95       	lsr	r24
    2b00:	77 95       	ror	r23
    2b02:	67 95       	ror	r22
    2b04:	b7 95       	ror	r27
    2b06:	f7 95       	ror	r31
    2b08:	e7 95       	ror	r30
    2b0a:	9f 5f       	subi	r25, 0xFF	; 255
    2b0c:	c1 f7       	brne	.-16     	; 0x2afe <__mulsf3_pse+0x8c>
    2b0e:	fe 2b       	or	r31, r30
    2b10:	88 0f       	add	r24, r24
    2b12:	91 1d       	adc	r25, r1
    2b14:	96 95       	lsr	r25
    2b16:	87 95       	ror	r24
    2b18:	97 f9       	bld	r25, 7
    2b1a:	08 95       	ret

00002b1c <do_rand>:
    2b1c:	8f 92       	push	r8
    2b1e:	9f 92       	push	r9
    2b20:	af 92       	push	r10
    2b22:	bf 92       	push	r11
    2b24:	cf 92       	push	r12
    2b26:	df 92       	push	r13
    2b28:	ef 92       	push	r14
    2b2a:	ff 92       	push	r15
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	ec 01       	movw	r28, r24
    2b32:	68 81       	ld	r22, Y
    2b34:	79 81       	ldd	r23, Y+1	; 0x01
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	61 15       	cp	r22, r1
    2b3c:	71 05       	cpc	r23, r1
    2b3e:	81 05       	cpc	r24, r1
    2b40:	91 05       	cpc	r25, r1
    2b42:	21 f4       	brne	.+8      	; 0x2b4c <do_rand+0x30>
    2b44:	64 e2       	ldi	r22, 0x24	; 36
    2b46:	79 ed       	ldi	r23, 0xD9	; 217
    2b48:	8b e5       	ldi	r24, 0x5B	; 91
    2b4a:	97 e0       	ldi	r25, 0x07	; 7
    2b4c:	2d e1       	ldi	r18, 0x1D	; 29
    2b4e:	33 ef       	ldi	r19, 0xF3	; 243
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	50 e0       	ldi	r21, 0x00	; 0
    2b54:	c9 d2       	rcall	.+1426   	; 0x30e8 <__divmodsi4>
    2b56:	49 01       	movw	r8, r18
    2b58:	5a 01       	movw	r10, r20
    2b5a:	9b 01       	movw	r18, r22
    2b5c:	ac 01       	movw	r20, r24
    2b5e:	a7 ea       	ldi	r26, 0xA7	; 167
    2b60:	b1 e4       	ldi	r27, 0x41	; 65
    2b62:	dd d2       	rcall	.+1466   	; 0x311e <__muluhisi3>
    2b64:	6b 01       	movw	r12, r22
    2b66:	7c 01       	movw	r14, r24
    2b68:	ac ee       	ldi	r26, 0xEC	; 236
    2b6a:	b4 ef       	ldi	r27, 0xF4	; 244
    2b6c:	a5 01       	movw	r20, r10
    2b6e:	94 01       	movw	r18, r8
    2b70:	e2 d2       	rcall	.+1476   	; 0x3136 <__mulohisi3>
    2b72:	c6 0e       	add	r12, r22
    2b74:	d7 1e       	adc	r13, r23
    2b76:	e8 1e       	adc	r14, r24
    2b78:	f9 1e       	adc	r15, r25
    2b7a:	f7 fe       	sbrs	r15, 7
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <do_rand+0x6e>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	c8 1a       	sub	r12, r24
    2b82:	d1 08       	sbc	r13, r1
    2b84:	e1 08       	sbc	r14, r1
    2b86:	80 e8       	ldi	r24, 0x80	; 128
    2b88:	f8 0a       	sbc	r15, r24
    2b8a:	c8 82       	st	Y, r12
    2b8c:	d9 82       	std	Y+1, r13	; 0x01
    2b8e:	ea 82       	std	Y+2, r14	; 0x02
    2b90:	fb 82       	std	Y+3, r15	; 0x03
    2b92:	e8 94       	clt
    2b94:	d7 f8       	bld	r13, 7
    2b96:	ee 24       	eor	r14, r14
    2b98:	ff 24       	eor	r15, r15
    2b9a:	c6 01       	movw	r24, r12
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	bf 90       	pop	r11
    2baa:	af 90       	pop	r10
    2bac:	9f 90       	pop	r9
    2bae:	8f 90       	pop	r8
    2bb0:	08 95       	ret

00002bb2 <rand_r>:
    2bb2:	b4 cf       	rjmp	.-152    	; 0x2b1c <do_rand>

00002bb4 <rand>:
    2bb4:	84 e3       	ldi	r24, 0x34	; 52
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	b1 cf       	rjmp	.-158    	; 0x2b1c <do_rand>

00002bba <srand>:
    2bba:	a0 e0       	ldi	r26, 0x00	; 0
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	80 93 34 01 	sts	0x0134, r24
    2bc2:	90 93 35 01 	sts	0x0135, r25
    2bc6:	a0 93 36 01 	sts	0x0136, r26
    2bca:	b0 93 37 01 	sts	0x0137, r27
    2bce:	08 95       	ret

00002bd0 <sprintf>:
    2bd0:	ae e0       	ldi	r26, 0x0E	; 14
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	ed ee       	ldi	r30, 0xED	; 237
    2bd6:	f5 e1       	ldi	r31, 0x15	; 21
    2bd8:	c0 c2       	rjmp	.+1408   	; 0x315a <__prologue_saves__+0x1c>
    2bda:	0d 89       	ldd	r16, Y+21	; 0x15
    2bdc:	1e 89       	ldd	r17, Y+22	; 0x16
    2bde:	86 e0       	ldi	r24, 0x06	; 6
    2be0:	8c 83       	std	Y+4, r24	; 0x04
    2be2:	1a 83       	std	Y+2, r17	; 0x02
    2be4:	09 83       	std	Y+1, r16	; 0x01
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	9f e7       	ldi	r25, 0x7F	; 127
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	ce 01       	movw	r24, r28
    2bf0:	49 96       	adiw	r24, 0x19	; 25
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	6f 89       	ldd	r22, Y+23	; 0x17
    2bf6:	78 8d       	ldd	r23, Y+24	; 0x18
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	08 d0       	rcall	.+16     	; 0x2c0e <vfprintf>
    2bfe:	ef 81       	ldd	r30, Y+7	; 0x07
    2c00:	f8 85       	ldd	r31, Y+8	; 0x08
    2c02:	e0 0f       	add	r30, r16
    2c04:	f1 1f       	adc	r31, r17
    2c06:	10 82       	st	Z, r1
    2c08:	2e 96       	adiw	r28, 0x0e	; 14
    2c0a:	e4 e0       	ldi	r30, 0x04	; 4
    2c0c:	c2 c2       	rjmp	.+1412   	; 0x3192 <__epilogue_restores__+0x1c>

00002c0e <vfprintf>:
    2c0e:	ac e0       	ldi	r26, 0x0C	; 12
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	ec e0       	ldi	r30, 0x0C	; 12
    2c14:	f6 e1       	ldi	r31, 0x16	; 22
    2c16:	93 c2       	rjmp	.+1318   	; 0x313e <__prologue_saves__>
    2c18:	7c 01       	movw	r14, r24
    2c1a:	6b 01       	movw	r12, r22
    2c1c:	8a 01       	movw	r16, r20
    2c1e:	fc 01       	movw	r30, r24
    2c20:	17 82       	std	Z+7, r1	; 0x07
    2c22:	16 82       	std	Z+6, r1	; 0x06
    2c24:	83 81       	ldd	r24, Z+3	; 0x03
    2c26:	81 ff       	sbrs	r24, 1
    2c28:	b9 c1       	rjmp	.+882    	; 0x2f9c <vfprintf+0x38e>
    2c2a:	88 24       	eor	r8, r8
    2c2c:	83 94       	inc	r8
    2c2e:	91 2c       	mov	r9, r1
    2c30:	8c 0e       	add	r8, r28
    2c32:	9d 1e       	adc	r9, r29
    2c34:	f7 01       	movw	r30, r14
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	f6 01       	movw	r30, r12
    2c3a:	93 fd       	sbrc	r25, 3
    2c3c:	85 91       	lpm	r24, Z+
    2c3e:	93 ff       	sbrs	r25, 3
    2c40:	81 91       	ld	r24, Z+
    2c42:	6f 01       	movw	r12, r30
    2c44:	88 23       	and	r24, r24
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <vfprintf+0x3c>
    2c48:	a5 c1       	rjmp	.+842    	; 0x2f94 <vfprintf+0x386>
    2c4a:	85 32       	cpi	r24, 0x25	; 37
    2c4c:	39 f4       	brne	.+14     	; 0x2c5c <vfprintf+0x4e>
    2c4e:	93 fd       	sbrc	r25, 3
    2c50:	85 91       	lpm	r24, Z+
    2c52:	93 ff       	sbrs	r25, 3
    2c54:	81 91       	ld	r24, Z+
    2c56:	6f 01       	movw	r12, r30
    2c58:	85 32       	cpi	r24, 0x25	; 37
    2c5a:	21 f4       	brne	.+8      	; 0x2c64 <vfprintf+0x56>
    2c5c:	b7 01       	movw	r22, r14
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	b9 d1       	rcall	.+882    	; 0x2fd4 <fputc>
    2c62:	e8 cf       	rjmp	.-48     	; 0x2c34 <vfprintf+0x26>
    2c64:	51 2c       	mov	r5, r1
    2c66:	31 2c       	mov	r3, r1
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	20 32       	cpi	r18, 0x20	; 32
    2c6c:	a8 f4       	brcc	.+42     	; 0x2c98 <vfprintf+0x8a>
    2c6e:	8b 32       	cpi	r24, 0x2B	; 43
    2c70:	61 f0       	breq	.+24     	; 0x2c8a <vfprintf+0x7c>
    2c72:	28 f4       	brcc	.+10     	; 0x2c7e <vfprintf+0x70>
    2c74:	80 32       	cpi	r24, 0x20	; 32
    2c76:	51 f0       	breq	.+20     	; 0x2c8c <vfprintf+0x7e>
    2c78:	83 32       	cpi	r24, 0x23	; 35
    2c7a:	71 f4       	brne	.+28     	; 0x2c98 <vfprintf+0x8a>
    2c7c:	0b c0       	rjmp	.+22     	; 0x2c94 <vfprintf+0x86>
    2c7e:	8d 32       	cpi	r24, 0x2D	; 45
    2c80:	39 f0       	breq	.+14     	; 0x2c90 <vfprintf+0x82>
    2c82:	80 33       	cpi	r24, 0x30	; 48
    2c84:	49 f4       	brne	.+18     	; 0x2c98 <vfprintf+0x8a>
    2c86:	21 60       	ori	r18, 0x01	; 1
    2c88:	28 c0       	rjmp	.+80     	; 0x2cda <vfprintf+0xcc>
    2c8a:	22 60       	ori	r18, 0x02	; 2
    2c8c:	24 60       	ori	r18, 0x04	; 4
    2c8e:	25 c0       	rjmp	.+74     	; 0x2cda <vfprintf+0xcc>
    2c90:	28 60       	ori	r18, 0x08	; 8
    2c92:	23 c0       	rjmp	.+70     	; 0x2cda <vfprintf+0xcc>
    2c94:	20 61       	ori	r18, 0x10	; 16
    2c96:	21 c0       	rjmp	.+66     	; 0x2cda <vfprintf+0xcc>
    2c98:	27 fd       	sbrc	r18, 7
    2c9a:	27 c0       	rjmp	.+78     	; 0x2cea <vfprintf+0xdc>
    2c9c:	38 2f       	mov	r19, r24
    2c9e:	30 53       	subi	r19, 0x30	; 48
    2ca0:	3a 30       	cpi	r19, 0x0A	; 10
    2ca2:	78 f4       	brcc	.+30     	; 0x2cc2 <vfprintf+0xb4>
    2ca4:	26 ff       	sbrs	r18, 6
    2ca6:	06 c0       	rjmp	.+12     	; 0x2cb4 <vfprintf+0xa6>
    2ca8:	fa e0       	ldi	r31, 0x0A	; 10
    2caa:	5f 9e       	mul	r5, r31
    2cac:	30 0d       	add	r19, r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	53 2e       	mov	r5, r19
    2cb2:	13 c0       	rjmp	.+38     	; 0x2cda <vfprintf+0xcc>
    2cb4:	8a e0       	ldi	r24, 0x0A	; 10
    2cb6:	38 9e       	mul	r3, r24
    2cb8:	30 0d       	add	r19, r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	33 2e       	mov	r3, r19
    2cbe:	20 62       	ori	r18, 0x20	; 32
    2cc0:	0c c0       	rjmp	.+24     	; 0x2cda <vfprintf+0xcc>
    2cc2:	8e 32       	cpi	r24, 0x2E	; 46
    2cc4:	21 f4       	brne	.+8      	; 0x2cce <vfprintf+0xc0>
    2cc6:	26 fd       	sbrc	r18, 6
    2cc8:	65 c1       	rjmp	.+714    	; 0x2f94 <vfprintf+0x386>
    2cca:	20 64       	ori	r18, 0x40	; 64
    2ccc:	06 c0       	rjmp	.+12     	; 0x2cda <vfprintf+0xcc>
    2cce:	8c 36       	cpi	r24, 0x6C	; 108
    2cd0:	11 f4       	brne	.+4      	; 0x2cd6 <vfprintf+0xc8>
    2cd2:	20 68       	ori	r18, 0x80	; 128
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <vfprintf+0xcc>
    2cd6:	88 36       	cpi	r24, 0x68	; 104
    2cd8:	41 f4       	brne	.+16     	; 0x2cea <vfprintf+0xdc>
    2cda:	f6 01       	movw	r30, r12
    2cdc:	93 fd       	sbrc	r25, 3
    2cde:	85 91       	lpm	r24, Z+
    2ce0:	93 ff       	sbrs	r25, 3
    2ce2:	81 91       	ld	r24, Z+
    2ce4:	6f 01       	movw	r12, r30
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	c0 cf       	rjmp	.-128    	; 0x2c6a <vfprintf+0x5c>
    2cea:	98 2f       	mov	r25, r24
    2cec:	95 54       	subi	r25, 0x45	; 69
    2cee:	93 30       	cpi	r25, 0x03	; 3
    2cf0:	18 f0       	brcs	.+6      	; 0x2cf8 <vfprintf+0xea>
    2cf2:	90 52       	subi	r25, 0x20	; 32
    2cf4:	93 30       	cpi	r25, 0x03	; 3
    2cf6:	28 f4       	brcc	.+10     	; 0x2d02 <vfprintf+0xf4>
    2cf8:	0c 5f       	subi	r16, 0xFC	; 252
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	ff e3       	ldi	r31, 0x3F	; 63
    2cfe:	f9 83       	std	Y+1, r31	; 0x01
    2d00:	0d c0       	rjmp	.+26     	; 0x2d1c <vfprintf+0x10e>
    2d02:	83 36       	cpi	r24, 0x63	; 99
    2d04:	31 f0       	breq	.+12     	; 0x2d12 <vfprintf+0x104>
    2d06:	83 37       	cpi	r24, 0x73	; 115
    2d08:	71 f0       	breq	.+28     	; 0x2d26 <vfprintf+0x118>
    2d0a:	83 35       	cpi	r24, 0x53	; 83
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <vfprintf+0x102>
    2d0e:	5a c0       	rjmp	.+180    	; 0x2dc4 <vfprintf+0x1b6>
    2d10:	22 c0       	rjmp	.+68     	; 0x2d56 <vfprintf+0x148>
    2d12:	f8 01       	movw	r30, r16
    2d14:	80 81       	ld	r24, Z
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	0e 5f       	subi	r16, 0xFE	; 254
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	44 24       	eor	r4, r4
    2d1e:	43 94       	inc	r4
    2d20:	51 2c       	mov	r5, r1
    2d22:	54 01       	movw	r10, r8
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <vfprintf+0x140>
    2d26:	38 01       	movw	r6, r16
    2d28:	f2 e0       	ldi	r31, 0x02	; 2
    2d2a:	6f 0e       	add	r6, r31
    2d2c:	71 1c       	adc	r7, r1
    2d2e:	f8 01       	movw	r30, r16
    2d30:	a0 80       	ld	r10, Z
    2d32:	b1 80       	ldd	r11, Z+1	; 0x01
    2d34:	26 ff       	sbrs	r18, 6
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <vfprintf+0x130>
    2d38:	65 2d       	mov	r22, r5
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <vfprintf+0x134>
    2d3e:	6f ef       	ldi	r22, 0xFF	; 255
    2d40:	7f ef       	ldi	r23, 0xFF	; 255
    2d42:	c5 01       	movw	r24, r10
    2d44:	2c 87       	std	Y+12, r18	; 0x0c
    2d46:	3b d1       	rcall	.+630    	; 0x2fbe <strnlen>
    2d48:	2c 01       	movw	r4, r24
    2d4a:	83 01       	movw	r16, r6
    2d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d4e:	6f e7       	ldi	r22, 0x7F	; 127
    2d50:	26 2e       	mov	r2, r22
    2d52:	22 22       	and	r2, r18
    2d54:	17 c0       	rjmp	.+46     	; 0x2d84 <vfprintf+0x176>
    2d56:	38 01       	movw	r6, r16
    2d58:	f2 e0       	ldi	r31, 0x02	; 2
    2d5a:	6f 0e       	add	r6, r31
    2d5c:	71 1c       	adc	r7, r1
    2d5e:	f8 01       	movw	r30, r16
    2d60:	a0 80       	ld	r10, Z
    2d62:	b1 80       	ldd	r11, Z+1	; 0x01
    2d64:	26 ff       	sbrs	r18, 6
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <vfprintf+0x160>
    2d68:	65 2d       	mov	r22, r5
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <vfprintf+0x164>
    2d6e:	6f ef       	ldi	r22, 0xFF	; 255
    2d70:	7f ef       	ldi	r23, 0xFF	; 255
    2d72:	c5 01       	movw	r24, r10
    2d74:	2c 87       	std	Y+12, r18	; 0x0c
    2d76:	18 d1       	rcall	.+560    	; 0x2fa8 <strnlen_P>
    2d78:	2c 01       	movw	r4, r24
    2d7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d7c:	50 e8       	ldi	r21, 0x80	; 128
    2d7e:	25 2e       	mov	r2, r21
    2d80:	22 2a       	or	r2, r18
    2d82:	83 01       	movw	r16, r6
    2d84:	23 fc       	sbrc	r2, 3
    2d86:	1a c0       	rjmp	.+52     	; 0x2dbc <vfprintf+0x1ae>
    2d88:	05 c0       	rjmp	.+10     	; 0x2d94 <vfprintf+0x186>
    2d8a:	b7 01       	movw	r22, r14
    2d8c:	80 e2       	ldi	r24, 0x20	; 32
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	21 d1       	rcall	.+578    	; 0x2fd4 <fputc>
    2d92:	3a 94       	dec	r3
    2d94:	83 2d       	mov	r24, r3
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	48 16       	cp	r4, r24
    2d9a:	59 06       	cpc	r5, r25
    2d9c:	b0 f3       	brcs	.-20     	; 0x2d8a <vfprintf+0x17c>
    2d9e:	0e c0       	rjmp	.+28     	; 0x2dbc <vfprintf+0x1ae>
    2da0:	f5 01       	movw	r30, r10
    2da2:	27 fc       	sbrc	r2, 7
    2da4:	85 91       	lpm	r24, Z+
    2da6:	27 fe       	sbrs	r2, 7
    2da8:	81 91       	ld	r24, Z+
    2daa:	5f 01       	movw	r10, r30
    2dac:	b7 01       	movw	r22, r14
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	11 d1       	rcall	.+546    	; 0x2fd4 <fputc>
    2db2:	31 10       	cpse	r3, r1
    2db4:	3a 94       	dec	r3
    2db6:	f1 e0       	ldi	r31, 0x01	; 1
    2db8:	4f 1a       	sub	r4, r31
    2dba:	51 08       	sbc	r5, r1
    2dbc:	41 14       	cp	r4, r1
    2dbe:	51 04       	cpc	r5, r1
    2dc0:	79 f7       	brne	.-34     	; 0x2da0 <vfprintf+0x192>
    2dc2:	e5 c0       	rjmp	.+458    	; 0x2f8e <vfprintf+0x380>
    2dc4:	84 36       	cpi	r24, 0x64	; 100
    2dc6:	11 f0       	breq	.+4      	; 0x2dcc <vfprintf+0x1be>
    2dc8:	89 36       	cpi	r24, 0x69	; 105
    2dca:	39 f5       	brne	.+78     	; 0x2e1a <vfprintf+0x20c>
    2dcc:	f8 01       	movw	r30, r16
    2dce:	27 ff       	sbrs	r18, 7
    2dd0:	07 c0       	rjmp	.+14     	; 0x2de0 <vfprintf+0x1d2>
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	0c 5f       	subi	r16, 0xFC	; 252
    2ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <vfprintf+0x1e2>
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	88 27       	eor	r24, r24
    2de6:	77 fd       	sbrc	r23, 7
    2de8:	80 95       	com	r24
    2dea:	98 2f       	mov	r25, r24
    2dec:	0e 5f       	subi	r16, 0xFE	; 254
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
    2df0:	4f e6       	ldi	r20, 0x6F	; 111
    2df2:	b4 2e       	mov	r11, r20
    2df4:	b2 22       	and	r11, r18
    2df6:	97 ff       	sbrs	r25, 7
    2df8:	09 c0       	rjmp	.+18     	; 0x2e0c <vfprintf+0x1fe>
    2dfa:	90 95       	com	r25
    2dfc:	80 95       	com	r24
    2dfe:	70 95       	com	r23
    2e00:	61 95       	neg	r22
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	8f 4f       	sbci	r24, 0xFF	; 255
    2e06:	9f 4f       	sbci	r25, 0xFF	; 255
    2e08:	f0 e8       	ldi	r31, 0x80	; 128
    2e0a:	bf 2a       	or	r11, r31
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	a4 01       	movw	r20, r8
    2e12:	0c d1       	rcall	.+536    	; 0x302c <__ultoa_invert>
    2e14:	a8 2e       	mov	r10, r24
    2e16:	a8 18       	sub	r10, r8
    2e18:	42 c0       	rjmp	.+132    	; 0x2e9e <vfprintf+0x290>
    2e1a:	85 37       	cpi	r24, 0x75	; 117
    2e1c:	31 f4       	brne	.+12     	; 0x2e2a <vfprintf+0x21c>
    2e1e:	3f ee       	ldi	r19, 0xEF	; 239
    2e20:	b3 2e       	mov	r11, r19
    2e22:	b2 22       	and	r11, r18
    2e24:	2a e0       	ldi	r18, 0x0A	; 10
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	24 c0       	rjmp	.+72     	; 0x2e72 <vfprintf+0x264>
    2e2a:	99 ef       	ldi	r25, 0xF9	; 249
    2e2c:	b9 2e       	mov	r11, r25
    2e2e:	b2 22       	and	r11, r18
    2e30:	8f 36       	cpi	r24, 0x6F	; 111
    2e32:	b9 f0       	breq	.+46     	; 0x2e62 <vfprintf+0x254>
    2e34:	20 f4       	brcc	.+8      	; 0x2e3e <vfprintf+0x230>
    2e36:	88 35       	cpi	r24, 0x58	; 88
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <vfprintf+0x22e>
    2e3a:	ac c0       	rjmp	.+344    	; 0x2f94 <vfprintf+0x386>
    2e3c:	0d c0       	rjmp	.+26     	; 0x2e58 <vfprintf+0x24a>
    2e3e:	80 37       	cpi	r24, 0x70	; 112
    2e40:	21 f0       	breq	.+8      	; 0x2e4a <vfprintf+0x23c>
    2e42:	88 37       	cpi	r24, 0x78	; 120
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <vfprintf+0x23a>
    2e46:	a6 c0       	rjmp	.+332    	; 0x2f94 <vfprintf+0x386>
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <vfprintf+0x240>
    2e4a:	20 e1       	ldi	r18, 0x10	; 16
    2e4c:	b2 2a       	or	r11, r18
    2e4e:	b4 fe       	sbrs	r11, 4
    2e50:	0b c0       	rjmp	.+22     	; 0x2e68 <vfprintf+0x25a>
    2e52:	84 e0       	ldi	r24, 0x04	; 4
    2e54:	b8 2a       	or	r11, r24
    2e56:	08 c0       	rjmp	.+16     	; 0x2e68 <vfprintf+0x25a>
    2e58:	24 ff       	sbrs	r18, 4
    2e5a:	09 c0       	rjmp	.+18     	; 0x2e6e <vfprintf+0x260>
    2e5c:	e6 e0       	ldi	r30, 0x06	; 6
    2e5e:	be 2a       	or	r11, r30
    2e60:	06 c0       	rjmp	.+12     	; 0x2e6e <vfprintf+0x260>
    2e62:	28 e0       	ldi	r18, 0x08	; 8
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	05 c0       	rjmp	.+10     	; 0x2e72 <vfprintf+0x264>
    2e68:	20 e1       	ldi	r18, 0x10	; 16
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <vfprintf+0x264>
    2e6e:	20 e1       	ldi	r18, 0x10	; 16
    2e70:	32 e0       	ldi	r19, 0x02	; 2
    2e72:	f8 01       	movw	r30, r16
    2e74:	b7 fe       	sbrs	r11, 7
    2e76:	07 c0       	rjmp	.+14     	; 0x2e86 <vfprintf+0x278>
    2e78:	60 81       	ld	r22, Z
    2e7a:	71 81       	ldd	r23, Z+1	; 0x01
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	0c 5f       	subi	r16, 0xFC	; 252
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <vfprintf+0x284>
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 5f       	subi	r16, 0xFE	; 254
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	a4 01       	movw	r20, r8
    2e94:	cb d0       	rcall	.+406    	; 0x302c <__ultoa_invert>
    2e96:	a8 2e       	mov	r10, r24
    2e98:	a8 18       	sub	r10, r8
    2e9a:	ff e7       	ldi	r31, 0x7F	; 127
    2e9c:	bf 22       	and	r11, r31
    2e9e:	b6 fe       	sbrs	r11, 6
    2ea0:	0b c0       	rjmp	.+22     	; 0x2eb8 <vfprintf+0x2aa>
    2ea2:	2b 2d       	mov	r18, r11
    2ea4:	2e 7f       	andi	r18, 0xFE	; 254
    2ea6:	a5 14       	cp	r10, r5
    2ea8:	50 f4       	brcc	.+20     	; 0x2ebe <vfprintf+0x2b0>
    2eaa:	b4 fe       	sbrs	r11, 4
    2eac:	0a c0       	rjmp	.+20     	; 0x2ec2 <vfprintf+0x2b4>
    2eae:	b2 fc       	sbrc	r11, 2
    2eb0:	08 c0       	rjmp	.+16     	; 0x2ec2 <vfprintf+0x2b4>
    2eb2:	2b 2d       	mov	r18, r11
    2eb4:	2e 7e       	andi	r18, 0xEE	; 238
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <vfprintf+0x2b4>
    2eb8:	7a 2c       	mov	r7, r10
    2eba:	2b 2d       	mov	r18, r11
    2ebc:	03 c0       	rjmp	.+6      	; 0x2ec4 <vfprintf+0x2b6>
    2ebe:	7a 2c       	mov	r7, r10
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <vfprintf+0x2b6>
    2ec2:	75 2c       	mov	r7, r5
    2ec4:	24 ff       	sbrs	r18, 4
    2ec6:	0d c0       	rjmp	.+26     	; 0x2ee2 <vfprintf+0x2d4>
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ea 0d       	add	r30, r10
    2ecc:	f1 1d       	adc	r31, r1
    2ece:	80 81       	ld	r24, Z
    2ed0:	80 33       	cpi	r24, 0x30	; 48
    2ed2:	11 f4       	brne	.+4      	; 0x2ed8 <vfprintf+0x2ca>
    2ed4:	29 7e       	andi	r18, 0xE9	; 233
    2ed6:	09 c0       	rjmp	.+18     	; 0x2eea <vfprintf+0x2dc>
    2ed8:	22 ff       	sbrs	r18, 2
    2eda:	06 c0       	rjmp	.+12     	; 0x2ee8 <vfprintf+0x2da>
    2edc:	73 94       	inc	r7
    2ede:	73 94       	inc	r7
    2ee0:	04 c0       	rjmp	.+8      	; 0x2eea <vfprintf+0x2dc>
    2ee2:	82 2f       	mov	r24, r18
    2ee4:	86 78       	andi	r24, 0x86	; 134
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <vfprintf+0x2dc>
    2ee8:	73 94       	inc	r7
    2eea:	23 fd       	sbrc	r18, 3
    2eec:	13 c0       	rjmp	.+38     	; 0x2f14 <vfprintf+0x306>
    2eee:	20 ff       	sbrs	r18, 0
    2ef0:	0e c0       	rjmp	.+28     	; 0x2f0e <vfprintf+0x300>
    2ef2:	5a 2c       	mov	r5, r10
    2ef4:	73 14       	cp	r7, r3
    2ef6:	58 f4       	brcc	.+22     	; 0x2f0e <vfprintf+0x300>
    2ef8:	53 0c       	add	r5, r3
    2efa:	57 18       	sub	r5, r7
    2efc:	73 2c       	mov	r7, r3
    2efe:	07 c0       	rjmp	.+14     	; 0x2f0e <vfprintf+0x300>
    2f00:	b7 01       	movw	r22, r14
    2f02:	80 e2       	ldi	r24, 0x20	; 32
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	2c 87       	std	Y+12, r18	; 0x0c
    2f08:	65 d0       	rcall	.+202    	; 0x2fd4 <fputc>
    2f0a:	73 94       	inc	r7
    2f0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f0e:	73 14       	cp	r7, r3
    2f10:	b8 f3       	brcs	.-18     	; 0x2f00 <vfprintf+0x2f2>
    2f12:	04 c0       	rjmp	.+8      	; 0x2f1c <vfprintf+0x30e>
    2f14:	73 14       	cp	r7, r3
    2f16:	10 f4       	brcc	.+4      	; 0x2f1c <vfprintf+0x30e>
    2f18:	37 18       	sub	r3, r7
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <vfprintf+0x310>
    2f1c:	31 2c       	mov	r3, r1
    2f1e:	24 ff       	sbrs	r18, 4
    2f20:	11 c0       	rjmp	.+34     	; 0x2f44 <vfprintf+0x336>
    2f22:	b7 01       	movw	r22, r14
    2f24:	80 e3       	ldi	r24, 0x30	; 48
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	2c 87       	std	Y+12, r18	; 0x0c
    2f2a:	54 d0       	rcall	.+168    	; 0x2fd4 <fputc>
    2f2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f2e:	22 ff       	sbrs	r18, 2
    2f30:	1c c0       	rjmp	.+56     	; 0x2f6a <vfprintf+0x35c>
    2f32:	21 ff       	sbrs	r18, 1
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <vfprintf+0x32e>
    2f36:	88 e5       	ldi	r24, 0x58	; 88
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <vfprintf+0x332>
    2f3c:	88 e7       	ldi	r24, 0x78	; 120
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	b7 01       	movw	r22, r14
    2f42:	0c c0       	rjmp	.+24     	; 0x2f5c <vfprintf+0x34e>
    2f44:	82 2f       	mov	r24, r18
    2f46:	86 78       	andi	r24, 0x86	; 134
    2f48:	81 f0       	breq	.+32     	; 0x2f6a <vfprintf+0x35c>
    2f4a:	21 fd       	sbrc	r18, 1
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <vfprintf+0x344>
    2f4e:	80 e2       	ldi	r24, 0x20	; 32
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <vfprintf+0x346>
    2f52:	8b e2       	ldi	r24, 0x2B	; 43
    2f54:	27 fd       	sbrc	r18, 7
    2f56:	8d e2       	ldi	r24, 0x2D	; 45
    2f58:	b7 01       	movw	r22, r14
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	3b d0       	rcall	.+118    	; 0x2fd4 <fputc>
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <vfprintf+0x35c>
    2f60:	b7 01       	movw	r22, r14
    2f62:	80 e3       	ldi	r24, 0x30	; 48
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	36 d0       	rcall	.+108    	; 0x2fd4 <fputc>
    2f68:	5a 94       	dec	r5
    2f6a:	a5 14       	cp	r10, r5
    2f6c:	c8 f3       	brcs	.-14     	; 0x2f60 <vfprintf+0x352>
    2f6e:	aa 94       	dec	r10
    2f70:	f4 01       	movw	r30, r8
    2f72:	ea 0d       	add	r30, r10
    2f74:	f1 1d       	adc	r31, r1
    2f76:	b7 01       	movw	r22, r14
    2f78:	80 81       	ld	r24, Z
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	2b d0       	rcall	.+86     	; 0x2fd4 <fputc>
    2f7e:	a1 10       	cpse	r10, r1
    2f80:	f6 cf       	rjmp	.-20     	; 0x2f6e <vfprintf+0x360>
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <vfprintf+0x380>
    2f84:	b7 01       	movw	r22, r14
    2f86:	80 e2       	ldi	r24, 0x20	; 32
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	24 d0       	rcall	.+72     	; 0x2fd4 <fputc>
    2f8c:	3a 94       	dec	r3
    2f8e:	31 10       	cpse	r3, r1
    2f90:	f9 cf       	rjmp	.-14     	; 0x2f84 <vfprintf+0x376>
    2f92:	50 ce       	rjmp	.-864    	; 0x2c34 <vfprintf+0x26>
    2f94:	f7 01       	movw	r30, r14
    2f96:	26 81       	ldd	r18, Z+6	; 0x06
    2f98:	37 81       	ldd	r19, Z+7	; 0x07
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <vfprintf+0x392>
    2f9c:	2f ef       	ldi	r18, 0xFF	; 255
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	2c 96       	adiw	r28, 0x0c	; 12
    2fa4:	e2 e1       	ldi	r30, 0x12	; 18
    2fa6:	e7 c0       	rjmp	.+462    	; 0x3176 <__epilogue_restores__>

00002fa8 <strnlen_P>:
    2fa8:	fc 01       	movw	r30, r24
    2faa:	05 90       	lpm	r0, Z+
    2fac:	61 50       	subi	r22, 0x01	; 1
    2fae:	70 40       	sbci	r23, 0x00	; 0
    2fb0:	01 10       	cpse	r0, r1
    2fb2:	d8 f7       	brcc	.-10     	; 0x2faa <strnlen_P+0x2>
    2fb4:	80 95       	com	r24
    2fb6:	90 95       	com	r25
    2fb8:	8e 0f       	add	r24, r30
    2fba:	9f 1f       	adc	r25, r31
    2fbc:	08 95       	ret

00002fbe <strnlen>:
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	61 50       	subi	r22, 0x01	; 1
    2fc2:	70 40       	sbci	r23, 0x00	; 0
    2fc4:	01 90       	ld	r0, Z+
    2fc6:	01 10       	cpse	r0, r1
    2fc8:	d8 f7       	brcc	.-10     	; 0x2fc0 <strnlen+0x2>
    2fca:	80 95       	com	r24
    2fcc:	90 95       	com	r25
    2fce:	8e 0f       	add	r24, r30
    2fd0:	9f 1f       	adc	r25, r31
    2fd2:	08 95       	ret

00002fd4 <fputc>:
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	8c 01       	movw	r16, r24
    2fde:	eb 01       	movw	r28, r22
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	81 fd       	sbrc	r24, 1
    2fe4:	03 c0       	rjmp	.+6      	; 0x2fec <fputc+0x18>
    2fe6:	0f ef       	ldi	r16, 0xFF	; 255
    2fe8:	1f ef       	ldi	r17, 0xFF	; 255
    2fea:	1a c0       	rjmp	.+52     	; 0x3020 <fputc+0x4c>
    2fec:	82 ff       	sbrs	r24, 2
    2fee:	0d c0       	rjmp	.+26     	; 0x300a <fputc+0x36>
    2ff0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ff2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff8:	28 17       	cp	r18, r24
    2ffa:	39 07       	cpc	r19, r25
    2ffc:	64 f4       	brge	.+24     	; 0x3016 <fputc+0x42>
    2ffe:	e8 81       	ld	r30, Y
    3000:	f9 81       	ldd	r31, Y+1	; 0x01
    3002:	01 93       	st	Z+, r16
    3004:	f9 83       	std	Y+1, r31	; 0x01
    3006:	e8 83       	st	Y, r30
    3008:	06 c0       	rjmp	.+12     	; 0x3016 <fputc+0x42>
    300a:	e8 85       	ldd	r30, Y+8	; 0x08
    300c:	f9 85       	ldd	r31, Y+9	; 0x09
    300e:	80 2f       	mov	r24, r16
    3010:	09 95       	icall
    3012:	89 2b       	or	r24, r25
    3014:	41 f7       	brne	.-48     	; 0x2fe6 <fputc+0x12>
    3016:	8e 81       	ldd	r24, Y+6	; 0x06
    3018:	9f 81       	ldd	r25, Y+7	; 0x07
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	9f 83       	std	Y+7, r25	; 0x07
    301e:	8e 83       	std	Y+6, r24	; 0x06
    3020:	c8 01       	movw	r24, r16
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	08 95       	ret

0000302c <__ultoa_invert>:
    302c:	fa 01       	movw	r30, r20
    302e:	aa 27       	eor	r26, r26
    3030:	28 30       	cpi	r18, 0x08	; 8
    3032:	51 f1       	breq	.+84     	; 0x3088 <__ultoa_invert+0x5c>
    3034:	20 31       	cpi	r18, 0x10	; 16
    3036:	81 f1       	breq	.+96     	; 0x3098 <__ultoa_invert+0x6c>
    3038:	e8 94       	clt
    303a:	6f 93       	push	r22
    303c:	6e 7f       	andi	r22, 0xFE	; 254
    303e:	6e 5f       	subi	r22, 0xFE	; 254
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	8f 4f       	sbci	r24, 0xFF	; 255
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	af 4f       	sbci	r26, 0xFF	; 255
    3048:	b1 e0       	ldi	r27, 0x01	; 1
    304a:	3e d0       	rcall	.+124    	; 0x30c8 <__ultoa_invert+0x9c>
    304c:	b4 e0       	ldi	r27, 0x04	; 4
    304e:	3c d0       	rcall	.+120    	; 0x30c8 <__ultoa_invert+0x9c>
    3050:	67 0f       	add	r22, r23
    3052:	78 1f       	adc	r23, r24
    3054:	89 1f       	adc	r24, r25
    3056:	9a 1f       	adc	r25, r26
    3058:	a1 1d       	adc	r26, r1
    305a:	68 0f       	add	r22, r24
    305c:	79 1f       	adc	r23, r25
    305e:	8a 1f       	adc	r24, r26
    3060:	91 1d       	adc	r25, r1
    3062:	a1 1d       	adc	r26, r1
    3064:	6a 0f       	add	r22, r26
    3066:	71 1d       	adc	r23, r1
    3068:	81 1d       	adc	r24, r1
    306a:	91 1d       	adc	r25, r1
    306c:	a1 1d       	adc	r26, r1
    306e:	20 d0       	rcall	.+64     	; 0x30b0 <__ultoa_invert+0x84>
    3070:	09 f4       	brne	.+2      	; 0x3074 <__ultoa_invert+0x48>
    3072:	68 94       	set
    3074:	3f 91       	pop	r19
    3076:	2a e0       	ldi	r18, 0x0A	; 10
    3078:	26 9f       	mul	r18, r22
    307a:	11 24       	eor	r1, r1
    307c:	30 19       	sub	r19, r0
    307e:	30 5d       	subi	r19, 0xD0	; 208
    3080:	31 93       	st	Z+, r19
    3082:	de f6       	brtc	.-74     	; 0x303a <__ultoa_invert+0xe>
    3084:	cf 01       	movw	r24, r30
    3086:	08 95       	ret
    3088:	46 2f       	mov	r20, r22
    308a:	47 70       	andi	r20, 0x07	; 7
    308c:	40 5d       	subi	r20, 0xD0	; 208
    308e:	41 93       	st	Z+, r20
    3090:	b3 e0       	ldi	r27, 0x03	; 3
    3092:	0f d0       	rcall	.+30     	; 0x30b2 <__ultoa_invert+0x86>
    3094:	c9 f7       	brne	.-14     	; 0x3088 <__ultoa_invert+0x5c>
    3096:	f6 cf       	rjmp	.-20     	; 0x3084 <__ultoa_invert+0x58>
    3098:	46 2f       	mov	r20, r22
    309a:	4f 70       	andi	r20, 0x0F	; 15
    309c:	40 5d       	subi	r20, 0xD0	; 208
    309e:	4a 33       	cpi	r20, 0x3A	; 58
    30a0:	18 f0       	brcs	.+6      	; 0x30a8 <__ultoa_invert+0x7c>
    30a2:	49 5d       	subi	r20, 0xD9	; 217
    30a4:	31 fd       	sbrc	r19, 1
    30a6:	40 52       	subi	r20, 0x20	; 32
    30a8:	41 93       	st	Z+, r20
    30aa:	02 d0       	rcall	.+4      	; 0x30b0 <__ultoa_invert+0x84>
    30ac:	a9 f7       	brne	.-22     	; 0x3098 <__ultoa_invert+0x6c>
    30ae:	ea cf       	rjmp	.-44     	; 0x3084 <__ultoa_invert+0x58>
    30b0:	b4 e0       	ldi	r27, 0x04	; 4
    30b2:	a6 95       	lsr	r26
    30b4:	97 95       	ror	r25
    30b6:	87 95       	ror	r24
    30b8:	77 95       	ror	r23
    30ba:	67 95       	ror	r22
    30bc:	ba 95       	dec	r27
    30be:	c9 f7       	brne	.-14     	; 0x30b2 <__ultoa_invert+0x86>
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	61 05       	cpc	r22, r1
    30c4:	71 05       	cpc	r23, r1
    30c6:	08 95       	ret
    30c8:	9b 01       	movw	r18, r22
    30ca:	ac 01       	movw	r20, r24
    30cc:	0a 2e       	mov	r0, r26
    30ce:	06 94       	lsr	r0
    30d0:	57 95       	ror	r21
    30d2:	47 95       	ror	r20
    30d4:	37 95       	ror	r19
    30d6:	27 95       	ror	r18
    30d8:	ba 95       	dec	r27
    30da:	c9 f7       	brne	.-14     	; 0x30ce <__ultoa_invert+0xa2>
    30dc:	62 0f       	add	r22, r18
    30de:	73 1f       	adc	r23, r19
    30e0:	84 1f       	adc	r24, r20
    30e2:	95 1f       	adc	r25, r21
    30e4:	a0 1d       	adc	r26, r0
    30e6:	08 95       	ret

000030e8 <__divmodsi4>:
    30e8:	05 2e       	mov	r0, r21
    30ea:	97 fb       	bst	r25, 7
    30ec:	16 f4       	brtc	.+4      	; 0x30f2 <__divmodsi4+0xa>
    30ee:	00 94       	com	r0
    30f0:	06 d0       	rcall	.+12     	; 0x30fe <__divmodsi4_neg1>
    30f2:	57 fd       	sbrc	r21, 7
    30f4:	0c d0       	rcall	.+24     	; 0x310e <__divmodsi4_neg2>
    30f6:	5a d0       	rcall	.+180    	; 0x31ac <__udivmodsi4>
    30f8:	07 fc       	sbrc	r0, 7
    30fa:	09 d0       	rcall	.+18     	; 0x310e <__divmodsi4_neg2>
    30fc:	7e f4       	brtc	.+30     	; 0x311c <__divmodsi4_exit>

000030fe <__divmodsi4_neg1>:
    30fe:	90 95       	com	r25
    3100:	80 95       	com	r24
    3102:	70 95       	com	r23
    3104:	61 95       	neg	r22
    3106:	7f 4f       	sbci	r23, 0xFF	; 255
    3108:	8f 4f       	sbci	r24, 0xFF	; 255
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	08 95       	ret

0000310e <__divmodsi4_neg2>:
    310e:	50 95       	com	r21
    3110:	40 95       	com	r20
    3112:	30 95       	com	r19
    3114:	21 95       	neg	r18
    3116:	3f 4f       	sbci	r19, 0xFF	; 255
    3118:	4f 4f       	sbci	r20, 0xFF	; 255
    311a:	5f 4f       	sbci	r21, 0xFF	; 255

0000311c <__divmodsi4_exit>:
    311c:	08 95       	ret

0000311e <__muluhisi3>:
    311e:	68 d0       	rcall	.+208    	; 0x31f0 <__umulhisi3>
    3120:	a5 9f       	mul	r26, r21
    3122:	90 0d       	add	r25, r0
    3124:	b4 9f       	mul	r27, r20
    3126:	90 0d       	add	r25, r0
    3128:	a4 9f       	mul	r26, r20
    312a:	80 0d       	add	r24, r0
    312c:	91 1d       	adc	r25, r1
    312e:	11 24       	eor	r1, r1
    3130:	08 95       	ret

00003132 <__mulshisi3>:
    3132:	b7 ff       	sbrs	r27, 7
    3134:	f4 cf       	rjmp	.-24     	; 0x311e <__muluhisi3>

00003136 <__mulohisi3>:
    3136:	f3 df       	rcall	.-26     	; 0x311e <__muluhisi3>
    3138:	82 1b       	sub	r24, r18
    313a:	93 0b       	sbc	r25, r19
    313c:	08 95       	ret

0000313e <__prologue_saves__>:
    313e:	2f 92       	push	r2
    3140:	3f 92       	push	r3
    3142:	4f 92       	push	r4
    3144:	5f 92       	push	r5
    3146:	6f 92       	push	r6
    3148:	7f 92       	push	r7
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	ca 1b       	sub	r28, r26
    3168:	db 0b       	sbc	r29, r27
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	09 94       	ijmp

00003176 <__epilogue_restores__>:
    3176:	2a 88       	ldd	r2, Y+18	; 0x12
    3178:	39 88       	ldd	r3, Y+17	; 0x11
    317a:	48 88       	ldd	r4, Y+16	; 0x10
    317c:	5f 84       	ldd	r5, Y+15	; 0x0f
    317e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3180:	7d 84       	ldd	r7, Y+13	; 0x0d
    3182:	8c 84       	ldd	r8, Y+12	; 0x0c
    3184:	9b 84       	ldd	r9, Y+11	; 0x0b
    3186:	aa 84       	ldd	r10, Y+10	; 0x0a
    3188:	b9 84       	ldd	r11, Y+9	; 0x09
    318a:	c8 84       	ldd	r12, Y+8	; 0x08
    318c:	df 80       	ldd	r13, Y+7	; 0x07
    318e:	ee 80       	ldd	r14, Y+6	; 0x06
    3190:	fd 80       	ldd	r15, Y+5	; 0x05
    3192:	0c 81       	ldd	r16, Y+4	; 0x04
    3194:	1b 81       	ldd	r17, Y+3	; 0x03
    3196:	aa 81       	ldd	r26, Y+2	; 0x02
    3198:	b9 81       	ldd	r27, Y+1	; 0x01
    319a:	ce 0f       	add	r28, r30
    319c:	d1 1d       	adc	r29, r1
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	cd bf       	out	0x3d, r28	; 61
    31a8:	ed 01       	movw	r28, r26
    31aa:	08 95       	ret

000031ac <__udivmodsi4>:
    31ac:	a1 e2       	ldi	r26, 0x21	; 33
    31ae:	1a 2e       	mov	r1, r26
    31b0:	aa 1b       	sub	r26, r26
    31b2:	bb 1b       	sub	r27, r27
    31b4:	fd 01       	movw	r30, r26
    31b6:	0d c0       	rjmp	.+26     	; 0x31d2 <__udivmodsi4_ep>

000031b8 <__udivmodsi4_loop>:
    31b8:	aa 1f       	adc	r26, r26
    31ba:	bb 1f       	adc	r27, r27
    31bc:	ee 1f       	adc	r30, r30
    31be:	ff 1f       	adc	r31, r31
    31c0:	a2 17       	cp	r26, r18
    31c2:	b3 07       	cpc	r27, r19
    31c4:	e4 07       	cpc	r30, r20
    31c6:	f5 07       	cpc	r31, r21
    31c8:	20 f0       	brcs	.+8      	; 0x31d2 <__udivmodsi4_ep>
    31ca:	a2 1b       	sub	r26, r18
    31cc:	b3 0b       	sbc	r27, r19
    31ce:	e4 0b       	sbc	r30, r20
    31d0:	f5 0b       	sbc	r31, r21

000031d2 <__udivmodsi4_ep>:
    31d2:	66 1f       	adc	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	88 1f       	adc	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	1a 94       	dec	r1
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <__udivmodsi4_loop>
    31de:	60 95       	com	r22
    31e0:	70 95       	com	r23
    31e2:	80 95       	com	r24
    31e4:	90 95       	com	r25
    31e6:	9b 01       	movw	r18, r22
    31e8:	ac 01       	movw	r20, r24
    31ea:	bd 01       	movw	r22, r26
    31ec:	cf 01       	movw	r24, r30
    31ee:	08 95       	ret

000031f0 <__umulhisi3>:
    31f0:	a2 9f       	mul	r26, r18
    31f2:	b0 01       	movw	r22, r0
    31f4:	b3 9f       	mul	r27, r19
    31f6:	c0 01       	movw	r24, r0
    31f8:	a3 9f       	mul	r26, r19
    31fa:	01 d0       	rcall	.+2      	; 0x31fe <__umulhisi3+0xe>
    31fc:	b2 9f       	mul	r27, r18
    31fe:	70 0d       	add	r23, r0
    3200:	81 1d       	adc	r24, r1
    3202:	11 24       	eor	r1, r1
    3204:	91 1d       	adc	r25, r1
    3206:	08 95       	ret

00003208 <_exit>:
    3208:	f8 94       	cli

0000320a <__stop_program>:
    320a:	ff cf       	rjmp	.-2      	; 0x320a <__stop_program>
