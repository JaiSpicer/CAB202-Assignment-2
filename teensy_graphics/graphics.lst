   1               		.file	"graphics.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.refresh,"ax",@progbits
  11               	.global	refresh
  13               	refresh:
  14               	.LFB1:
  15               		.file 1 "graphics.c"
   1:graphics.c    **** /*
   2:graphics.c    ****  * Graphics.c
   3:graphics.c    ****  *
   4:graphics.c    ****  * Created: 20/12/2012 11:59:59 PM
   5:graphics.c    ****  *  Author: Michael a.k.a Not that there's anything wrong with that
   6:graphics.c    ****  */ 
   7:graphics.c    **** #include <avr/pgmspace.h>
   8:graphics.c    **** #include "graphics.h"
   9:graphics.c    **** #include "lcd.h"
  10:graphics.c    **** 
  11:graphics.c    **** unsigned char screenBuffer[LCD_BUFFER_SIZE]; // Our screen buffer array
  12:graphics.c    **** 
  13:graphics.c    **** void refresh(void) {
  16               		.loc 1 13 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  14:graphics.c    **** 	// Reset our position in the LCD RAM
  15:graphics.c    **** 	LCDPosition(0,0);
  30               		.loc 1 15 0
  31 0004 60E0      		ldi r22,0
  32 0006 80E0      		ldi r24,0
  33 0008 0E94 0000 		call LCDPosition
  34               	.LVL0:
  35 000c C0E0      		ldi r28,lo8(screenBuffer)
  36 000e D0E0      		ldi r29,hi8(screenBuffer)
  37               	.LVL1:
  38               	.L2:
  16:graphics.c    **** 	// Iterate through our buffer and write each byte to the LCD.
  17:graphics.c    **** 	unsigned int i;
  18:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  19:graphics.c    **** 		LCDWrite(LCD_D, screenBuffer[i]);
  39               		.loc 1 19 0 discriminator 2
  40 0010 6991      		ld r22,Y+
  41 0012 81E0      		ldi r24,lo8(1)
  42 0014 0E94 0000 		call LCDWrite
  43               	.LVL2:
  18:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  44               		.loc 1 18 0 discriminator 2
  45 0018 80E0      		ldi r24,hi8(screenBuffer+504)
  46 001a C030      		cpi r28,lo8(screenBuffer+504)
  47 001c D807      		cpc r29,r24
  48 001e 01F4      		brne .L2
  49               	/* epilogue start */
  20:graphics.c    **** 	}
  21:graphics.c    **** 	
  22:graphics.c    **** }
  50               		.loc 1 22 0
  51 0020 DF91      		pop r29
  52 0022 CF91      		pop r28
  53 0024 0895      		ret
  54               		.cfi_endproc
  55               	.LFE1:
  57               		.section	.text.clear,"ax",@progbits
  58               	.global	clear
  60               	clear:
  61               	.LFB2:
  23:graphics.c    **** 
  24:graphics.c    **** void clear(void) {
  62               		.loc 1 24 0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  68               	.LVL3:
  69 0000 E0E0      		ldi r30,lo8(screenBuffer)
  70 0002 F0E0      		ldi r31,hi8(screenBuffer)
  71               	.LVL4:
  72               	.L5:
  25:graphics.c    **** 	unsigned int i;
  26:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  27:graphics.c    **** 		 screenBuffer[i] = 0;
  73               		.loc 1 27 0 discriminator 2
  74 0004 1192      		st Z+,__zero_reg__
  26:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  75               		.loc 1 26 0 discriminator 2
  76 0006 80E0      		ldi r24,hi8(screenBuffer+504)
  77 0008 E030      		cpi r30,lo8(screenBuffer+504)
  78 000a F807      		cpc r31,r24
  79 000c 01F4      		brne .L5
  80               	/* epilogue start */
  28:graphics.c    **** 	}
  29:graphics.c    **** }
  81               		.loc 1 29 0
  82 000e 0895      		ret
  83               		.cfi_endproc
  84               	.LFE2:
  86               		.section	.text.set_pixel,"ax",@progbits
  87               	.global	set_pixel
  89               	set_pixel:
  90               	.LFB3:
  30:graphics.c    **** void set_pixel(unsigned char x, unsigned char y, unsigned char value){
  91               		.loc 1 30 0
  92               		.cfi_startproc
  93               	.LVL5:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  31:graphics.c    **** 	// Sanity check (bad things happen otherwise...)
  32:graphics.c    **** 	if (x >= LCD_X || y >= LCD_Y) {
  98               		.loc 1 32 0
  99 0000 8435      		cpi r24,lo8(84)
 100 0002 00F4      		brsh .L7
 101               		.loc 1 32 0 is_stmt 0 discriminator 1
 102 0004 6033      		cpi r22,lo8(48)
 103 0006 00F4      		brsh .L7
 104               	.LVL6:
 105               	.LBB4:
 106               	.LBB5:
  33:graphics.c    **** 		return;
  34:graphics.c    **** 	}
  35:graphics.c    **** 
  36:graphics.c    **** 	// Calculate the pixel 'subrow', within that LCD row
  37:graphics.c    **** 	unsigned char row = y/8;
 107               		.loc 1 37 0 is_stmt 1
 108 0008 E62F      		mov r30,r22
 109 000a E695      		lsr r30
 110 000c E695      		lsr r30
 111 000e E695      		lsr r30
 112               	.LVL7:
  38:graphics.c    **** 	unsigned char subrow = y%8;
 113               		.loc 1 38 0
 114 0010 6770      		andi r22,lo8(7)
 115               	.LVL8:
 116 0012 94E5      		ldi r25,lo8(84)
 117 0014 E99F      		mul r30,r25
 118 0016 F001      		movw r30,r0
 119 0018 1124      		clr __zero_reg__
 120               	.LVL9:
 121 001a 90E0      		ldi r25,0
  39:graphics.c    **** 	
  40:graphics.c    **** 	// Set that particular pixel in our screen buffer
  41:graphics.c    **** 	if (value){
  42:graphics.c    **** 		screenBuffer[row*84+x] |= (1 << subrow); //Set Pixel 
 122               		.loc 1 42 0
 123 001c E80F      		add r30,r24
 124 001e F91F      		adc r31,r25
 125 0020 E050      		subi r30,lo8(-(screenBuffer))
 126 0022 F040      		sbci r31,hi8(-(screenBuffer))
 127 0024 81E0      		ldi r24,lo8(1)
 128 0026 90E0      		ldi r25,0
 129               	.LVL10:
 130 0028 062E      		mov r0,r22
 131 002a 00C0      		rjmp 2f
 132               		1:
 133 002c 880F      		lsl r24
 134               		2:
 135 002e 0A94      		dec r0
 136 0030 02F4      		brpl 1b
  41:graphics.c    **** 	if (value){
 137               		.loc 1 41 0
 138 0032 4423      		tst r20
 139 0034 01F0      		breq .L9
 140               		.loc 1 42 0
 141 0036 9081      		ld r25,Z
 142 0038 982B      		or r25,r24
 143 003a 00C0      		rjmp .L10
 144               	.L9:
  43:graphics.c    **** 	} else {
  44:graphics.c    **** 		screenBuffer[row*84+x] &= ~(1 << subrow); //Clear Pixel
 145               		.loc 1 44 0
 146 003c 8095      		com r24
 147 003e 9081      		ld r25,Z
 148 0040 9823      		and r25,r24
 149               	.L10:
 150 0042 9083      		st Z,r25
 151               	.LVL11:
 152               	.L7:
 153 0044 0895      		ret
 154               	.LBE5:
 155               	.LBE4:
 156               		.cfi_endproc
 157               	.LFE3:
 159               	.global	__floatunsisf
 160               	.global	__floatsisf
 161               	.global	__subsf3
 162               	.global	__divsf3
 163               	.global	__gtsf2
 164               	.global	__lesf2
 165               	.global	__gesf2
 166               	.global	__addsf3
 167               	.global	__mulsf3
 168               	.global	__ltsf2
 169               		.section	.text.draw_line,"ax",@progbits
 170               	.global	draw_line
 172               	draw_line:
 173               	.LFB4:
  45:graphics.c    **** 	}
  46:graphics.c    **** }
  47:graphics.c    **** 
  48:graphics.c    **** void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
 174               		.loc 1 48 0
 175               		.cfi_startproc
 176               	.LVL12:
 177 0000 2F92      		push r2
 178               	.LCFI2:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 2, -2
 181 0002 3F92      		push r3
 182               	.LCFI3:
 183               		.cfi_def_cfa_offset 4
 184               		.cfi_offset 3, -3
 185 0004 4F92      		push r4
 186               	.LCFI4:
 187               		.cfi_def_cfa_offset 5
 188               		.cfi_offset 4, -4
 189 0006 5F92      		push r5
 190               	.LCFI5:
 191               		.cfi_def_cfa_offset 6
 192               		.cfi_offset 5, -5
 193 0008 6F92      		push r6
 194               	.LCFI6:
 195               		.cfi_def_cfa_offset 7
 196               		.cfi_offset 6, -6
 197 000a 7F92      		push r7
 198               	.LCFI7:
 199               		.cfi_def_cfa_offset 8
 200               		.cfi_offset 7, -7
 201 000c 8F92      		push r8
 202               	.LCFI8:
 203               		.cfi_def_cfa_offset 9
 204               		.cfi_offset 8, -8
 205 000e 9F92      		push r9
 206               	.LCFI9:
 207               		.cfi_def_cfa_offset 10
 208               		.cfi_offset 9, -9
 209 0010 AF92      		push r10
 210               	.LCFI10:
 211               		.cfi_def_cfa_offset 11
 212               		.cfi_offset 10, -10
 213 0012 BF92      		push r11
 214               	.LCFI11:
 215               		.cfi_def_cfa_offset 12
 216               		.cfi_offset 11, -11
 217 0014 CF92      		push r12
 218               	.LCFI12:
 219               		.cfi_def_cfa_offset 13
 220               		.cfi_offset 12, -12
 221 0016 DF92      		push r13
 222               	.LCFI13:
 223               		.cfi_def_cfa_offset 14
 224               		.cfi_offset 13, -13
 225 0018 EF92      		push r14
 226               	.LCFI14:
 227               		.cfi_def_cfa_offset 15
 228               		.cfi_offset 14, -14
 229 001a FF92      		push r15
 230               	.LCFI15:
 231               		.cfi_def_cfa_offset 16
 232               		.cfi_offset 15, -15
 233 001c 0F93      		push r16
 234               	.LCFI16:
 235               		.cfi_def_cfa_offset 17
 236               		.cfi_offset 16, -16
 237 001e 1F93      		push r17
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 18
 240               		.cfi_offset 17, -17
 241 0020 CF93      		push r28
 242               	.LCFI18:
 243               		.cfi_def_cfa_offset 19
 244               		.cfi_offset 28, -18
 245 0022 DF93      		push r29
 246               	.LCFI19:
 247               		.cfi_def_cfa_offset 20
 248               		.cfi_offset 29, -19
 249 0024 CDB7      		in r28,__SP_L__
 250 0026 DEB7      		in r29,__SP_H__
 251               	.LCFI20:
 252               		.cfi_def_cfa_register 28
 253 0028 6297      		sbiw r28,18
 254               	.LCFI21:
 255               		.cfi_def_cfa_offset 38
 256 002a 0FB6      		in __tmp_reg__,__SREG__
 257 002c F894      		cli
 258 002e DEBF      		out __SP_H__,r29
 259 0030 0FBE      		out __SREG__,__tmp_reg__
 260 0032 CDBF      		out __SP_L__,r28
 261               	/* prologue: function */
 262               	/* frame size = 18 */
 263               	/* stack size = 36 */
 264               	.L__stack_usage = 36
 265 0034 A82E      		mov r10,r24
 266 0036 962E      		mov r9,r22
 267 0038 842E      		mov r8,r20
 268 003a B22E      		mov r11,r18
  49:graphics.c    **** 	// Insert algorithm here.
  50:graphics.c    **** 	if (x1 == x2) {
 269               		.loc 1 50 0
 270 003c 8413      		cpse r24,r20
 271 003e 00C0      		rjmp .L12
 272 0040 00C0      		rjmp .L13
 273               	.LVL13:
 274               	.L14:
 275               	.LBB6:
  51:graphics.c    **** 		//Draw Horizontal line
  52:graphics.c    **** 		unsigned char i;
  53:graphics.c    **** 		for (i = y1; i <= y2; i++){
  54:graphics.c    **** 			set_pixel(x1, i, 1);
 276               		.loc 1 54 0 discriminator 2
 277 0042 41E0      		ldi r20,lo8(1)
 278 0044 692D      		mov r22,r9
 279 0046 8A2D      		mov r24,r10
 280 0048 0E94 0000 		call set_pixel
 281               	.LVL14:
  53:graphics.c    **** 		for (i = y1; i <= y2; i++){
 282               		.loc 1 53 0 discriminator 2
 283 004c 9394      		inc r9
 284               	.LVL15:
 285               	.L13:
  53:graphics.c    **** 		for (i = y1; i <= y2; i++){
 286               		.loc 1 53 0 is_stmt 0 discriminator 1
 287 004e B914      		cp r11,r9
 288 0050 00F4      		brsh .L14
 289 0052 00C0      		rjmp .L11
 290               	.LVL16:
 291               	.L12:
 292               	.LBE6:
  55:graphics.c    **** 		}			
  56:graphics.c    **** 	} else if (y1 == y2){
 293               		.loc 1 56 0 is_stmt 1
 294 0054 6213      		cpse r22,r18
 295 0056 00C0      		rjmp .L15
 296 0058 00C0      		rjmp .L16
 297               	.LVL17:
 298               	.L17:
 299               	.LBB7:
  57:graphics.c    **** 		//Draw vertical line
  58:graphics.c    **** 		unsigned char i;
  59:graphics.c    **** 		for (i = x1; i <= x2; i++){
  60:graphics.c    **** 			set_pixel(i, y1, 1);
 300               		.loc 1 60 0 discriminator 2
 301 005a 41E0      		ldi r20,lo8(1)
 302 005c 692D      		mov r22,r9
 303 005e 8A2D      		mov r24,r10
 304 0060 0E94 0000 		call set_pixel
 305               	.LVL18:
  59:graphics.c    **** 		for (i = x1; i <= x2; i++){
 306               		.loc 1 59 0 discriminator 2
 307 0064 A394      		inc r10
 308               	.LVL19:
 309               	.L16:
  59:graphics.c    **** 		for (i = x1; i <= x2; i++){
 310               		.loc 1 59 0 is_stmt 0 discriminator 1
 311 0066 8A14      		cp r8,r10
 312 0068 00F4      		brsh .L17
 313 006a 00C0      		rjmp .L11
 314               	.LVL20:
 315               	.L15:
 316               	.LBE7:
 317               	.LBB8:
  61:graphics.c    **** 		}		
  62:graphics.c    **** 	} else {
  63:graphics.c    **** 		//As if I am going to bother with diagonal
  64:graphics.c    **** 		// Figure out octant
  65:graphics.c    **** 		unsigned int oct;
  66:graphics.c    **** 		float g = ((float) y2-y1)/((float) x2-x1);
 318               		.loc 1 66 0 is_stmt 1
 319 006c 622F      		mov r22,r18
 320 006e 70E0      		ldi r23,0
 321 0070 80E0      		ldi r24,0
 322 0072 90E0      		ldi r25,0
 323 0074 0E94 0000 		call __floatunsisf
 324               	.LVL21:
 325 0078 6B01      		movw r12,r22
 326 007a 7C01      		movw r14,r24
 327 007c 692D      		mov r22,r9
 328 007e 70E0      		ldi r23,0
 329 0080 80E0      		ldi r24,0
 330 0082 90E0      		ldi r25,0
 331 0084 0E94 0000 		call __floatsisf
 332               	.LVL22:
 333 0088 9B01      		movw r18,r22
 334 008a AC01      		movw r20,r24
 335 008c C701      		movw r24,r14
 336 008e B601      		movw r22,r12
 337 0090 0E94 0000 		call __subsf3
 338               	.LVL23:
 339 0094 1B01      		movw r2,r22
 340 0096 2C01      		movw r4,r24
 341 0098 682D      		mov r22,r8
 342 009a 70E0      		ldi r23,0
 343 009c 80E0      		ldi r24,0
 344 009e 90E0      		ldi r25,0
 345 00a0 0E94 0000 		call __floatunsisf
 346               	.LVL24:
 347 00a4 6B01      		movw r12,r22
 348 00a6 7C01      		movw r14,r24
 349 00a8 6A2D      		mov r22,r10
 350 00aa 70E0      		ldi r23,0
 351 00ac 80E0      		ldi r24,0
 352 00ae 90E0      		ldi r25,0
 353 00b0 0E94 0000 		call __floatsisf
 354               	.LVL25:
 355 00b4 9B01      		movw r18,r22
 356 00b6 AC01      		movw r20,r24
 357 00b8 C701      		movw r24,r14
 358 00ba B601      		movw r22,r12
 359 00bc 0E94 0000 		call __subsf3
 360               	.LVL26:
 361 00c0 3B01      		movw r6,r22
 362 00c2 8C01      		movw r16,r24
 363 00c4 762F      		mov r23,r22
 364 00c6 272F      		mov r18,r23
 365 00c8 372D      		mov r19,r7
 366 00ca 402F      		mov r20,r16
 367 00cc 512F      		mov r21,r17
 368 00ce 622D      		mov r22,r2
 369 00d0 732D      		mov r23,r3
 370 00d2 842D      		mov r24,r4
 371 00d4 952D      		mov r25,r5
 372 00d6 0E94 0000 		call __divsf3
 373               	.LVL27:
 374 00da 6B01      		movw r12,r22
 375 00dc 7C01      		movw r14,r24
 376               	.LVL28:
  67:graphics.c    **** 		if (x2 > x1) {
  68:graphics.c    **** 			if (g > 1) {
 377               		.loc 1 68 0
 378 00de 20E0      		ldi r18,0
 379 00e0 30E0      		ldi r19,0
 380 00e2 40E8      		ldi r20,lo8(-128)
 381 00e4 5FE3      		ldi r21,lo8(63)
 382 00e6 7D2D      		mov r23,r13
 383 00e8 9F2D      		mov r25,r15
  67:graphics.c    **** 		if (x2 > x1) {
 384               		.loc 1 67 0
 385 00ea A814      		cp r10,r8
 386 00ec 00F4      		brsh .L19
 387               		.loc 1 68 0
 388 00ee 0E94 0000 		call __gtsf2
 389               	.LVL29:
 390 00f2 1816      		cp __zero_reg__,r24
 391 00f4 04F4      		brge .+2
 392 00f6 00C0      		rjmp .L50
  69:graphics.c    **** 				oct = 1;
  70:graphics.c    **** 			} else if (g <= 1 && g > 0) {
 393               		.loc 1 70 0
 394 00f8 20E0      		ldi r18,0
 395 00fa 30E0      		ldi r19,0
 396 00fc 40E8      		ldi r20,lo8(-128)
 397 00fe 5FE3      		ldi r21,lo8(63)
 398 0100 6C2D      		mov r22,r12
 399 0102 7D2D      		mov r23,r13
 400 0104 8E2D      		mov r24,r14
 401 0106 9F2D      		mov r25,r15
 402 0108 0E94 0000 		call __lesf2
 403               	.LVL30:
 404 010c 1816      		cp __zero_reg__,r24
 405 010e 04F0      		brlt .L21
 406               		.loc 1 70 0 is_stmt 0 discriminator 1
 407 0110 20E0      		ldi r18,0
 408 0112 30E0      		ldi r19,0
 409 0114 A901      		movw r20,r18
 410 0116 6C2D      		mov r22,r12
 411 0118 7D2D      		mov r23,r13
 412 011a 8E2D      		mov r24,r14
 413 011c 9F2D      		mov r25,r15
 414 011e 0E94 0000 		call __gtsf2
 415               	.LVL31:
 416 0122 1816      		cp __zero_reg__,r24
 417 0124 04F4      		brge .+2
 418 0126 00C0      		rjmp .L51
 419               	.L21:
  71:graphics.c    **** 				oct = 0;
  72:graphics.c    **** 			} else if (g <= 0 && g > -1) {
 420               		.loc 1 72 0 is_stmt 1
 421 0128 20E0      		ldi r18,0
 422 012a 30E0      		ldi r19,0
 423 012c A901      		movw r20,r18
 424 012e 6C2D      		mov r22,r12
 425 0130 7D2D      		mov r23,r13
 426 0132 8E2D      		mov r24,r14
 427 0134 9F2D      		mov r25,r15
 428 0136 0E94 0000 		call __lesf2
 429               	.LVL32:
 430 013a 1816      		cp __zero_reg__,r24
 431 013c 04F4      		brge .+2
 432 013e 00C0      		rjmp .L64
 433               		.loc 1 72 0 is_stmt 0 discriminator 1
 434 0140 20E0      		ldi r18,0
 435 0142 30E0      		ldi r19,0
 436 0144 40E8      		ldi r20,lo8(-128)
 437 0146 5FEB      		ldi r21,lo8(-65)
 438 0148 6C2D      		mov r22,r12
 439 014a 7D2D      		mov r23,r13
 440 014c 8E2D      		mov r24,r14
 441 014e 9F2D      		mov r25,r15
 442 0150 0E94 0000 		call __gtsf2
 443               	.LVL33:
 444 0154 1816      		cp __zero_reg__,r24
 445 0156 04F4      		brge .+2
 446 0158 00C0      		rjmp .L53
 447 015a 00C0      		rjmp .L64
 448               	.LVL34:
 449               	.L19:
  73:graphics.c    **** 				oct = 7;
  74:graphics.c    **** 			} else {
  75:graphics.c    **** 				oct = 6;
  76:graphics.c    **** 			}
  77:graphics.c    **** 		} else {
  78:graphics.c    **** 			if (g > 1) {
 450               		.loc 1 78 0 is_stmt 1
 451 015c 0E94 0000 		call __gtsf2
 452               	.LVL35:
 453 0160 1816      		cp __zero_reg__,r24
 454 0162 04F4      		brge .+2
 455 0164 00C0      		rjmp .L54
  79:graphics.c    **** 				oct = 5;
  80:graphics.c    **** 			} else if (g <= 1 && g > 0) {
 456               		.loc 1 80 0
 457 0166 20E0      		ldi r18,0
 458 0168 30E0      		ldi r19,0
 459 016a 40E8      		ldi r20,lo8(-128)
 460 016c 5FE3      		ldi r21,lo8(63)
 461 016e 6C2D      		mov r22,r12
 462 0170 7D2D      		mov r23,r13
 463 0172 8E2D      		mov r24,r14
 464 0174 9F2D      		mov r25,r15
 465 0176 0E94 0000 		call __lesf2
 466               	.LVL36:
 467 017a 1816      		cp __zero_reg__,r24
 468 017c 04F0      		brlt .L25
 469               		.loc 1 80 0 is_stmt 0 discriminator 1
 470 017e 20E0      		ldi r18,0
 471 0180 30E0      		ldi r19,0
 472 0182 A901      		movw r20,r18
 473 0184 6C2D      		mov r22,r12
 474 0186 7D2D      		mov r23,r13
 475 0188 8E2D      		mov r24,r14
 476 018a 9F2D      		mov r25,r15
 477 018c 0E94 0000 		call __gtsf2
 478               	.LVL37:
 479 0190 1816      		cp __zero_reg__,r24
 480 0192 04F4      		brge .+2
 481 0194 00C0      		rjmp .L55
 482               	.L25:
  81:graphics.c    **** 				oct = 4;
  82:graphics.c    **** 			} else if (g <= 0 && g > -1) {
 483               		.loc 1 82 0 is_stmt 1
 484 0196 20E0      		ldi r18,0
 485 0198 30E0      		ldi r19,0
 486 019a A901      		movw r20,r18
 487 019c 6C2D      		mov r22,r12
 488 019e 7D2D      		mov r23,r13
 489 01a0 8E2D      		mov r24,r14
 490 01a2 9F2D      		mov r25,r15
 491 01a4 0E94 0000 		call __lesf2
 492               	.LVL38:
 493 01a8 1816      		cp __zero_reg__,r24
 494 01aa 04F4      		brge .+2
 495 01ac 00C0      		rjmp .L65
 496               		.loc 1 82 0 is_stmt 0 discriminator 1
 497 01ae 20E0      		ldi r18,0
 498 01b0 30E0      		ldi r19,0
 499 01b2 40E8      		ldi r20,lo8(-128)
 500 01b4 5FEB      		ldi r21,lo8(-65)
 501 01b6 6C2D      		mov r22,r12
 502 01b8 7D2D      		mov r23,r13
 503 01ba 8E2D      		mov r24,r14
 504 01bc 9F2D      		mov r25,r15
 505 01be 0E94 0000 		call __gtsf2
 506               	.LVL39:
 507 01c2 1816      		cp __zero_reg__,r24
 508 01c4 04F4      		brge .+2
 509 01c6 00C0      		rjmp .L57
  83:graphics.c    **** 				oct = 3;
  84:graphics.c    **** 			} else {
  85:graphics.c    **** 				oct = 2;
 510               		.loc 1 85 0 is_stmt 1
 511 01c8 A2E0      		ldi r26,lo8(2)
 512 01ca B0E0      		ldi r27,0
 513 01cc 00C0      		rjmp .L71
 514               	.LVL40:
 515               	.L49:
  86:graphics.c    **** 			}
  87:graphics.c    **** 		}
  88:graphics.c    **** 
  89:graphics.c    **** 		// Translate octants to settings
  90:graphics.c    **** 		unsigned int useX;
  91:graphics.c    **** 		switch(oct) {
  92:graphics.c    **** 			case 0:
  93:graphics.c    **** 			case 3:
  94:graphics.c    **** 			case 4:
  95:graphics.c    **** 			case 7:
  96:graphics.c    **** 				useX = 1;
  97:graphics.c    **** 				break;
  98:graphics.c    **** 			case 1:
  99:graphics.c    **** 			case 2:
 100:graphics.c    **** 			case 5:
 101:graphics.c    **** 			case 6:
 102:graphics.c    **** 				useX = 0;
 103:graphics.c    **** 				break;
 104:graphics.c    **** 
 105:graphics.c    **** 		}
 106:graphics.c    **** 		unsigned int i1, i, i2, c;
 107:graphics.c    **** 		float dx = (float) x2-x1, dy = (float) y2-y1, m;
 108:graphics.c    **** 		if (useX) {
 109:graphics.c    **** 			m = dy/dx;
 110:graphics.c    **** 			c = y1; i1 = x1; i2 = x2;
 111:graphics.c    **** 		} else {
 112:graphics.c    **** 			m = dx/dy;
 113:graphics.c    **** 			c = x1; i1 = y1; i2 = y2;
 114:graphics.c    **** 		}
 115:graphics.c    **** 
 116:graphics.c    **** 		int flipM;
 117:graphics.c    **** 		switch(oct) {
 516               		.loc 1 117 0
 517 01ce 8D81      		ldd r24,Y+5
 518 01d0 9E81      		ldd r25,Y+6
 519 01d2 0397      		sbiw r24,3
 520 01d4 0497      		sbiw r24,4
 521 01d6 00F0      		brlo .L66
 118:graphics.c    **** 			case 0:
 119:graphics.c    **** 			case 1:
 120:graphics.c    **** 			case 2:
 121:graphics.c    **** 			case 7:
 122:graphics.c    **** 				flipM = 1;
 522               		.loc 1 122 0
 523 01d8 AA24      		clr r10
 524 01da A394      		inc r10
 525 01dc B12C      		mov r11,__zero_reg__
 526               	.LVL41:
 527 01de 00C0      		rjmp .L29
 528               	.LVL42:
 529               	.L66:
 123:graphics.c    **** 				break;
 124:graphics.c    **** 			case 3:
 125:graphics.c    **** 			case 4:
 126:graphics.c    **** 			case 5:
 127:graphics.c    **** 			case 6:
 128:graphics.c    **** 				flipM = -1;
 530               		.loc 1 128 0
 531 01e0 AA24      		clr r10
 532 01e2 AA94      		dec r10
 533 01e4 BA2C      		mov r11,r10
 534               	.LVL43:
 535               	.L29:
 129:graphics.c    **** 				break;
 130:graphics.c    **** 		}
 131:graphics.c    **** 
 132:graphics.c    **** 		// Perform the actual loop
 133:graphics.c    **** 		float err = 0.0;
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 135:graphics.c    **** 			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
 136:graphics.c    **** 			err += ABS(m);
 536               		.loc 1 136 0
 537 01e6 2601      		movw r4,r12
 538 01e8 3701      		movw r6,r14
 539 01ea 77FA      		bst r7,7
 540 01ec 7094      		com r7
 541 01ee 77F8      		bld r7,7
 542 01f0 7094      		com r7
 543 01f2 20E0      		ldi r18,0
 544 01f4 30E0      		ldi r19,0
 545 01f6 A901      		movw r20,r18
 546 01f8 C701      		movw r24,r14
 547 01fa B601      		movw r22,r12
 548 01fc 0E94 0000 		call __gesf2
 549               	.LVL44:
 550 0200 87FD      		sbrc r24,7
 551 0202 00C0      		rjmp .L67
 552 0204 CF82      		std Y+7,r12
 553 0206 D886      		std Y+8,r13
 554 0208 E986      		std Y+9,r14
 555 020a FA86      		std Y+10,r15
 556 020c 00C0      		rjmp .L31
 557               	.L67:
 558 020e 4F82      		std Y+7,r4
 559 0210 5886      		std Y+8,r5
 560 0212 6986      		std Y+9,r6
 561 0214 7A86      		std Y+10,r7
 562               	.L31:
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 563               		.loc 1 134 0
 564 0216 E981      		ldd r30,Y+1
 565 0218 FA81      		ldd r31,Y+2
 566 021a FA8B      		std Y+18,r31
 567 021c E98B      		std Y+17,r30
 133:graphics.c    **** 		float err = 0.0;
 568               		.loc 1 133 0
 569 021e 912C      		mov r9,__zero_reg__
 570               	.LVL45:
 571 0220 812C      		mov r8,__zero_reg__
 572               	.LVL46:
 573 0222 712C      		mov r7,__zero_reg__
 574 0224 612C      		mov r6,__zero_reg__
 137:graphics.c    **** 			if (err > 0.5f) {
 138:graphics.c    **** 				(SIGN(m*flipM) > 0) ? c++ : c--;
 575               		.loc 1 138 0
 576 0226 C501      		movw r24,r10
 577 0228 AA27      		clr r26
 578 022a 97FD      		sbrc r25,7
 579 022c A095      		com r26
 580 022e BA2F      		mov r27,r26
 581 0230 8D87      		std Y+13,r24
 582 0232 9E87      		std Y+14,r25
 583 0234 AF87      		std Y+15,r26
 584 0236 B88B      		std Y+16,r27
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 585               		.loc 1 134 0
 586 0238 00C0      		rjmp .L68
 587               	.LVL47:
 588               	.L48:
 135:graphics.c    **** 			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
 589               		.loc 1 135 0
 590 023a AB81      		ldd r26,Y+3
 591 023c BC81      		ldd r27,Y+4
 592 023e 41E0      		ldi r20,lo8(1)
 593 0240 AB2B      		or r26,r27
 594 0242 01F0      		breq .L34
 135:graphics.c    **** 			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
 595               		.loc 1 135 0 is_stmt 0 discriminator 1
 596 0244 602F      		mov r22,r16
 597 0246 8989      		ldd r24,Y+17
 598 0248 00C0      		rjmp .L69
 599               	.L34:
 135:graphics.c    **** 			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
 600               		.loc 1 135 0 discriminator 2
 601 024a 6989      		ldd r22,Y+17
 602 024c 802F      		mov r24,r16
 603               	.L69:
 604 024e 0E94 0000 		call set_pixel
 605               	.LVL48:
 136:graphics.c    **** 			err += ABS(m);
 606               		.loc 1 136 0 is_stmt 1 discriminator 2
 607 0252 7F81      		ldd r23,Y+7
 608 0254 6885      		ldd r22,Y+8
 609 0256 9985      		ldd r25,Y+9
 610 0258 8A85      		ldd r24,Y+10
 611 025a 272F      		mov r18,r23
 612 025c 362F      		mov r19,r22
 613 025e 492F      		mov r20,r25
 614 0260 582F      		mov r21,r24
 615 0262 D401      		movw r26,r8
 616 0264 F301      		movw r30,r6
 617 0266 6B2F      		mov r22,r27
 618 0268 782D      		mov r23,r8
 619 026a 8F2F      		mov r24,r31
 620 026c 962D      		mov r25,r6
 621 026e 0E94 0000 		call __addsf3
 622               	.LVL49:
 623 0272 6B87      		std Y+11,r22
 624 0274 7C87      		std Y+12,r23
 625 0276 2C01      		movw r4,r24
 626 0278 962E      		mov r9,r22
 627               	.LVL50:
 628 027a 872E      		mov r8,r23
 629 027c 782E      		mov r7,r24
 630 027e 652C      		mov r6,r5
 631               	.LVL51:
 137:graphics.c    **** 			if (err > 0.5f) {
 632               		.loc 1 137 0 discriminator 2
 633 0280 20E0      		ldi r18,0
 634 0282 30E0      		ldi r19,0
 635 0284 40E0      		ldi r20,0
 636 0286 5FE3      		ldi r21,lo8(63)
 637 0288 D401      		movw r26,r8
 638 028a F301      		movw r30,r6
 639 028c 6B2F      		mov r22,r27
 640 028e 7A2F      		mov r23,r26
 641 0290 8F2F      		mov r24,r31
 642 0292 9E2F      		mov r25,r30
 643 0294 0E94 0000 		call __gtsf2
 644               	.LVL52:
 645 0298 1816      		cp __zero_reg__,r24
 646 029a 04F0      		brlt .+2
 647 029c 00C0      		rjmp .L36
 648               	.LVL53:
 649               		.loc 1 138 0
 650 029e 6D85      		ldd r22,Y+13
 651 02a0 7E85      		ldd r23,Y+14
 652 02a2 8F85      		ldd r24,Y+15
 653 02a4 9889      		ldd r25,Y+16
 654 02a6 0E94 0000 		call __floatsisf
 655               	.LVL54:
 656 02aa 9B01      		movw r18,r22
 657 02ac AC01      		movw r20,r24
 658 02ae C701      		movw r24,r14
 659 02b0 B601      		movw r22,r12
 660 02b2 0E94 0000 		call __mulsf3
 661               	.LVL55:
 662 02b6 3B01      		movw r6,r22
 663 02b8 4C01      		movw r8,r24
 664               	.LVL56:
 665 02ba E1E0      		ldi r30,lo8(1)
 666 02bc F0E0      		ldi r31,0
 667 02be FE83      		std Y+6,r31
 668 02c0 ED83      		std Y+5,r30
 669 02c2 20E0      		ldi r18,0
 670 02c4 30E0      		ldi r19,0
 671 02c6 A901      		movw r20,r18
 672 02c8 772D      		mov r23,r7
 673 02ca 992D      		mov r25,r9
 674 02cc 0E94 0000 		call __gtsf2
 675               	.LVL57:
 676 02d0 1816      		cp __zero_reg__,r24
 677 02d2 04F0      		brlt .L39
 678 02d4 1E82      		std Y+6,__zero_reg__
 679 02d6 1D82      		std Y+5,__zero_reg__
 680               	.L39:
 681 02d8 AA24      		clr r10
 682 02da A394      		inc r10
 683 02dc B12C      		mov r11,__zero_reg__
 684 02de 20E0      		ldi r18,0
 685 02e0 30E0      		ldi r19,0
 686 02e2 A901      		movw r20,r18
 687 02e4 662D      		mov r22,r6
 688 02e6 772D      		mov r23,r7
 689 02e8 882D      		mov r24,r8
 690 02ea 992D      		mov r25,r9
 691 02ec 0E94 0000 		call __ltsf2
 692               	.LVL58:
 693 02f0 87FD      		sbrc r24,7
 694 02f2 00C0      		rjmp .L40
 695 02f4 A12C      		mov r10,__zero_reg__
 696 02f6 B12C      		mov r11,__zero_reg__
 697               	.L40:
 698 02f8 8D81      		ldd r24,Y+5
 699 02fa 9E81      		ldd r25,Y+6
 700 02fc 8A19      		sub r24,r10
 701 02fe 9B09      		sbc r25,r11
 702 0300 0197      		sbiw r24,1
 703 0302 01F4      		brne .L38
 704               		.loc 1 138 0 is_stmt 0 discriminator 1
 705 0304 0F5F      		subi r16,-1
 706 0306 1F4F      		sbci r17,-1
 707               	.LVL59:
 708 0308 00C0      		rjmp .L41
 709               	.L38:
 710               		.loc 1 138 0 discriminator 2
 711 030a 0150      		subi r16,1
 712 030c 1109      		sbc r17,__zero_reg__
 713               	.LVL60:
 714               	.L41:
 139:graphics.c    **** 				err -= 1.0f;
 715               		.loc 1 139 0 is_stmt 1
 716 030e 20E0      		ldi r18,0
 717 0310 30E0      		ldi r19,0
 718 0312 40E8      		ldi r20,lo8(-128)
 719 0314 5FE3      		ldi r21,lo8(63)
 720 0316 BB85      		ldd r27,Y+11
 721 0318 AC85      		ldd r26,Y+12
 722 031a 6B2F      		mov r22,r27
 723 031c 7A2F      		mov r23,r26
 724 031e 842D      		mov r24,r4
 725 0320 952D      		mov r25,r5
 726 0322 0E94 0000 		call __subsf3
 727               	.LVL61:
 728 0326 962E      		mov r9,r22
 729               	.LVL62:
 730 0328 872E      		mov r8,r23
 731 032a 782E      		mov r7,r24
 732               	.LVL63:
 733 032c 692E      		mov r6,r25
 734               	.LVL64:
 735               	.L36:
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 736               		.loc 1 134 0
 737 032e 8981      		ldd r24,Y+1
 738 0330 9A81      		ldd r25,Y+2
 739 0332 8215      		cp r24,r2
 740 0334 9305      		cpc r25,r3
 741 0336 00F4      		brsh .L42
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 742               		.loc 1 134 0 is_stmt 0 discriminator 1
 743 0338 A989      		ldd r26,Y+17
 744 033a BA89      		ldd r27,Y+18
 745 033c 1196      		adiw r26,1
 746 033e BA8B      		std Y+18,r27
 747 0340 A98B      		std Y+17,r26
 748               	.LVL65:
 749 0342 00C0      		rjmp .L68
 750               	.LVL66:
 751               	.L42:
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 752               		.loc 1 134 0 discriminator 2
 753 0344 E989      		ldd r30,Y+17
 754 0346 FA89      		ldd r31,Y+18
 755 0348 3197      		sbiw r30,1
 756 034a FA8B      		std Y+18,r31
 757 034c E98B      		std Y+17,r30
 758               	.LVL67:
 759               	.L68:
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 760               		.loc 1 134 0 discriminator 1
 761 034e 8981      		ldd r24,Y+1
 762 0350 9A81      		ldd r25,Y+2
 763 0352 8215      		cp r24,r2
 764 0354 9305      		cpc r25,r3
 765 0356 00F4      		brsh .L44
 766 0358 A989      		ldd r26,Y+17
 767 035a BA89      		ldd r27,Y+18
 768 035c 2A16      		cp r2,r26
 769 035e 3B06      		cpc r3,r27
 770 0360 00F0      		brlo .+2
 771 0362 00C0      		rjmp .L48
 772 0364 00C0      		rjmp .L11
 773               	.L44:
 134:graphics.c    **** 		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
 774               		.loc 1 134 0 discriminator 2
 775 0366 E989      		ldd r30,Y+17
 776 0368 FA89      		ldd r31,Y+18
 777 036a E215      		cp r30,r2
 778 036c F305      		cpc r31,r3
 779 036e 00F0      		brlo .+2
 780 0370 00C0      		rjmp .L48
 781 0372 00C0      		rjmp .L11
 782               	.LVL68:
 783               	.L51:
  71:graphics.c    **** 				oct = 0;
 784               		.loc 1 71 0 is_stmt 1
 785 0374 1E82      		std Y+6,__zero_reg__
 786 0376 1D82      		std Y+5,__zero_reg__
 787 0378 00C0      		rjmp .L23
 788               	.L53:
  73:graphics.c    **** 				oct = 7;
 789               		.loc 1 73 0
 790 037a 87E0      		ldi r24,lo8(7)
 791 037c 90E0      		ldi r25,0
 792 037e 9E83      		std Y+6,r25
 793 0380 8D83      		std Y+5,r24
 794 0382 00C0      		rjmp .L23
 795               	.L55:
  81:graphics.c    **** 				oct = 4;
 796               		.loc 1 81 0
 797 0384 A4E0      		ldi r26,lo8(4)
 798 0386 B0E0      		ldi r27,0
 799 0388 BE83      		std Y+6,r27
 800 038a AD83      		std Y+5,r26
 801 038c 00C0      		rjmp .L23
 802               	.L57:
  83:graphics.c    **** 				oct = 3;
 803               		.loc 1 83 0
 804 038e E3E0      		ldi r30,lo8(3)
 805 0390 F0E0      		ldi r31,0
 806 0392 FE83      		std Y+6,r31
 807 0394 ED83      		std Y+5,r30
 808               	.L23:
 809               	.LVL69:
 110:graphics.c    **** 			c = y1; i1 = x1; i2 = x2;
 810               		.loc 1 110 0
 811 0396 092D      		mov r16,r9
 812 0398 10E0      		ldi r17,0
 813               	.LVL70:
 814 039a 8A2D      		mov r24,r10
 815 039c 90E0      		ldi r25,0
 816 039e 9A83      		std Y+2,r25
 817 03a0 8983      		std Y+1,r24
 818               	.LVL71:
 819 03a2 282C      		mov r2,r8
 820 03a4 312C      		mov r3,__zero_reg__
 821               	.LVL72:
  96:graphics.c    **** 				useX = 1;
 822               		.loc 1 96 0
 823 03a6 A1E0      		ldi r26,lo8(1)
 824 03a8 B0E0      		ldi r27,0
 825 03aa BC83      		std Y+4,r27
 826 03ac AB83      		std Y+3,r26
 827 03ae 00C0      		rjmp .L49
 828               	.LVL73:
 829               	.L50:
  69:graphics.c    **** 				oct = 1;
 830               		.loc 1 69 0
 831 03b0 E1E0      		ldi r30,lo8(1)
 832 03b2 F0E0      		ldi r31,0
 833 03b4 00C0      		rjmp .L70
 834               	.L64:
  75:graphics.c    **** 				oct = 6;
 835               		.loc 1 75 0
 836 03b6 86E0      		ldi r24,lo8(6)
 837 03b8 90E0      		ldi r25,0
 838 03ba 9E83      		std Y+6,r25
 839 03bc 8D83      		std Y+5,r24
 840 03be 00C0      		rjmp .L20
 841               	.L54:
  79:graphics.c    **** 				oct = 5;
 842               		.loc 1 79 0
 843 03c0 A5E0      		ldi r26,lo8(5)
 844 03c2 B0E0      		ldi r27,0
 845               	.L71:
 846 03c4 BE83      		std Y+6,r27
 847 03c6 AD83      		std Y+5,r26
 848 03c8 00C0      		rjmp .L20
 849               	.L65:
  85:graphics.c    **** 				oct = 2;
 850               		.loc 1 85 0
 851 03ca E2E0      		ldi r30,lo8(2)
 852 03cc F0E0      		ldi r31,0
 853               	.L70:
 854 03ce FE83      		std Y+6,r31
 855 03d0 ED83      		std Y+5,r30
 856               	.L20:
 857               	.LVL74:
 112:graphics.c    **** 			m = dx/dy;
 858               		.loc 1 112 0
 859 03d2 222D      		mov r18,r2
 860 03d4 332D      		mov r19,r3
 861 03d6 442D      		mov r20,r4
 862 03d8 552D      		mov r21,r5
 863 03da 662D      		mov r22,r6
 864 03dc 772D      		mov r23,r7
 865 03de 802F      		mov r24,r16
 866 03e0 912F      		mov r25,r17
 867 03e2 0E94 0000 		call __divsf3
 868               	.LVL75:
 869 03e6 C62E      		mov r12,r22
 870 03e8 D72E      		mov r13,r23
 871 03ea E82E      		mov r14,r24
 872 03ec F92E      		mov r15,r25
 873               	.LVL76:
 113:graphics.c    **** 			c = x1; i1 = y1; i2 = y2;
 874               		.loc 1 113 0
 875 03ee 0A2D      		mov r16,r10
 876 03f0 10E0      		ldi r17,0
 877               	.LVL77:
 878 03f2 892D      		mov r24,r9
 879 03f4 90E0      		ldi r25,0
 880 03f6 9A83      		std Y+2,r25
 881 03f8 8983      		std Y+1,r24
 882               	.LVL78:
 883 03fa 2B2C      		mov r2,r11
 884               	.LVL79:
 885 03fc 312C      		mov r3,__zero_reg__
 886               	.LVL80:
 102:graphics.c    **** 				useX = 0;
 887               		.loc 1 102 0
 888 03fe 1C82      		std Y+4,__zero_reg__
 889 0400 1B82      		std Y+3,__zero_reg__
 890 0402 00C0      		rjmp .L49
 891               	.LVL81:
 892               	.L11:
 893               	/* epilogue start */
 894               	.LBE8:
 140:graphics.c    **** 			}
 141:graphics.c    **** 		}
 142:graphics.c    **** 	}
 143:graphics.c    **** }
 895               		.loc 1 143 0
 896 0404 6296      		adiw r28,18
 897 0406 0FB6      		in __tmp_reg__,__SREG__
 898 0408 F894      		cli
 899 040a DEBF      		out __SP_H__,r29
 900 040c 0FBE      		out __SREG__,__tmp_reg__
 901 040e CDBF      		out __SP_L__,r28
 902 0410 DF91      		pop r29
 903 0412 CF91      		pop r28
 904 0414 1F91      		pop r17
 905 0416 0F91      		pop r16
 906 0418 FF90      		pop r15
 907 041a EF90      		pop r14
 908 041c DF90      		pop r13
 909 041e CF90      		pop r12
 910 0420 BF90      		pop r11
 911               	.LVL82:
 912 0422 AF90      		pop r10
 913 0424 9F90      		pop r9
 914 0426 8F90      		pop r8
 915 0428 7F90      		pop r7
 916 042a 6F90      		pop r6
 917 042c 5F90      		pop r5
 918 042e 4F90      		pop r4
 919 0430 3F90      		pop r3
 920 0432 2F90      		pop r2
 921 0434 0895      		ret
 922               		.cfi_endproc
 923               	.LFE4:
 925               		.section	.text.draw_character,"ax",@progbits
 926               	.global	draw_character
 928               	draw_character:
 929               	.LFB5:
 144:graphics.c    **** 
 145:graphics.c    **** void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
 930               		.loc 1 145 0
 931               		.cfi_startproc
 932               	.LVL83:
 933 0000 7F92      		push r7
 934               	.LCFI22:
 935               		.cfi_def_cfa_offset 3
 936               		.cfi_offset 7, -2
 937 0002 8F92      		push r8
 938               	.LCFI23:
 939               		.cfi_def_cfa_offset 4
 940               		.cfi_offset 8, -3
 941 0004 9F92      		push r9
 942               	.LCFI24:
 943               		.cfi_def_cfa_offset 5
 944               		.cfi_offset 9, -4
 945 0006 AF92      		push r10
 946               	.LCFI25:
 947               		.cfi_def_cfa_offset 6
 948               		.cfi_offset 10, -5
 949 0008 BF92      		push r11
 950               	.LCFI26:
 951               		.cfi_def_cfa_offset 7
 952               		.cfi_offset 11, -6
 953 000a CF92      		push r12
 954               	.LCFI27:
 955               		.cfi_def_cfa_offset 8
 956               		.cfi_offset 12, -7
 957 000c DF92      		push r13
 958               	.LCFI28:
 959               		.cfi_def_cfa_offset 9
 960               		.cfi_offset 13, -8
 961 000e EF92      		push r14
 962               	.LCFI29:
 963               		.cfi_def_cfa_offset 10
 964               		.cfi_offset 14, -9
 965 0010 FF92      		push r15
 966               	.LCFI30:
 967               		.cfi_def_cfa_offset 11
 968               		.cfi_offset 15, -10
 969 0012 0F93      		push r16
 970               	.LCFI31:
 971               		.cfi_def_cfa_offset 12
 972               		.cfi_offset 16, -11
 973 0014 1F93      		push r17
 974               	.LCFI32:
 975               		.cfi_def_cfa_offset 13
 976               		.cfi_offset 17, -12
 977 0016 CF93      		push r28
 978               	.LCFI33:
 979               		.cfi_def_cfa_offset 14
 980               		.cfi_offset 28, -13
 981 0018 DF93      		push r29
 982               	.LCFI34:
 983               		.cfi_def_cfa_offset 15
 984               		.cfi_offset 29, -14
 985               	/* prologue: function */
 986               	/* frame size = 0 */
 987               	/* stack size = 13 */
 988               	.L__stack_usage = 13
 989 001a 862E      		mov r8,r22
 990 001c 742E      		mov r7,r20
 991               	.LVL84:
 146:graphics.c    **** 	int i, j;
 147:graphics.c    **** 	int char_width = 5;
 148:graphics.c    **** 	int char_height = 8;
 149:graphics.c    **** 	
 150:graphics.c    **** 	// loop through each pixel in the character array and plot each one individually
 151:graphics.c    **** 	for (i = 0; i<char_width; i++) {
 992               		.loc 1 151 0
 993 001e 00E0      		ldi r16,0
 994 0020 10E0      		ldi r17,0
 995               	.LBB9:
 152:graphics.c    **** 		for (j = 0; j<char_height; j++) {
 153:graphics.c    **** 			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) 
 996               		.loc 1 153 0
 997 0022 90E0      		ldi r25,0
 998 0024 8097      		sbiw r24,32
 999               	.LVL85:
 1000 0026 25E0      		ldi r18,lo8(5)
 1001 0028 289F      		mul r18,r24
 1002 002a 6001      		movw r12,r0
 1003 002c 299F      		mul r18,r25
 1004 002e D00C      		add r13,r0
 1005 0030 1124      		clr __zero_reg__
 1006               	.LBE9:
 1007 0032 AA24      		clr r10
 1008 0034 A394      		inc r10
 1009 0036 B12C      		mov r11,__zero_reg__
 1010 0038 00C0      		rjmp .L73
 1011               	.LVL86:
 1012               	.L74:
 1013               		.loc 1 153 0 is_stmt 0 discriminator 2
 1014 003a A501      		movw r20,r10
 1015 003c 0C2E      		mov r0,r28
 1016 003e 00C0      		rjmp 2f
 1017               		1:
 1018 0040 440F      		lsl r20
 1019 0042 551F      		rol r21
 1020               		2:
 1021 0044 0A94      		dec r0
 1022 0046 02F4      		brpl 1b
 1023 0048 4E21      		and r20,r14
 1024 004a 5F21      		and r21,r15
 1025 004c 0C2E      		mov r0,r28
 1026 004e 00C0      		rjmp 2f
 1027               		1:
 1028 0050 5595      		asr r21
 1029 0052 4795      		ror r20
 1030               		2:
 1031 0054 0A94      		dec r0
 1032 0056 02F4      		brpl 1b
 145:graphics.c    **** void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
 1033               		.loc 1 145 0 is_stmt 1 discriminator 2
 1034 0058 6C2F      		mov r22,r28
 1035 005a 670D      		add r22,r7
 1036               		.loc 1 153 0 discriminator 2
 1037 005c 892D      		mov r24,r9
 1038 005e 0E94 0000 		call set_pixel
 1039               	.LVL87:
 152:graphics.c    **** 		for (j = 0; j<char_height; j++) {
 1040               		.loc 1 152 0 discriminator 2
 1041 0062 2196      		adiw r28,1
 1042               	.LVL88:
 1043 0064 C830      		cpi r28,8
 1044 0066 D105      		cpc r29,__zero_reg__
 1045 0068 01F4      		brne .L74
 151:graphics.c    **** 	for (i = 0; i<char_width; i++) {
 1046               		.loc 1 151 0
 1047 006a 0F5F      		subi r16,-1
 1048 006c 1F4F      		sbci r17,-1
 1049               	.LVL89:
 1050 006e 0530      		cpi r16,5
 1051 0070 1105      		cpc r17,__zero_reg__
 1052 0072 01F0      		breq .L72
 1053               	.LVL90:
 1054               	.L73:
 145:graphics.c    **** void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
 1055               		.loc 1 145 0 discriminator 1
 1056 0074 C0E0      		ldi r28,0
 1057 0076 D0E0      		ldi r29,0
 1058               	.LBB10:
 1059               		.loc 1 153 0 discriminator 1
 1060 0078 F801      		movw r30,r16
 1061 007a EC0D      		add r30,r12
 1062 007c FD1D      		adc r31,r13
 1063 007e E050      		subi r30,lo8(-(ASCII))
 1064 0080 F040      		sbci r31,hi8(-(ASCII))
 1065               	/* #APP */
 1066               	 ;  153 "graphics.c" 1
 1067 0082 E491      		lpm r30, Z
 1068               		
 1069               	 ;  0 "" 2
 1070               	/* #NOAPP */
 1071               	.LBE10:
 1072 0084 EE2E      		mov r14,r30
 1073 0086 F12C      		mov r15,__zero_reg__
 145:graphics.c    **** void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
 1074               		.loc 1 145 0 discriminator 1
 1075 0088 982C      		mov r9,r8
 1076 008a 900E      		add r9,r16
 1077 008c 00C0      		rjmp .L74
 1078               	.LVL91:
 1079               	.L72:
 1080               	/* epilogue start */
 154:graphics.c    **** 		}
 155:graphics.c    **** 	}
 156:graphics.c    **** }
 1081               		.loc 1 156 0
 1082 008e DF91      		pop r29
 1083 0090 CF91      		pop r28
 1084               	.LVL92:
 1085 0092 1F91      		pop r17
 1086 0094 0F91      		pop r16
 1087               	.LVL93:
 1088 0096 FF90      		pop r15
 1089 0098 EF90      		pop r14
 1090 009a DF90      		pop r13
 1091 009c CF90      		pop r12
 1092 009e BF90      		pop r11
 1093 00a0 AF90      		pop r10
 1094 00a2 9F90      		pop r9
 1095 00a4 8F90      		pop r8
 1096               	.LVL94:
 1097 00a6 7F90      		pop r7
 1098               	.LVL95:
 1099 00a8 0895      		ret
 1100               		.cfi_endproc
 1101               	.LFE5:
 1103               		.section	.text.draw_string,"ax",@progbits
 1104               	.global	draw_string
 1106               	draw_string:
 1107               	.LFB6:
 157:graphics.c    **** 
 158:graphics.c    **** void draw_string( char *characters, unsigned char top_left_x, unsigned char top_left_y ) {
 1108               		.loc 1 158 0
 1109               		.cfi_startproc
 1110               	.LVL96:
 1111 0000 0F93      		push r16
 1112               	.LCFI35:
 1113               		.cfi_def_cfa_offset 3
 1114               		.cfi_offset 16, -2
 1115 0002 1F93      		push r17
 1116               	.LCFI36:
 1117               		.cfi_def_cfa_offset 4
 1118               		.cfi_offset 17, -3
 1119 0004 CF93      		push r28
 1120               	.LCFI37:
 1121               		.cfi_def_cfa_offset 5
 1122               		.cfi_offset 28, -4
 1123 0006 DF93      		push r29
 1124               	.LCFI38:
 1125               		.cfi_def_cfa_offset 6
 1126               		.cfi_offset 29, -5
 1127               	/* prologue: function */
 1128               	/* frame size = 0 */
 1129               	/* stack size = 4 */
 1130               	.L__stack_usage = 4
 1131 0008 162F      		mov r17,r22
 1132 000a 042F      		mov r16,r20
 1133               	.LVL97:
 1134 000c EC01      		movw r28,r24
 159:graphics.c    **** 	int i = 0;
 160:graphics.c    **** 	while (*characters != 0) {
 1135               		.loc 1 160 0
 1136 000e 00C0      		rjmp .L78
 1137               	.LVL98:
 1138               	.L79:
 161:graphics.c    **** 		draw_character(*(characters), top_left_x+i*5, top_left_y);
 1139               		.loc 1 161 0
 1140 0010 402F      		mov r20,r16
 1141 0012 612F      		mov r22,r17
 1142 0014 0E94 0000 		call draw_character
 1143               	.LVL99:
 1144 0018 1B5F      		subi r17,lo8(-(5))
 1145               	.L78:
 160:graphics.c    **** 	while (*characters != 0) {
 1146               		.loc 1 160 0 discriminator 1
 1147 001a 8991      		ld r24,Y+
 1148 001c 8111      		cpse r24,__zero_reg__
 1149 001e 00C0      		rjmp .L79
 1150               	/* epilogue start */
 162:graphics.c    **** 		// Add a column of spaces here if you want to space out the lettering.
 163:graphics.c    **** 	    // See lcd.c for a hint on how to do this.
 164:graphics.c    **** 		characters++;
 165:graphics.c    **** 		i++;
 166:graphics.c    **** 	}
 167:graphics.c    **** }
 1151               		.loc 1 167 0
 1152 0020 DF91      		pop r29
 1153 0022 CF91      		pop r28
 1154 0024 1F91      		pop r17
 1155 0026 0F91      		pop r16
 1156               	.LVL100:
 1157 0028 0895      		ret
 1158               		.cfi_endproc
 1159               	.LFE6:
 1161               		.comm	screenBuffer,504,1
 1162               		.section	.progmem.data,"a",@progbits
 1165               	ASCII:
 1166 0000 00        		.byte	0
 1167 0001 00        		.byte	0
 1168 0002 00        		.byte	0
 1169 0003 00        		.byte	0
 1170 0004 00        		.byte	0
 1171 0005 00        		.byte	0
 1172 0006 00        		.byte	0
 1173 0007 5F        		.byte	95
 1174 0008 00        		.byte	0
 1175 0009 00        		.byte	0
 1176 000a 00        		.byte	0
 1177 000b 07        		.byte	7
 1178 000c 00        		.byte	0
 1179 000d 07        		.byte	7
 1180 000e 00        		.byte	0
 1181 000f 14        		.byte	20
 1182 0010 7F        		.byte	127
 1183 0011 14        		.byte	20
 1184 0012 7F        		.byte	127
 1185 0013 14        		.byte	20
 1186 0014 24        		.byte	36
 1187 0015 2A        		.byte	42
 1188 0016 7F        		.byte	127
 1189 0017 2A        		.byte	42
 1190 0018 12        		.byte	18
 1191 0019 23        		.byte	35
 1192 001a 13        		.byte	19
 1193 001b 08        		.byte	8
 1194 001c 64        		.byte	100
 1195 001d 62        		.byte	98
 1196 001e 36        		.byte	54
 1197 001f 49        		.byte	73
 1198 0020 55        		.byte	85
 1199 0021 22        		.byte	34
 1200 0022 50        		.byte	80
 1201 0023 00        		.byte	0
 1202 0024 05        		.byte	5
 1203 0025 03        		.byte	3
 1204 0026 00        		.byte	0
 1205 0027 00        		.byte	0
 1206 0028 00        		.byte	0
 1207 0029 1C        		.byte	28
 1208 002a 22        		.byte	34
 1209 002b 41        		.byte	65
 1210 002c 00        		.byte	0
 1211 002d 00        		.byte	0
 1212 002e 41        		.byte	65
 1213 002f 22        		.byte	34
 1214 0030 1C        		.byte	28
 1215 0031 00        		.byte	0
 1216 0032 14        		.byte	20
 1217 0033 08        		.byte	8
 1218 0034 3E        		.byte	62
 1219 0035 08        		.byte	8
 1220 0036 14        		.byte	20
 1221 0037 08        		.byte	8
 1222 0038 08        		.byte	8
 1223 0039 3E        		.byte	62
 1224 003a 08        		.byte	8
 1225 003b 08        		.byte	8
 1226 003c 00        		.byte	0
 1227 003d 50        		.byte	80
 1228 003e 30        		.byte	48
 1229 003f 00        		.byte	0
 1230 0040 00        		.byte	0
 1231 0041 08        		.byte	8
 1232 0042 08        		.byte	8
 1233 0043 08        		.byte	8
 1234 0044 08        		.byte	8
 1235 0045 08        		.byte	8
 1236 0046 00        		.byte	0
 1237 0047 60        		.byte	96
 1238 0048 60        		.byte	96
 1239 0049 00        		.byte	0
 1240 004a 00        		.byte	0
 1241 004b 20        		.byte	32
 1242 004c 10        		.byte	16
 1243 004d 08        		.byte	8
 1244 004e 04        		.byte	4
 1245 004f 02        		.byte	2
 1246 0050 3E        		.byte	62
 1247 0051 51        		.byte	81
 1248 0052 49        		.byte	73
 1249 0053 45        		.byte	69
 1250 0054 3E        		.byte	62
 1251 0055 00        		.byte	0
 1252 0056 42        		.byte	66
 1253 0057 7F        		.byte	127
 1254 0058 40        		.byte	64
 1255 0059 00        		.byte	0
 1256 005a 42        		.byte	66
 1257 005b 61        		.byte	97
 1258 005c 51        		.byte	81
 1259 005d 49        		.byte	73
 1260 005e 46        		.byte	70
 1261 005f 21        		.byte	33
 1262 0060 41        		.byte	65
 1263 0061 45        		.byte	69
 1264 0062 4B        		.byte	75
 1265 0063 31        		.byte	49
 1266 0064 18        		.byte	24
 1267 0065 14        		.byte	20
 1268 0066 12        		.byte	18
 1269 0067 7F        		.byte	127
 1270 0068 10        		.byte	16
 1271 0069 27        		.byte	39
 1272 006a 45        		.byte	69
 1273 006b 45        		.byte	69
 1274 006c 45        		.byte	69
 1275 006d 39        		.byte	57
 1276 006e 3C        		.byte	60
 1277 006f 4A        		.byte	74
 1278 0070 49        		.byte	73
 1279 0071 49        		.byte	73
 1280 0072 30        		.byte	48
 1281 0073 01        		.byte	1
 1282 0074 71        		.byte	113
 1283 0075 09        		.byte	9
 1284 0076 05        		.byte	5
 1285 0077 03        		.byte	3
 1286 0078 36        		.byte	54
 1287 0079 49        		.byte	73
 1288 007a 49        		.byte	73
 1289 007b 49        		.byte	73
 1290 007c 36        		.byte	54
 1291 007d 06        		.byte	6
 1292 007e 49        		.byte	73
 1293 007f 49        		.byte	73
 1294 0080 29        		.byte	41
 1295 0081 1E        		.byte	30
 1296 0082 00        		.byte	0
 1297 0083 36        		.byte	54
 1298 0084 36        		.byte	54
 1299 0085 00        		.byte	0
 1300 0086 00        		.byte	0
 1301 0087 00        		.byte	0
 1302 0088 56        		.byte	86
 1303 0089 36        		.byte	54
 1304 008a 00        		.byte	0
 1305 008b 00        		.byte	0
 1306 008c 08        		.byte	8
 1307 008d 14        		.byte	20
 1308 008e 22        		.byte	34
 1309 008f 41        		.byte	65
 1310 0090 00        		.byte	0
 1311 0091 14        		.byte	20
 1312 0092 14        		.byte	20
 1313 0093 14        		.byte	20
 1314 0094 14        		.byte	20
 1315 0095 14        		.byte	20
 1316 0096 00        		.byte	0
 1317 0097 41        		.byte	65
 1318 0098 22        		.byte	34
 1319 0099 14        		.byte	20
 1320 009a 08        		.byte	8
 1321 009b 02        		.byte	2
 1322 009c 01        		.byte	1
 1323 009d 51        		.byte	81
 1324 009e 09        		.byte	9
 1325 009f 06        		.byte	6
 1326 00a0 32        		.byte	50
 1327 00a1 49        		.byte	73
 1328 00a2 79        		.byte	121
 1329 00a3 41        		.byte	65
 1330 00a4 3E        		.byte	62
 1331 00a5 7E        		.byte	126
 1332 00a6 11        		.byte	17
 1333 00a7 11        		.byte	17
 1334 00a8 11        		.byte	17
 1335 00a9 7E        		.byte	126
 1336 00aa 7F        		.byte	127
 1337 00ab 49        		.byte	73
 1338 00ac 49        		.byte	73
 1339 00ad 49        		.byte	73
 1340 00ae 36        		.byte	54
 1341 00af 3E        		.byte	62
 1342 00b0 41        		.byte	65
 1343 00b1 41        		.byte	65
 1344 00b2 41        		.byte	65
 1345 00b3 22        		.byte	34
 1346 00b4 7F        		.byte	127
 1347 00b5 41        		.byte	65
 1348 00b6 41        		.byte	65
 1349 00b7 22        		.byte	34
 1350 00b8 1C        		.byte	28
 1351 00b9 7F        		.byte	127
 1352 00ba 49        		.byte	73
 1353 00bb 49        		.byte	73
 1354 00bc 49        		.byte	73
 1355 00bd 41        		.byte	65
 1356 00be 7F        		.byte	127
 1357 00bf 09        		.byte	9
 1358 00c0 09        		.byte	9
 1359 00c1 09        		.byte	9
 1360 00c2 01        		.byte	1
 1361 00c3 3E        		.byte	62
 1362 00c4 41        		.byte	65
 1363 00c5 49        		.byte	73
 1364 00c6 49        		.byte	73
 1365 00c7 7A        		.byte	122
 1366 00c8 7F        		.byte	127
 1367 00c9 08        		.byte	8
 1368 00ca 08        		.byte	8
 1369 00cb 08        		.byte	8
 1370 00cc 7F        		.byte	127
 1371 00cd 00        		.byte	0
 1372 00ce 41        		.byte	65
 1373 00cf 7F        		.byte	127
 1374 00d0 41        		.byte	65
 1375 00d1 00        		.byte	0
 1376 00d2 20        		.byte	32
 1377 00d3 40        		.byte	64
 1378 00d4 41        		.byte	65
 1379 00d5 3F        		.byte	63
 1380 00d6 01        		.byte	1
 1381 00d7 7F        		.byte	127
 1382 00d8 08        		.byte	8
 1383 00d9 14        		.byte	20
 1384 00da 22        		.byte	34
 1385 00db 41        		.byte	65
 1386 00dc 7F        		.byte	127
 1387 00dd 40        		.byte	64
 1388 00de 40        		.byte	64
 1389 00df 40        		.byte	64
 1390 00e0 40        		.byte	64
 1391 00e1 7F        		.byte	127
 1392 00e2 02        		.byte	2
 1393 00e3 0C        		.byte	12
 1394 00e4 02        		.byte	2
 1395 00e5 7F        		.byte	127
 1396 00e6 7F        		.byte	127
 1397 00e7 04        		.byte	4
 1398 00e8 08        		.byte	8
 1399 00e9 10        		.byte	16
 1400 00ea 7F        		.byte	127
 1401 00eb 3E        		.byte	62
 1402 00ec 41        		.byte	65
 1403 00ed 41        		.byte	65
 1404 00ee 41        		.byte	65
 1405 00ef 3E        		.byte	62
 1406 00f0 7F        		.byte	127
 1407 00f1 09        		.byte	9
 1408 00f2 09        		.byte	9
 1409 00f3 09        		.byte	9
 1410 00f4 06        		.byte	6
 1411 00f5 3E        		.byte	62
 1412 00f6 41        		.byte	65
 1413 00f7 51        		.byte	81
 1414 00f8 21        		.byte	33
 1415 00f9 5E        		.byte	94
 1416 00fa 7F        		.byte	127
 1417 00fb 09        		.byte	9
 1418 00fc 19        		.byte	25
 1419 00fd 29        		.byte	41
 1420 00fe 46        		.byte	70
 1421 00ff 46        		.byte	70
 1422 0100 49        		.byte	73
 1423 0101 49        		.byte	73
 1424 0102 49        		.byte	73
 1425 0103 31        		.byte	49
 1426 0104 01        		.byte	1
 1427 0105 01        		.byte	1
 1428 0106 7F        		.byte	127
 1429 0107 01        		.byte	1
 1430 0108 01        		.byte	1
 1431 0109 3F        		.byte	63
 1432 010a 40        		.byte	64
 1433 010b 40        		.byte	64
 1434 010c 40        		.byte	64
 1435 010d 3F        		.byte	63
 1436 010e 1F        		.byte	31
 1437 010f 20        		.byte	32
 1438 0110 40        		.byte	64
 1439 0111 20        		.byte	32
 1440 0112 1F        		.byte	31
 1441 0113 3F        		.byte	63
 1442 0114 40        		.byte	64
 1443 0115 38        		.byte	56
 1444 0116 40        		.byte	64
 1445 0117 3F        		.byte	63
 1446 0118 63        		.byte	99
 1447 0119 14        		.byte	20
 1448 011a 08        		.byte	8
 1449 011b 14        		.byte	20
 1450 011c 63        		.byte	99
 1451 011d 07        		.byte	7
 1452 011e 08        		.byte	8
 1453 011f 70        		.byte	112
 1454 0120 08        		.byte	8
 1455 0121 07        		.byte	7
 1456 0122 61        		.byte	97
 1457 0123 51        		.byte	81
 1458 0124 49        		.byte	73
 1459 0125 45        		.byte	69
 1460 0126 43        		.byte	67
 1461 0127 00        		.byte	0
 1462 0128 7F        		.byte	127
 1463 0129 41        		.byte	65
 1464 012a 41        		.byte	65
 1465 012b 00        		.byte	0
 1466 012c 02        		.byte	2
 1467 012d 04        		.byte	4
 1468 012e 08        		.byte	8
 1469 012f 10        		.byte	16
 1470 0130 20        		.byte	32
 1471 0131 00        		.byte	0
 1472 0132 41        		.byte	65
 1473 0133 41        		.byte	65
 1474 0134 7F        		.byte	127
 1475 0135 00        		.byte	0
 1476 0136 04        		.byte	4
 1477 0137 02        		.byte	2
 1478 0138 01        		.byte	1
 1479 0139 02        		.byte	2
 1480 013a 04        		.byte	4
 1481 013b 40        		.byte	64
 1482 013c 40        		.byte	64
 1483 013d 40        		.byte	64
 1484 013e 40        		.byte	64
 1485 013f 40        		.byte	64
 1486 0140 00        		.byte	0
 1487 0141 01        		.byte	1
 1488 0142 02        		.byte	2
 1489 0143 04        		.byte	4
 1490 0144 00        		.byte	0
 1491 0145 20        		.byte	32
 1492 0146 54        		.byte	84
 1493 0147 54        		.byte	84
 1494 0148 54        		.byte	84
 1495 0149 78        		.byte	120
 1496 014a 7F        		.byte	127
 1497 014b 48        		.byte	72
 1498 014c 44        		.byte	68
 1499 014d 44        		.byte	68
 1500 014e 38        		.byte	56
 1501 014f 38        		.byte	56
 1502 0150 44        		.byte	68
 1503 0151 44        		.byte	68
 1504 0152 44        		.byte	68
 1505 0153 20        		.byte	32
 1506 0154 38        		.byte	56
 1507 0155 44        		.byte	68
 1508 0156 44        		.byte	68
 1509 0157 48        		.byte	72
 1510 0158 7F        		.byte	127
 1511 0159 38        		.byte	56
 1512 015a 54        		.byte	84
 1513 015b 54        		.byte	84
 1514 015c 54        		.byte	84
 1515 015d 18        		.byte	24
 1516 015e 08        		.byte	8
 1517 015f 7E        		.byte	126
 1518 0160 09        		.byte	9
 1519 0161 01        		.byte	1
 1520 0162 02        		.byte	2
 1521 0163 0C        		.byte	12
 1522 0164 52        		.byte	82
 1523 0165 52        		.byte	82
 1524 0166 52        		.byte	82
 1525 0167 3E        		.byte	62
 1526 0168 7F        		.byte	127
 1527 0169 08        		.byte	8
 1528 016a 04        		.byte	4
 1529 016b 04        		.byte	4
 1530 016c 78        		.byte	120
 1531 016d 00        		.byte	0
 1532 016e 44        		.byte	68
 1533 016f 7D        		.byte	125
 1534 0170 40        		.byte	64
 1535 0171 00        		.byte	0
 1536 0172 20        		.byte	32
 1537 0173 40        		.byte	64
 1538 0174 44        		.byte	68
 1539 0175 3D        		.byte	61
 1540 0176 00        		.byte	0
 1541 0177 7F        		.byte	127
 1542 0178 10        		.byte	16
 1543 0179 28        		.byte	40
 1544 017a 44        		.byte	68
 1545 017b 00        		.byte	0
 1546 017c 00        		.byte	0
 1547 017d 41        		.byte	65
 1548 017e 7F        		.byte	127
 1549 017f 40        		.byte	64
 1550 0180 00        		.byte	0
 1551 0181 7C        		.byte	124
 1552 0182 04        		.byte	4
 1553 0183 18        		.byte	24
 1554 0184 04        		.byte	4
 1555 0185 78        		.byte	120
 1556 0186 7C        		.byte	124
 1557 0187 08        		.byte	8
 1558 0188 04        		.byte	4
 1559 0189 04        		.byte	4
 1560 018a 78        		.byte	120
 1561 018b 38        		.byte	56
 1562 018c 44        		.byte	68
 1563 018d 44        		.byte	68
 1564 018e 44        		.byte	68
 1565 018f 38        		.byte	56
 1566 0190 7C        		.byte	124
 1567 0191 14        		.byte	20
 1568 0192 14        		.byte	20
 1569 0193 14        		.byte	20
 1570 0194 08        		.byte	8
 1571 0195 08        		.byte	8
 1572 0196 14        		.byte	20
 1573 0197 14        		.byte	20
 1574 0198 18        		.byte	24
 1575 0199 7C        		.byte	124
 1576 019a 7C        		.byte	124
 1577 019b 08        		.byte	8
 1578 019c 04        		.byte	4
 1579 019d 04        		.byte	4
 1580 019e 08        		.byte	8
 1581 019f 48        		.byte	72
 1582 01a0 54        		.byte	84
 1583 01a1 54        		.byte	84
 1584 01a2 54        		.byte	84
 1585 01a3 20        		.byte	32
 1586 01a4 04        		.byte	4
 1587 01a5 3F        		.byte	63
 1588 01a6 44        		.byte	68
 1589 01a7 40        		.byte	64
 1590 01a8 20        		.byte	32
 1591 01a9 3C        		.byte	60
 1592 01aa 40        		.byte	64
 1593 01ab 40        		.byte	64
 1594 01ac 20        		.byte	32
 1595 01ad 7C        		.byte	124
 1596 01ae 1C        		.byte	28
 1597 01af 20        		.byte	32
 1598 01b0 40        		.byte	64
 1599 01b1 20        		.byte	32
 1600 01b2 1C        		.byte	28
 1601 01b3 3C        		.byte	60
 1602 01b4 40        		.byte	64
 1603 01b5 30        		.byte	48
 1604 01b6 40        		.byte	64
 1605 01b7 3C        		.byte	60
 1606 01b8 44        		.byte	68
 1607 01b9 28        		.byte	40
 1608 01ba 10        		.byte	16
 1609 01bb 28        		.byte	40
 1610 01bc 44        		.byte	68
 1611 01bd 0C        		.byte	12
 1612 01be 50        		.byte	80
 1613 01bf 50        		.byte	80
 1614 01c0 50        		.byte	80
 1615 01c1 3C        		.byte	60
 1616 01c2 44        		.byte	68
 1617 01c3 64        		.byte	100
 1618 01c4 54        		.byte	84
 1619 01c5 4C        		.byte	76
 1620 01c6 44        		.byte	68
 1621 01c7 00        		.byte	0
 1622 01c8 08        		.byte	8
 1623 01c9 36        		.byte	54
 1624 01ca 41        		.byte	65
 1625 01cb 00        		.byte	0
 1626 01cc 00        		.byte	0
 1627 01cd 00        		.byte	0
 1628 01ce 7F        		.byte	127
 1629 01cf 00        		.byte	0
 1630 01d0 00        		.byte	0
 1631 01d1 00        		.byte	0
 1632 01d2 41        		.byte	65
 1633 01d3 36        		.byte	54
 1634 01d4 08        		.byte	8
 1635 01d5 00        		.byte	0
 1636 01d6 10        		.byte	16
 1637 01d7 08        		.byte	8
 1638 01d8 08        		.byte	8
 1639 01d9 10        		.byte	16
 1640 01da 08        		.byte	8
 1641 01db 78        		.byte	120
 1642 01dc 46        		.byte	70
 1643 01dd 41        		.byte	65
 1644 01de 46        		.byte	70
 1645 01df 78        		.byte	120
 1646               		.text
 1647               	.Letext0:
 1648               		.file 2 "/usr/local/bin/../lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 1649               		.file 3 "ascii_font.h"
 1650               		.file 4 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:00000000 graphics.c
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:2      *ABS*:0000003e __SP_H__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:3      *ABS*:0000003d __SP_L__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:4      *ABS*:0000003f __SREG__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:6      *ABS*:00000001 __zero_reg__
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:13     .text.refresh:00000000 refresh
                            *COM*:000001f8 screenBuffer
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:60     .text.clear:00000000 clear
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:89     .text.set_pixel:00000000 set_pixel
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:172    .text.draw_line:00000000 draw_line
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:928    .text.draw_character:00000000 draw_character
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:1165   .progmem.data:00000000 ASCII
/var/folders/dz/7l40hrmj72997lgmj3pdxb_m0000gn/T//ccCJFiLF.s:1106   .text.draw_string:00000000 draw_string

UNDEFINED SYMBOLS
LCDPosition
LCDWrite
__floatunsisf
__floatsisf
__subsf3
__divsf3
__gtsf2
__lesf2
__gesf2
__addsf3
__mulsf3
__ltsf2
__do_clear_bss
